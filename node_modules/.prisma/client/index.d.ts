
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Professor
 * 
 */
export type Professor = $Result.DefaultSelection<Prisma.$ProfessorPayload>
/**
 * Model Problems
 * 
 */
export type Problems = $Result.DefaultSelection<Prisma.$ProblemsPayload>
/**
 * Model QuestionChoice
 * 
 */
export type QuestionChoice = $Result.DefaultSelection<Prisma.$QuestionChoicePayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model Assessments
 * 
 */
export type Assessments = $Result.DefaultSelection<Prisma.$AssessmentsPayload>
/**
 * Model TestCases
 * 
 */
export type TestCases = $Result.DefaultSelection<Prisma.$TestCasesPayload>
/**
 * Model AttemptTracker
 * 
 */
export type AttemptTracker = $Result.DefaultSelection<Prisma.$AttemptTrackerPayload>
/**
 * Model ProblemLanguage
 * 
 */
export type ProblemLanguage = $Result.DefaultSelection<Prisma.$ProblemLanguagePayload>
/**
 * Model AssessmentSubmission
 * 
 */
export type AssessmentSubmission = $Result.DefaultSelection<Prisma.$AssessmentSubmissionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  STUDENT: 'STUDENT',
  PROFESSOR: 'PROFESSOR',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const DifficultyLevel: {
  Easy: 'Easy',
  Medium: 'Medium',
  Hard: 'Hard'
};

export type DifficultyLevel = (typeof DifficultyLevel)[keyof typeof DifficultyLevel]


export const AssessmentStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

export type AssessmentStatus = (typeof AssessmentStatus)[keyof typeof AssessmentStatus]


export const QuestionType: {
  CODING: 'CODING',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]


export const Status: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  ERROR: 'ERROR'
};

export type Status = (typeof Status)[keyof typeof Status]


export const AssessmentSubmissionStatus: {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  TIMED_OUT: 'TIMED_OUT',
  SUBMITTED: 'SUBMITTED'
};

export type AssessmentSubmissionStatus = (typeof AssessmentSubmissionStatus)[keyof typeof AssessmentSubmissionStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type DifficultyLevel = $Enums.DifficultyLevel

export const DifficultyLevel: typeof $Enums.DifficultyLevel

export type AssessmentStatus = $Enums.AssessmentStatus

export const AssessmentStatus: typeof $Enums.AssessmentStatus

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type AssessmentSubmissionStatus = $Enums.AssessmentSubmissionStatus

export const AssessmentSubmissionStatus: typeof $Enums.AssessmentSubmissionStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.student.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.student.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professor`: Exposes CRUD operations for the **Professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.ProfessorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problems`: Exposes CRUD operations for the **Problems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Problems
    * const problems = await prisma.problems.findMany()
    * ```
    */
  get problems(): Prisma.ProblemsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionChoice`: Exposes CRUD operations for the **QuestionChoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionChoices
    * const questionChoices = await prisma.questionChoice.findMany()
    * ```
    */
  get questionChoice(): Prisma.QuestionChoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assessments`: Exposes CRUD operations for the **Assessments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assessments
    * const assessments = await prisma.assessments.findMany()
    * ```
    */
  get assessments(): Prisma.AssessmentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testCases`: Exposes CRUD operations for the **TestCases** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestCases
    * const testCases = await prisma.testCases.findMany()
    * ```
    */
  get testCases(): Prisma.TestCasesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attemptTracker`: Exposes CRUD operations for the **AttemptTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttemptTrackers
    * const attemptTrackers = await prisma.attemptTracker.findMany()
    * ```
    */
  get attemptTracker(): Prisma.AttemptTrackerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemLanguage`: Exposes CRUD operations for the **ProblemLanguage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemLanguages
    * const problemLanguages = await prisma.problemLanguage.findMany()
    * ```
    */
  get problemLanguage(): Prisma.ProblemLanguageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assessmentSubmission`: Exposes CRUD operations for the **AssessmentSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssessmentSubmissions
    * const assessmentSubmissions = await prisma.assessmentSubmission.findMany()
    * ```
    */
  get assessmentSubmission(): Prisma.AssessmentSubmissionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.0
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Student: 'Student',
    Professor: 'Professor',
    Problems: 'Problems',
    QuestionChoice: 'QuestionChoice',
    Submission: 'Submission',
    Assessments: 'Assessments',
    TestCases: 'TestCases',
    AttemptTracker: 'AttemptTracker',
    ProblemLanguage: 'ProblemLanguage',
    AssessmentSubmission: 'AssessmentSubmission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "student" | "professor" | "problems" | "questionChoice" | "submission" | "assessments" | "testCases" | "attemptTracker" | "problemLanguage" | "assessmentSubmission"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Professor: {
        payload: Prisma.$ProfessorPayload<ExtArgs>
        fields: Prisma.ProfessorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findFirst: {
            args: Prisma.ProfessorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findMany: {
            args: Prisma.ProfessorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          create: {
            args: Prisma.ProfessorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          createMany: {
            args: Prisma.ProfessorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          delete: {
            args: Prisma.ProfessorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          update: {
            args: Prisma.ProfessorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          upsert: {
            args: Prisma.ProfessorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          aggregate: {
            args: Prisma.ProfessorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessor>
          }
          groupBy: {
            args: Prisma.ProfessorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessorCountAggregateOutputType> | number
          }
        }
      }
      Problems: {
        payload: Prisma.$ProblemsPayload<ExtArgs>
        fields: Prisma.ProblemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>
          }
          findFirst: {
            args: Prisma.ProblemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>
          }
          findMany: {
            args: Prisma.ProblemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>[]
          }
          create: {
            args: Prisma.ProblemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>
          }
          createMany: {
            args: Prisma.ProblemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>[]
          }
          delete: {
            args: Prisma.ProblemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>
          }
          update: {
            args: Prisma.ProblemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>
          }
          deleteMany: {
            args: Prisma.ProblemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>[]
          }
          upsert: {
            args: Prisma.ProblemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemsPayload>
          }
          aggregate: {
            args: Prisma.ProblemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblems>
          }
          groupBy: {
            args: Prisma.ProblemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemsCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemsCountAggregateOutputType> | number
          }
        }
      }
      QuestionChoice: {
        payload: Prisma.$QuestionChoicePayload<ExtArgs>
        fields: Prisma.QuestionChoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionChoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionChoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>
          }
          findFirst: {
            args: Prisma.QuestionChoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionChoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>
          }
          findMany: {
            args: Prisma.QuestionChoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>[]
          }
          create: {
            args: Prisma.QuestionChoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>
          }
          createMany: {
            args: Prisma.QuestionChoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionChoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>[]
          }
          delete: {
            args: Prisma.QuestionChoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>
          }
          update: {
            args: Prisma.QuestionChoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>
          }
          deleteMany: {
            args: Prisma.QuestionChoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionChoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionChoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>[]
          }
          upsert: {
            args: Prisma.QuestionChoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionChoicePayload>
          }
          aggregate: {
            args: Prisma.QuestionChoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionChoice>
          }
          groupBy: {
            args: Prisma.QuestionChoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionChoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionChoiceCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionChoiceCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      Assessments: {
        payload: Prisma.$AssessmentsPayload<ExtArgs>
        fields: Prisma.AssessmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>
          }
          findFirst: {
            args: Prisma.AssessmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>
          }
          findMany: {
            args: Prisma.AssessmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>[]
          }
          create: {
            args: Prisma.AssessmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>
          }
          createMany: {
            args: Prisma.AssessmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssessmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>[]
          }
          delete: {
            args: Prisma.AssessmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>
          }
          update: {
            args: Prisma.AssessmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssessmentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>[]
          }
          upsert: {
            args: Prisma.AssessmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentsPayload>
          }
          aggregate: {
            args: Prisma.AssessmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssessments>
          }
          groupBy: {
            args: Prisma.AssessmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssessmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentsCountArgs<ExtArgs>
            result: $Utils.Optional<AssessmentsCountAggregateOutputType> | number
          }
        }
      }
      TestCases: {
        payload: Prisma.$TestCasesPayload<ExtArgs>
        fields: Prisma.TestCasesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestCasesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestCasesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>
          }
          findFirst: {
            args: Prisma.TestCasesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestCasesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>
          }
          findMany: {
            args: Prisma.TestCasesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>[]
          }
          create: {
            args: Prisma.TestCasesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>
          }
          createMany: {
            args: Prisma.TestCasesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCasesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>[]
          }
          delete: {
            args: Prisma.TestCasesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>
          }
          update: {
            args: Prisma.TestCasesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>
          }
          deleteMany: {
            args: Prisma.TestCasesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestCasesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestCasesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>[]
          }
          upsert: {
            args: Prisma.TestCasesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCasesPayload>
          }
          aggregate: {
            args: Prisma.TestCasesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestCases>
          }
          groupBy: {
            args: Prisma.TestCasesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestCasesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCasesCountArgs<ExtArgs>
            result: $Utils.Optional<TestCasesCountAggregateOutputType> | number
          }
        }
      }
      AttemptTracker: {
        payload: Prisma.$AttemptTrackerPayload<ExtArgs>
        fields: Prisma.AttemptTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttemptTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttemptTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>
          }
          findFirst: {
            args: Prisma.AttemptTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttemptTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>
          }
          findMany: {
            args: Prisma.AttemptTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>[]
          }
          create: {
            args: Prisma.AttemptTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>
          }
          createMany: {
            args: Prisma.AttemptTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttemptTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>[]
          }
          delete: {
            args: Prisma.AttemptTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>
          }
          update: {
            args: Prisma.AttemptTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>
          }
          deleteMany: {
            args: Prisma.AttemptTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttemptTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttemptTrackerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>[]
          }
          upsert: {
            args: Prisma.AttemptTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttemptTrackerPayload>
          }
          aggregate: {
            args: Prisma.AttemptTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttemptTracker>
          }
          groupBy: {
            args: Prisma.AttemptTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttemptTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttemptTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<AttemptTrackerCountAggregateOutputType> | number
          }
        }
      }
      ProblemLanguage: {
        payload: Prisma.$ProblemLanguagePayload<ExtArgs>
        fields: Prisma.ProblemLanguageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemLanguageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemLanguageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>
          }
          findFirst: {
            args: Prisma.ProblemLanguageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemLanguageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>
          }
          findMany: {
            args: Prisma.ProblemLanguageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>[]
          }
          create: {
            args: Prisma.ProblemLanguageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>
          }
          createMany: {
            args: Prisma.ProblemLanguageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemLanguageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>[]
          }
          delete: {
            args: Prisma.ProblemLanguageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>
          }
          update: {
            args: Prisma.ProblemLanguageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>
          }
          deleteMany: {
            args: Prisma.ProblemLanguageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemLanguageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemLanguageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>[]
          }
          upsert: {
            args: Prisma.ProblemLanguageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemLanguagePayload>
          }
          aggregate: {
            args: Prisma.ProblemLanguageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemLanguage>
          }
          groupBy: {
            args: Prisma.ProblemLanguageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemLanguageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemLanguageCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemLanguageCountAggregateOutputType> | number
          }
        }
      }
      AssessmentSubmission: {
        payload: Prisma.$AssessmentSubmissionPayload<ExtArgs>
        fields: Prisma.AssessmentSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>
          }
          findFirst: {
            args: Prisma.AssessmentSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>
          }
          findMany: {
            args: Prisma.AssessmentSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>[]
          }
          create: {
            args: Prisma.AssessmentSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>
          }
          createMany: {
            args: Prisma.AssessmentSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssessmentSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>[]
          }
          delete: {
            args: Prisma.AssessmentSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>
          }
          update: {
            args: Prisma.AssessmentSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssessmentSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.AssessmentSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentSubmissionPayload>
          }
          aggregate: {
            args: Prisma.AssessmentSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssessmentSubmission>
          }
          groupBy: {
            args: Prisma.AssessmentSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssessmentSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<AssessmentSubmissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    student?: StudentOmit
    professor?: ProfessorOmit
    problems?: ProblemsOmit
    questionChoice?: QuestionChoiceOmit
    submission?: SubmissionOmit
    assessments?: AssessmentsOmit
    testCases?: TestCasesOmit
    attemptTracker?: AttemptTrackerOmit
    problemLanguage?: ProblemLanguageOmit
    assessmentSubmission?: AssessmentSubmissionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    submissions: number
    attempts: number
    assessmentSubmissions: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | StudentCountOutputTypeCountSubmissionsArgs
    attempts?: boolean | StudentCountOutputTypeCountAttemptsArgs
    assessmentSubmissions?: boolean | StudentCountOutputTypeCountAssessmentSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttemptTrackerWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAssessmentSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentSubmissionWhereInput
  }


  /**
   * Count Type ProfessorCountOutputType
   */

  export type ProfessorCountOutputType = {
    problems: number
    assessments: number
  }

  export type ProfessorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | ProfessorCountOutputTypeCountProblemsArgs
    assessments?: boolean | ProfessorCountOutputTypeCountAssessmentsArgs
  }

  // Custom InputTypes
  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountProblemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemsWhereInput
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentsWhereInput
  }


  /**
   * Count Type ProblemsCountOutputType
   */

  export type ProblemsCountOutputType = {
    languages: number
    testCases: number
    choices: number
    submissions: number
  }

  export type ProblemsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    languages?: boolean | ProblemsCountOutputTypeCountLanguagesArgs
    testCases?: boolean | ProblemsCountOutputTypeCountTestCasesArgs
    choices?: boolean | ProblemsCountOutputTypeCountChoicesArgs
    submissions?: boolean | ProblemsCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * ProblemsCountOutputType without action
   */
  export type ProblemsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemsCountOutputType
     */
    select?: ProblemsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProblemsCountOutputType without action
   */
  export type ProblemsCountOutputTypeCountLanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemLanguageWhereInput
  }

  /**
   * ProblemsCountOutputType without action
   */
  export type ProblemsCountOutputTypeCountTestCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCasesWhereInput
  }

  /**
   * ProblemsCountOutputType without action
   */
  export type ProblemsCountOutputTypeCountChoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionChoiceWhereInput
  }

  /**
   * ProblemsCountOutputType without action
   */
  export type ProblemsCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }


  /**
   * Count Type AssessmentsCountOutputType
   */

  export type AssessmentsCountOutputType = {
    problems: number
    attempts: number
    submissions: number
  }

  export type AssessmentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | AssessmentsCountOutputTypeCountProblemsArgs
    attempts?: boolean | AssessmentsCountOutputTypeCountAttemptsArgs
    submissions?: boolean | AssessmentsCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * AssessmentsCountOutputType without action
   */
  export type AssessmentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentsCountOutputType
     */
    select?: AssessmentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssessmentsCountOutputType without action
   */
  export type AssessmentsCountOutputTypeCountProblemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemsWhereInput
  }

  /**
   * AssessmentsCountOutputType without action
   */
  export type AssessmentsCountOutputTypeCountAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttemptTrackerWhereInput
  }

  /**
   * AssessmentsCountOutputType without action
   */
  export type AssessmentsCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentSubmissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    semester: number | null
  }

  export type StudentSumAggregateOutputType = {
    semester: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    email: string | null
    name: string | null
    password: string | null
    department: string | null
    PhoneNumber: string | null
    semester: number | null
    batch: string | null
    role: $Enums.Role | null
    isVerified: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    email: string | null
    name: string | null
    password: string | null
    department: string | null
    PhoneNumber: string | null
    semester: number | null
    batch: string | null
    role: $Enums.Role | null
    isVerified: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    studentId: number
    email: number
    name: number
    password: number
    department: number
    PhoneNumber: number
    semester: number
    batch: number
    role: number
    isVerified: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    semester?: true
  }

  export type StudentSumAggregateInputType = {
    semester?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    studentId?: true
    email?: true
    name?: true
    password?: true
    department?: true
    PhoneNumber?: true
    semester?: true
    batch?: true
    role?: true
    isVerified?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    studentId?: true
    email?: true
    name?: true
    password?: true
    department?: true
    PhoneNumber?: true
    semester?: true
    batch?: true
    role?: true
    isVerified?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    studentId?: true
    email?: true
    name?: true
    password?: true
    department?: true
    PhoneNumber?: true
    semester?: true
    batch?: true
    role?: true
    isVerified?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    studentId: string
    email: string | null
    name: string | null
    password: string
    department: string
    PhoneNumber: string | null
    semester: number | null
    batch: string
    role: $Enums.Role
    isVerified: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    PhoneNumber?: boolean
    semester?: boolean
    batch?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submissions?: boolean | Student$submissionsArgs<ExtArgs>
    attempts?: boolean | Student$attemptsArgs<ExtArgs>
    assessmentSubmissions?: boolean | Student$assessmentSubmissionsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    PhoneNumber?: boolean
    semester?: boolean
    batch?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    PhoneNumber?: boolean
    semester?: boolean
    batch?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    studentId?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    PhoneNumber?: boolean
    semester?: boolean
    batch?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "email" | "name" | "password" | "department" | "PhoneNumber" | "semester" | "batch" | "role" | "isVerified" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | Student$submissionsArgs<ExtArgs>
    attempts?: boolean | Student$attemptsArgs<ExtArgs>
    assessmentSubmissions?: boolean | Student$assessmentSubmissionsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      attempts: Prisma.$AttemptTrackerPayload<ExtArgs>[]
      assessmentSubmissions: Prisma.$AssessmentSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      email: string | null
      name: string | null
      password: string
      department: string
      PhoneNumber: string | null
      semester: number | null
      batch: string
      role: $Enums.Role
      isVerified: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submissions<T extends Student$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attempts<T extends Student$attemptsArgs<ExtArgs> = {}>(args?: Subset<T, Student$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assessmentSubmissions<T extends Student$assessmentSubmissionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$assessmentSubmissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly studentId: FieldRef<"Student", 'String'>
    readonly email: FieldRef<"Student", 'String'>
    readonly name: FieldRef<"Student", 'String'>
    readonly password: FieldRef<"Student", 'String'>
    readonly department: FieldRef<"Student", 'String'>
    readonly PhoneNumber: FieldRef<"Student", 'String'>
    readonly semester: FieldRef<"Student", 'Int'>
    readonly batch: FieldRef<"Student", 'String'>
    readonly role: FieldRef<"Student", 'Role'>
    readonly isVerified: FieldRef<"Student", 'Boolean'>
    readonly isActive: FieldRef<"Student", 'Boolean'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updatedAt: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.submissions
   */
  export type Student$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Student.attempts
   */
  export type Student$attemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    where?: AttemptTrackerWhereInput
    orderBy?: AttemptTrackerOrderByWithRelationInput | AttemptTrackerOrderByWithRelationInput[]
    cursor?: AttemptTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttemptTrackerScalarFieldEnum | AttemptTrackerScalarFieldEnum[]
  }

  /**
   * Student.assessmentSubmissions
   */
  export type Student$assessmentSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    where?: AssessmentSubmissionWhereInput
    orderBy?: AssessmentSubmissionOrderByWithRelationInput | AssessmentSubmissionOrderByWithRelationInput[]
    cursor?: AssessmentSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentSubmissionScalarFieldEnum | AssessmentSubmissionScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Professor
   */

  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    department: string | null
    professorId: string | null
    role: $Enums.Role | null
    isVerified: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessorMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    department: string | null
    professorId: string | null
    role: $Enums.Role | null
    isVerified: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessorCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    department: number
    professorId: number
    role: number
    isVerified: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessorMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    department?: true
    professorId?: true
    role?: true
    isVerified?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessorMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    department?: true
    professorId?: true
    role?: true
    isVerified?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessorCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    department?: true
    professorId?: true
    role?: true
    isVerified?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor to aggregate.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type ProfessorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorWhereInput
    orderBy?: ProfessorOrderByWithAggregationInput | ProfessorOrderByWithAggregationInput[]
    by: ProfessorScalarFieldEnum[] | ProfessorScalarFieldEnum
    having?: ProfessorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }

  export type ProfessorGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role: $Enums.Role
    isVerified: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProfessorCountAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    professorId?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problems?: boolean | Professor$problemsArgs<ExtArgs>
    assessments?: boolean | Professor$assessmentsArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    professorId?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    professorId?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    department?: boolean
    professorId?: boolean
    role?: boolean
    isVerified?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "department" | "professorId" | "role" | "isVerified" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["professor"]>
  export type ProfessorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | Professor$problemsArgs<ExtArgs>
    assessments?: boolean | Professor$assessmentsArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfessorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfessorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor"
    objects: {
      problems: Prisma.$ProblemsPayload<ExtArgs>[]
      assessments: Prisma.$AssessmentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      department: string
      professorId: string
      role: $Enums.Role
      isVerified: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["professor"]>
    composites: {}
  }

  type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorDefaultArgs> = $Result.GetResult<Prisma.$ProfessorPayload, S>

  type ProfessorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface ProfessorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor'], meta: { name: 'Professor' } }
    /**
     * Find zero or one Professor that matches the filter.
     * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessorFindUniqueArgs>(args: SelectSubset<T, ProfessorFindUniqueArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Professor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessorFindFirstArgs>(args?: SelectSubset<T, ProfessorFindFirstArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessorFindManyArgs>(args?: SelectSubset<T, ProfessorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Professor.
     * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
     */
    create<T extends ProfessorCreateArgs>(args: SelectSubset<T, ProfessorCreateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professors.
     * @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessorCreateManyArgs>(args?: SelectSubset<T, ProfessorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professors and returns the data saved in the database.
     * @param {ProfessorCreateManyAndReturnArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professors and only return the `id`
     * const professorWithIdOnly = await prisma.professor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessorCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Professor.
     * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
     */
    delete<T extends ProfessorDeleteArgs>(args: SelectSubset<T, ProfessorDeleteArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Professor.
     * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessorUpdateArgs>(args: SelectSubset<T, ProfessorUpdateArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professors.
     * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessorDeleteManyArgs>(args?: SelectSubset<T, ProfessorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessorUpdateManyArgs>(args: SelectSubset<T, ProfessorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors and returns the data updated in the database.
     * @param {ProfessorUpdateManyAndReturnArgs} args - Arguments to update many Professors.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professors and only return the `id`
     * const professorWithIdOnly = await prisma.professor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessorUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Professor.
     * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
     */
    upsert<T extends ProfessorUpsertArgs>(args: SelectSubset<T, ProfessorUpsertArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends ProfessorCountArgs>(
      args?: Subset<T, ProfessorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor model
   */
  readonly fields: ProfessorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problems<T extends Professor$problemsArgs<ExtArgs> = {}>(args?: Subset<T, Professor$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assessments<T extends Professor$assessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Professor$assessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Professor model
   */
  interface ProfessorFieldRefs {
    readonly id: FieldRef<"Professor", 'String'>
    readonly email: FieldRef<"Professor", 'String'>
    readonly name: FieldRef<"Professor", 'String'>
    readonly password: FieldRef<"Professor", 'String'>
    readonly department: FieldRef<"Professor", 'String'>
    readonly professorId: FieldRef<"Professor", 'String'>
    readonly role: FieldRef<"Professor", 'Role'>
    readonly isVerified: FieldRef<"Professor", 'Boolean'>
    readonly isActive: FieldRef<"Professor", 'Boolean'>
    readonly createdAt: FieldRef<"Professor", 'DateTime'>
    readonly updatedAt: FieldRef<"Professor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Professor findUnique
   */
  export type ProfessorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findUniqueOrThrow
   */
  export type ProfessorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findFirst
   */
  export type ProfessorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findFirstOrThrow
   */
  export type ProfessorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor findMany
   */
  export type ProfessorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professors to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * Professor create
   */
  export type ProfessorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor.
     */
    data: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
  }

  /**
   * Professor createMany
   */
  export type ProfessorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Professor createManyAndReturn
   */
  export type ProfessorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Professor update
   */
  export type ProfessorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor.
     */
    data: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
    /**
     * Choose, which Professor to update.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor updateMany
   */
  export type ProfessorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to update.
     */
    limit?: number
  }

  /**
   * Professor updateManyAndReturn
   */
  export type ProfessorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to update.
     */
    limit?: number
  }

  /**
   * Professor upsert
   */
  export type ProfessorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor to update in case it exists.
     */
    where: ProfessorWhereUniqueInput
    /**
     * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
     */
    create: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
    /**
     * In case the Professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
  }

  /**
   * Professor delete
   */
  export type ProfessorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter which Professor to delete.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor deleteMany
   */
  export type ProfessorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professors to delete
     */
    where?: ProfessorWhereInput
    /**
     * Limit how many Professors to delete.
     */
    limit?: number
  }

  /**
   * Professor.problems
   */
  export type Professor$problemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    where?: ProblemsWhereInput
    orderBy?: ProblemsOrderByWithRelationInput | ProblemsOrderByWithRelationInput[]
    cursor?: ProblemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemsScalarFieldEnum | ProblemsScalarFieldEnum[]
  }

  /**
   * Professor.assessments
   */
  export type Professor$assessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    where?: AssessmentsWhereInput
    orderBy?: AssessmentsOrderByWithRelationInput | AssessmentsOrderByWithRelationInput[]
    cursor?: AssessmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentsScalarFieldEnum | AssessmentsScalarFieldEnum[]
  }

  /**
   * Professor without action
   */
  export type ProfessorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Professor
     */
    omit?: ProfessorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessorInclude<ExtArgs> | null
  }


  /**
   * Model Problems
   */

  export type AggregateProblems = {
    _count: ProblemsCountAggregateOutputType | null
    _avg: ProblemsAvgAggregateOutputType | null
    _sum: ProblemsSumAggregateOutputType | null
    _min: ProblemsMinAggregateOutputType | null
    _max: ProblemsMaxAggregateOutputType | null
  }

  export type ProblemsAvgAggregateOutputType = {
    score: number | null
  }

  export type ProblemsSumAggregateOutputType = {
    score: number | null
  }

  export type ProblemsMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    difficulty: $Enums.DifficultyLevel | null
    score: number | null
    questionType: $Enums.QuestionType | null
    assessmentId: string | null
    professorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    difficulty: $Enums.DifficultyLevel | null
    score: number | null
    questionType: $Enums.QuestionType | null
    assessmentId: string | null
    professorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    difficulty: number
    score: number
    questionType: number
    assessmentId: number
    professorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemsAvgAggregateInputType = {
    score?: true
  }

  export type ProblemsSumAggregateInputType = {
    score?: true
  }

  export type ProblemsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    difficulty?: true
    score?: true
    questionType?: true
    assessmentId?: true
    professorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    difficulty?: true
    score?: true
    questionType?: true
    assessmentId?: true
    professorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    difficulty?: true
    score?: true
    questionType?: true
    assessmentId?: true
    professorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problems to aggregate.
     */
    where?: ProblemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemsOrderByWithRelationInput | ProblemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Problems
    **/
    _count?: true | ProblemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProblemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProblemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemsMaxAggregateInputType
  }

  export type GetProblemsAggregateType<T extends ProblemsAggregateArgs> = {
        [P in keyof T & keyof AggregateProblems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblems[P]>
      : GetScalarType<T[P], AggregateProblems[P]>
  }




  export type ProblemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemsWhereInput
    orderBy?: ProblemsOrderByWithAggregationInput | ProblemsOrderByWithAggregationInput[]
    by: ProblemsScalarFieldEnum[] | ProblemsScalarFieldEnum
    having?: ProblemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemsCountAggregateInputType | true
    _avg?: ProblemsAvgAggregateInputType
    _sum?: ProblemsSumAggregateInputType
    _min?: ProblemsMinAggregateInputType
    _max?: ProblemsMaxAggregateInputType
  }

  export type ProblemsGroupByOutputType = {
    id: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType: $Enums.QuestionType
    assessmentId: string
    professorId: string
    createdAt: Date
    updatedAt: Date
    _count: ProblemsCountAggregateOutputType | null
    _avg: ProblemsAvgAggregateOutputType | null
    _sum: ProblemsSumAggregateOutputType | null
    _min: ProblemsMinAggregateOutputType | null
    _max: ProblemsMaxAggregateOutputType | null
  }

  type GetProblemsGroupByPayload<T extends ProblemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemsGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemsGroupByOutputType[P]>
        }
      >
    >


  export type ProblemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    score?: boolean
    questionType?: boolean
    assessmentId?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    languages?: boolean | Problems$languagesArgs<ExtArgs>
    testCases?: boolean | Problems$testCasesArgs<ExtArgs>
    choices?: boolean | Problems$choicesArgs<ExtArgs>
    submissions?: boolean | Problems$submissionsArgs<ExtArgs>
    _count?: boolean | ProblemsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problems"]>

  export type ProblemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    score?: boolean
    questionType?: boolean
    assessmentId?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problems"]>

  export type ProblemsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    score?: boolean
    questionType?: boolean
    assessmentId?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problems"]>

  export type ProblemsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    score?: boolean
    questionType?: boolean
    assessmentId?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "difficulty" | "score" | "questionType" | "assessmentId" | "professorId" | "createdAt" | "updatedAt", ExtArgs["result"]["problems"]>
  export type ProblemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    languages?: boolean | Problems$languagesArgs<ExtArgs>
    testCases?: boolean | Problems$testCasesArgs<ExtArgs>
    choices?: boolean | Problems$choicesArgs<ExtArgs>
    submissions?: boolean | Problems$submissionsArgs<ExtArgs>
    _count?: boolean | ProblemsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProblemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }
  export type ProblemsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }

  export type $ProblemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Problems"
    objects: {
      assessment: Prisma.$AssessmentsPayload<ExtArgs>
      professor: Prisma.$ProfessorPayload<ExtArgs>
      languages: Prisma.$ProblemLanguagePayload<ExtArgs>[]
      testCases: Prisma.$TestCasesPayload<ExtArgs>[]
      choices: Prisma.$QuestionChoicePayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      difficulty: $Enums.DifficultyLevel
      score: number
      questionType: $Enums.QuestionType
      assessmentId: string
      professorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problems"]>
    composites: {}
  }

  type ProblemsGetPayload<S extends boolean | null | undefined | ProblemsDefaultArgs> = $Result.GetResult<Prisma.$ProblemsPayload, S>

  type ProblemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemsCountAggregateInputType | true
    }

  export interface ProblemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Problems'], meta: { name: 'Problems' } }
    /**
     * Find zero or one Problems that matches the filter.
     * @param {ProblemsFindUniqueArgs} args - Arguments to find a Problems
     * @example
     * // Get one Problems
     * const problems = await prisma.problems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemsFindUniqueArgs>(args: SelectSubset<T, ProblemsFindUniqueArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Problems that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemsFindUniqueOrThrowArgs} args - Arguments to find a Problems
     * @example
     * // Get one Problems
     * const problems = await prisma.problems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemsFindFirstArgs} args - Arguments to find a Problems
     * @example
     * // Get one Problems
     * const problems = await prisma.problems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemsFindFirstArgs>(args?: SelectSubset<T, ProblemsFindFirstArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemsFindFirstOrThrowArgs} args - Arguments to find a Problems
     * @example
     * // Get one Problems
     * const problems = await prisma.problems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Problems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Problems
     * const problems = await prisma.problems.findMany()
     * 
     * // Get first 10 Problems
     * const problems = await prisma.problems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemsWithIdOnly = await prisma.problems.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemsFindManyArgs>(args?: SelectSubset<T, ProblemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Problems.
     * @param {ProblemsCreateArgs} args - Arguments to create a Problems.
     * @example
     * // Create one Problems
     * const Problems = await prisma.problems.create({
     *   data: {
     *     // ... data to create a Problems
     *   }
     * })
     * 
     */
    create<T extends ProblemsCreateArgs>(args: SelectSubset<T, ProblemsCreateArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Problems.
     * @param {ProblemsCreateManyArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problems = await prisma.problems.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemsCreateManyArgs>(args?: SelectSubset<T, ProblemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Problems and returns the data saved in the database.
     * @param {ProblemsCreateManyAndReturnArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problems = await prisma.problems.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Problems and only return the `id`
     * const problemsWithIdOnly = await prisma.problems.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemsCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Problems.
     * @param {ProblemsDeleteArgs} args - Arguments to delete one Problems.
     * @example
     * // Delete one Problems
     * const Problems = await prisma.problems.delete({
     *   where: {
     *     // ... filter to delete one Problems
     *   }
     * })
     * 
     */
    delete<T extends ProblemsDeleteArgs>(args: SelectSubset<T, ProblemsDeleteArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Problems.
     * @param {ProblemsUpdateArgs} args - Arguments to update one Problems.
     * @example
     * // Update one Problems
     * const problems = await prisma.problems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemsUpdateArgs>(args: SelectSubset<T, ProblemsUpdateArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Problems.
     * @param {ProblemsDeleteManyArgs} args - Arguments to filter Problems to delete.
     * @example
     * // Delete a few Problems
     * const { count } = await prisma.problems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemsDeleteManyArgs>(args?: SelectSubset<T, ProblemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Problems
     * const problems = await prisma.problems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemsUpdateManyArgs>(args: SelectSubset<T, ProblemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems and returns the data updated in the database.
     * @param {ProblemsUpdateManyAndReturnArgs} args - Arguments to update many Problems.
     * @example
     * // Update many Problems
     * const problems = await prisma.problems.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Problems and only return the `id`
     * const problemsWithIdOnly = await prisma.problems.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemsUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Problems.
     * @param {ProblemsUpsertArgs} args - Arguments to update or create a Problems.
     * @example
     * // Update or create a Problems
     * const problems = await prisma.problems.upsert({
     *   create: {
     *     // ... data to create a Problems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Problems we want to update
     *   }
     * })
     */
    upsert<T extends ProblemsUpsertArgs>(args: SelectSubset<T, ProblemsUpsertArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemsCountArgs} args - Arguments to filter Problems to count.
     * @example
     * // Count the number of Problems
     * const count = await prisma.problems.count({
     *   where: {
     *     // ... the filter for the Problems we want to count
     *   }
     * })
    **/
    count<T extends ProblemsCountArgs>(
      args?: Subset<T, ProblemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemsAggregateArgs>(args: Subset<T, ProblemsAggregateArgs>): Prisma.PrismaPromise<GetProblemsAggregateType<T>>

    /**
     * Group by Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemsGroupByArgs['orderBy'] }
        : { orderBy?: ProblemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Problems model
   */
  readonly fields: ProblemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Problems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assessment<T extends AssessmentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentsDefaultArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    languages<T extends Problems$languagesArgs<ExtArgs> = {}>(args?: Subset<T, Problems$languagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testCases<T extends Problems$testCasesArgs<ExtArgs> = {}>(args?: Subset<T, Problems$testCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    choices<T extends Problems$choicesArgs<ExtArgs> = {}>(args?: Subset<T, Problems$choicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends Problems$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Problems$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Problems model
   */
  interface ProblemsFieldRefs {
    readonly id: FieldRef<"Problems", 'String'>
    readonly title: FieldRef<"Problems", 'String'>
    readonly description: FieldRef<"Problems", 'String'>
    readonly difficulty: FieldRef<"Problems", 'DifficultyLevel'>
    readonly score: FieldRef<"Problems", 'Int'>
    readonly questionType: FieldRef<"Problems", 'QuestionType'>
    readonly assessmentId: FieldRef<"Problems", 'String'>
    readonly professorId: FieldRef<"Problems", 'String'>
    readonly createdAt: FieldRef<"Problems", 'DateTime'>
    readonly updatedAt: FieldRef<"Problems", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Problems findUnique
   */
  export type ProblemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where: ProblemsWhereUniqueInput
  }

  /**
   * Problems findUniqueOrThrow
   */
  export type ProblemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where: ProblemsWhereUniqueInput
  }

  /**
   * Problems findFirst
   */
  export type ProblemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where?: ProblemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemsOrderByWithRelationInput | ProblemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemsScalarFieldEnum | ProblemsScalarFieldEnum[]
  }

  /**
   * Problems findFirstOrThrow
   */
  export type ProblemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where?: ProblemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemsOrderByWithRelationInput | ProblemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemsScalarFieldEnum | ProblemsScalarFieldEnum[]
  }

  /**
   * Problems findMany
   */
  export type ProblemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where?: ProblemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemsOrderByWithRelationInput | ProblemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Problems.
     */
    cursor?: ProblemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    distinct?: ProblemsScalarFieldEnum | ProblemsScalarFieldEnum[]
  }

  /**
   * Problems create
   */
  export type ProblemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * The data needed to create a Problems.
     */
    data: XOR<ProblemsCreateInput, ProblemsUncheckedCreateInput>
  }

  /**
   * Problems createMany
   */
  export type ProblemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Problems.
     */
    data: ProblemsCreateManyInput | ProblemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Problems createManyAndReturn
   */
  export type ProblemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * The data used to create many Problems.
     */
    data: ProblemsCreateManyInput | ProblemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Problems update
   */
  export type ProblemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * The data needed to update a Problems.
     */
    data: XOR<ProblemsUpdateInput, ProblemsUncheckedUpdateInput>
    /**
     * Choose, which Problems to update.
     */
    where: ProblemsWhereUniqueInput
  }

  /**
   * Problems updateMany
   */
  export type ProblemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemsUpdateManyMutationInput, ProblemsUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemsWhereInput
    /**
     * Limit how many Problems to update.
     */
    limit?: number
  }

  /**
   * Problems updateManyAndReturn
   */
  export type ProblemsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemsUpdateManyMutationInput, ProblemsUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemsWhereInput
    /**
     * Limit how many Problems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Problems upsert
   */
  export type ProblemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * The filter to search for the Problems to update in case it exists.
     */
    where: ProblemsWhereUniqueInput
    /**
     * In case the Problems found by the `where` argument doesn't exist, create a new Problems with this data.
     */
    create: XOR<ProblemsCreateInput, ProblemsUncheckedCreateInput>
    /**
     * In case the Problems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemsUpdateInput, ProblemsUncheckedUpdateInput>
  }

  /**
   * Problems delete
   */
  export type ProblemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    /**
     * Filter which Problems to delete.
     */
    where: ProblemsWhereUniqueInput
  }

  /**
   * Problems deleteMany
   */
  export type ProblemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problems to delete
     */
    where?: ProblemsWhereInput
    /**
     * Limit how many Problems to delete.
     */
    limit?: number
  }

  /**
   * Problems.languages
   */
  export type Problems$languagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    where?: ProblemLanguageWhereInput
    orderBy?: ProblemLanguageOrderByWithRelationInput | ProblemLanguageOrderByWithRelationInput[]
    cursor?: ProblemLanguageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemLanguageScalarFieldEnum | ProblemLanguageScalarFieldEnum[]
  }

  /**
   * Problems.testCases
   */
  export type Problems$testCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    where?: TestCasesWhereInput
    orderBy?: TestCasesOrderByWithRelationInput | TestCasesOrderByWithRelationInput[]
    cursor?: TestCasesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestCasesScalarFieldEnum | TestCasesScalarFieldEnum[]
  }

  /**
   * Problems.choices
   */
  export type Problems$choicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    where?: QuestionChoiceWhereInput
    orderBy?: QuestionChoiceOrderByWithRelationInput | QuestionChoiceOrderByWithRelationInput[]
    cursor?: QuestionChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionChoiceScalarFieldEnum | QuestionChoiceScalarFieldEnum[]
  }

  /**
   * Problems.submissions
   */
  export type Problems$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Problems without action
   */
  export type ProblemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
  }


  /**
   * Model QuestionChoice
   */

  export type AggregateQuestionChoice = {
    _count: QuestionChoiceCountAggregateOutputType | null
    _min: QuestionChoiceMinAggregateOutputType | null
    _max: QuestionChoiceMaxAggregateOutputType | null
  }

  export type QuestionChoiceMinAggregateOutputType = {
    id: string | null
    text: string | null
    isCorrect: boolean | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionChoiceMaxAggregateOutputType = {
    id: string | null
    text: string | null
    isCorrect: boolean | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionChoiceCountAggregateOutputType = {
    id: number
    text: number
    isCorrect: number
    problemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionChoiceMinAggregateInputType = {
    id?: true
    text?: true
    isCorrect?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionChoiceMaxAggregateInputType = {
    id?: true
    text?: true
    isCorrect?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionChoiceCountAggregateInputType = {
    id?: true
    text?: true
    isCorrect?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionChoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionChoice to aggregate.
     */
    where?: QuestionChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionChoices to fetch.
     */
    orderBy?: QuestionChoiceOrderByWithRelationInput | QuestionChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionChoices
    **/
    _count?: true | QuestionChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionChoiceMaxAggregateInputType
  }

  export type GetQuestionChoiceAggregateType<T extends QuestionChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionChoice[P]>
      : GetScalarType<T[P], AggregateQuestionChoice[P]>
  }




  export type QuestionChoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionChoiceWhereInput
    orderBy?: QuestionChoiceOrderByWithAggregationInput | QuestionChoiceOrderByWithAggregationInput[]
    by: QuestionChoiceScalarFieldEnum[] | QuestionChoiceScalarFieldEnum
    having?: QuestionChoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionChoiceCountAggregateInputType | true
    _min?: QuestionChoiceMinAggregateInputType
    _max?: QuestionChoiceMaxAggregateInputType
  }

  export type QuestionChoiceGroupByOutputType = {
    id: string
    text: string
    isCorrect: boolean
    problemId: string
    createdAt: Date
    updatedAt: Date
    _count: QuestionChoiceCountAggregateOutputType | null
    _min: QuestionChoiceMinAggregateOutputType | null
    _max: QuestionChoiceMaxAggregateOutputType | null
  }

  type GetQuestionChoiceGroupByPayload<T extends QuestionChoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionChoiceGroupByOutputType[P]>
        }
      >
    >


  export type QuestionChoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    isCorrect?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionChoice"]>

  export type QuestionChoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    isCorrect?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionChoice"]>

  export type QuestionChoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    isCorrect?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionChoice"]>

  export type QuestionChoiceSelectScalar = {
    id?: boolean
    text?: boolean
    isCorrect?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionChoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "isCorrect" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["questionChoice"]>
  export type QuestionChoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type QuestionChoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type QuestionChoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }

  export type $QuestionChoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionChoice"
    objects: {
      problem: Prisma.$ProblemsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      isCorrect: boolean
      problemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["questionChoice"]>
    composites: {}
  }

  type QuestionChoiceGetPayload<S extends boolean | null | undefined | QuestionChoiceDefaultArgs> = $Result.GetResult<Prisma.$QuestionChoicePayload, S>

  type QuestionChoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionChoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionChoiceCountAggregateInputType | true
    }

  export interface QuestionChoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionChoice'], meta: { name: 'QuestionChoice' } }
    /**
     * Find zero or one QuestionChoice that matches the filter.
     * @param {QuestionChoiceFindUniqueArgs} args - Arguments to find a QuestionChoice
     * @example
     * // Get one QuestionChoice
     * const questionChoice = await prisma.questionChoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionChoiceFindUniqueArgs>(args: SelectSubset<T, QuestionChoiceFindUniqueArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionChoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionChoiceFindUniqueOrThrowArgs} args - Arguments to find a QuestionChoice
     * @example
     * // Get one QuestionChoice
     * const questionChoice = await prisma.questionChoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionChoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionChoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionChoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionChoiceFindFirstArgs} args - Arguments to find a QuestionChoice
     * @example
     * // Get one QuestionChoice
     * const questionChoice = await prisma.questionChoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionChoiceFindFirstArgs>(args?: SelectSubset<T, QuestionChoiceFindFirstArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionChoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionChoiceFindFirstOrThrowArgs} args - Arguments to find a QuestionChoice
     * @example
     * // Get one QuestionChoice
     * const questionChoice = await prisma.questionChoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionChoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionChoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionChoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionChoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionChoices
     * const questionChoices = await prisma.questionChoice.findMany()
     * 
     * // Get first 10 QuestionChoices
     * const questionChoices = await prisma.questionChoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionChoiceWithIdOnly = await prisma.questionChoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionChoiceFindManyArgs>(args?: SelectSubset<T, QuestionChoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionChoice.
     * @param {QuestionChoiceCreateArgs} args - Arguments to create a QuestionChoice.
     * @example
     * // Create one QuestionChoice
     * const QuestionChoice = await prisma.questionChoice.create({
     *   data: {
     *     // ... data to create a QuestionChoice
     *   }
     * })
     * 
     */
    create<T extends QuestionChoiceCreateArgs>(args: SelectSubset<T, QuestionChoiceCreateArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionChoices.
     * @param {QuestionChoiceCreateManyArgs} args - Arguments to create many QuestionChoices.
     * @example
     * // Create many QuestionChoices
     * const questionChoice = await prisma.questionChoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionChoiceCreateManyArgs>(args?: SelectSubset<T, QuestionChoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionChoices and returns the data saved in the database.
     * @param {QuestionChoiceCreateManyAndReturnArgs} args - Arguments to create many QuestionChoices.
     * @example
     * // Create many QuestionChoices
     * const questionChoice = await prisma.questionChoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionChoices and only return the `id`
     * const questionChoiceWithIdOnly = await prisma.questionChoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionChoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionChoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionChoice.
     * @param {QuestionChoiceDeleteArgs} args - Arguments to delete one QuestionChoice.
     * @example
     * // Delete one QuestionChoice
     * const QuestionChoice = await prisma.questionChoice.delete({
     *   where: {
     *     // ... filter to delete one QuestionChoice
     *   }
     * })
     * 
     */
    delete<T extends QuestionChoiceDeleteArgs>(args: SelectSubset<T, QuestionChoiceDeleteArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionChoice.
     * @param {QuestionChoiceUpdateArgs} args - Arguments to update one QuestionChoice.
     * @example
     * // Update one QuestionChoice
     * const questionChoice = await prisma.questionChoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionChoiceUpdateArgs>(args: SelectSubset<T, QuestionChoiceUpdateArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionChoices.
     * @param {QuestionChoiceDeleteManyArgs} args - Arguments to filter QuestionChoices to delete.
     * @example
     * // Delete a few QuestionChoices
     * const { count } = await prisma.questionChoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionChoiceDeleteManyArgs>(args?: SelectSubset<T, QuestionChoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionChoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionChoices
     * const questionChoice = await prisma.questionChoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionChoiceUpdateManyArgs>(args: SelectSubset<T, QuestionChoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionChoices and returns the data updated in the database.
     * @param {QuestionChoiceUpdateManyAndReturnArgs} args - Arguments to update many QuestionChoices.
     * @example
     * // Update many QuestionChoices
     * const questionChoice = await prisma.questionChoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionChoices and only return the `id`
     * const questionChoiceWithIdOnly = await prisma.questionChoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionChoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionChoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionChoice.
     * @param {QuestionChoiceUpsertArgs} args - Arguments to update or create a QuestionChoice.
     * @example
     * // Update or create a QuestionChoice
     * const questionChoice = await prisma.questionChoice.upsert({
     *   create: {
     *     // ... data to create a QuestionChoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionChoice we want to update
     *   }
     * })
     */
    upsert<T extends QuestionChoiceUpsertArgs>(args: SelectSubset<T, QuestionChoiceUpsertArgs<ExtArgs>>): Prisma__QuestionChoiceClient<$Result.GetResult<Prisma.$QuestionChoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionChoiceCountArgs} args - Arguments to filter QuestionChoices to count.
     * @example
     * // Count the number of QuestionChoices
     * const count = await prisma.questionChoice.count({
     *   where: {
     *     // ... the filter for the QuestionChoices we want to count
     *   }
     * })
    **/
    count<T extends QuestionChoiceCountArgs>(
      args?: Subset<T, QuestionChoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionChoiceAggregateArgs>(args: Subset<T, QuestionChoiceAggregateArgs>): Prisma.PrismaPromise<GetQuestionChoiceAggregateType<T>>

    /**
     * Group by QuestionChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionChoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionChoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionChoiceGroupByArgs['orderBy'] }
        : { orderBy?: QuestionChoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionChoice model
   */
  readonly fields: QuestionChoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionChoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionChoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends ProblemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemsDefaultArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionChoice model
   */
  interface QuestionChoiceFieldRefs {
    readonly id: FieldRef<"QuestionChoice", 'String'>
    readonly text: FieldRef<"QuestionChoice", 'String'>
    readonly isCorrect: FieldRef<"QuestionChoice", 'Boolean'>
    readonly problemId: FieldRef<"QuestionChoice", 'String'>
    readonly createdAt: FieldRef<"QuestionChoice", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionChoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionChoice findUnique
   */
  export type QuestionChoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * Filter, which QuestionChoice to fetch.
     */
    where: QuestionChoiceWhereUniqueInput
  }

  /**
   * QuestionChoice findUniqueOrThrow
   */
  export type QuestionChoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * Filter, which QuestionChoice to fetch.
     */
    where: QuestionChoiceWhereUniqueInput
  }

  /**
   * QuestionChoice findFirst
   */
  export type QuestionChoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * Filter, which QuestionChoice to fetch.
     */
    where?: QuestionChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionChoices to fetch.
     */
    orderBy?: QuestionChoiceOrderByWithRelationInput | QuestionChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionChoices.
     */
    cursor?: QuestionChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionChoices.
     */
    distinct?: QuestionChoiceScalarFieldEnum | QuestionChoiceScalarFieldEnum[]
  }

  /**
   * QuestionChoice findFirstOrThrow
   */
  export type QuestionChoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * Filter, which QuestionChoice to fetch.
     */
    where?: QuestionChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionChoices to fetch.
     */
    orderBy?: QuestionChoiceOrderByWithRelationInput | QuestionChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionChoices.
     */
    cursor?: QuestionChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionChoices.
     */
    distinct?: QuestionChoiceScalarFieldEnum | QuestionChoiceScalarFieldEnum[]
  }

  /**
   * QuestionChoice findMany
   */
  export type QuestionChoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * Filter, which QuestionChoices to fetch.
     */
    where?: QuestionChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionChoices to fetch.
     */
    orderBy?: QuestionChoiceOrderByWithRelationInput | QuestionChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionChoices.
     */
    cursor?: QuestionChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionChoices.
     */
    skip?: number
    distinct?: QuestionChoiceScalarFieldEnum | QuestionChoiceScalarFieldEnum[]
  }

  /**
   * QuestionChoice create
   */
  export type QuestionChoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionChoice.
     */
    data: XOR<QuestionChoiceCreateInput, QuestionChoiceUncheckedCreateInput>
  }

  /**
   * QuestionChoice createMany
   */
  export type QuestionChoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionChoices.
     */
    data: QuestionChoiceCreateManyInput | QuestionChoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionChoice createManyAndReturn
   */
  export type QuestionChoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionChoices.
     */
    data: QuestionChoiceCreateManyInput | QuestionChoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionChoice update
   */
  export type QuestionChoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionChoice.
     */
    data: XOR<QuestionChoiceUpdateInput, QuestionChoiceUncheckedUpdateInput>
    /**
     * Choose, which QuestionChoice to update.
     */
    where: QuestionChoiceWhereUniqueInput
  }

  /**
   * QuestionChoice updateMany
   */
  export type QuestionChoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionChoices.
     */
    data: XOR<QuestionChoiceUpdateManyMutationInput, QuestionChoiceUncheckedUpdateManyInput>
    /**
     * Filter which QuestionChoices to update
     */
    where?: QuestionChoiceWhereInput
    /**
     * Limit how many QuestionChoices to update.
     */
    limit?: number
  }

  /**
   * QuestionChoice updateManyAndReturn
   */
  export type QuestionChoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * The data used to update QuestionChoices.
     */
    data: XOR<QuestionChoiceUpdateManyMutationInput, QuestionChoiceUncheckedUpdateManyInput>
    /**
     * Filter which QuestionChoices to update
     */
    where?: QuestionChoiceWhereInput
    /**
     * Limit how many QuestionChoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionChoice upsert
   */
  export type QuestionChoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionChoice to update in case it exists.
     */
    where: QuestionChoiceWhereUniqueInput
    /**
     * In case the QuestionChoice found by the `where` argument doesn't exist, create a new QuestionChoice with this data.
     */
    create: XOR<QuestionChoiceCreateInput, QuestionChoiceUncheckedCreateInput>
    /**
     * In case the QuestionChoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionChoiceUpdateInput, QuestionChoiceUncheckedUpdateInput>
  }

  /**
   * QuestionChoice delete
   */
  export type QuestionChoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
    /**
     * Filter which QuestionChoice to delete.
     */
    where: QuestionChoiceWhereUniqueInput
  }

  /**
   * QuestionChoice deleteMany
   */
  export type QuestionChoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionChoices to delete
     */
    where?: QuestionChoiceWhereInput
    /**
     * Limit how many QuestionChoices to delete.
     */
    limit?: number
  }

  /**
   * QuestionChoice without action
   */
  export type QuestionChoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionChoice
     */
    select?: QuestionChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionChoice
     */
    omit?: QuestionChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionChoiceInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionAvgAggregateOutputType = {
    score: number | null
    questionNumber: number | null
    executionTime: number | null
    memoryUsed: number | null
  }

  export type SubmissionSumAggregateOutputType = {
    score: number | null
    questionNumber: number | null
    executionTime: number | null
    memoryUsed: number | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    code: string | null
    language: string | null
    selectedChoiceId: string | null
    status: $Enums.Status | null
    score: number | null
    studentId: string | null
    problemId: string | null
    isSubmitted: boolean | null
    isCorrect: boolean | null
    questionNumber: number | null
    questionPreview: string | null
    executionTime: number | null
    memoryUsed: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    code: string | null
    language: string | null
    selectedChoiceId: string | null
    status: $Enums.Status | null
    score: number | null
    studentId: string | null
    problemId: string | null
    isSubmitted: boolean | null
    isCorrect: boolean | null
    questionNumber: number | null
    questionPreview: string | null
    executionTime: number | null
    memoryUsed: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    code: number
    language: number
    selectedChoiceId: number
    status: number
    score: number
    studentId: number
    problemId: number
    isSubmitted: number
    isCorrect: number
    questionNumber: number
    questionPreview: number
    executionTime: number
    memoryUsed: number
    errorMessage: number
    testResults: number
    createdAt: number
    _all: number
  }


  export type SubmissionAvgAggregateInputType = {
    score?: true
    questionNumber?: true
    executionTime?: true
    memoryUsed?: true
  }

  export type SubmissionSumAggregateInputType = {
    score?: true
    questionNumber?: true
    executionTime?: true
    memoryUsed?: true
  }

  export type SubmissionMinAggregateInputType = {
    id?: true
    code?: true
    language?: true
    selectedChoiceId?: true
    status?: true
    score?: true
    studentId?: true
    problemId?: true
    isSubmitted?: true
    isCorrect?: true
    questionNumber?: true
    questionPreview?: true
    executionTime?: true
    memoryUsed?: true
    errorMessage?: true
    createdAt?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    code?: true
    language?: true
    selectedChoiceId?: true
    status?: true
    score?: true
    studentId?: true
    problemId?: true
    isSubmitted?: true
    isCorrect?: true
    questionNumber?: true
    questionPreview?: true
    executionTime?: true
    memoryUsed?: true
    errorMessage?: true
    createdAt?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    code?: true
    language?: true
    selectedChoiceId?: true
    status?: true
    score?: true
    studentId?: true
    problemId?: true
    isSubmitted?: true
    isCorrect?: true
    questionNumber?: true
    questionPreview?: true
    executionTime?: true
    memoryUsed?: true
    errorMessage?: true
    testResults?: true
    createdAt?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _avg?: SubmissionAvgAggregateInputType
    _sum?: SubmissionSumAggregateInputType
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    code: string | null
    language: string | null
    selectedChoiceId: string | null
    status: $Enums.Status
    score: number
    studentId: string
    problemId: string
    isSubmitted: boolean
    isCorrect: boolean | null
    questionNumber: number | null
    questionPreview: string | null
    executionTime: number | null
    memoryUsed: number | null
    errorMessage: string | null
    testResults: JsonValue | null
    createdAt: Date
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    language?: boolean
    selectedChoiceId?: boolean
    status?: boolean
    score?: boolean
    studentId?: boolean
    problemId?: boolean
    isSubmitted?: boolean
    isCorrect?: boolean
    questionNumber?: boolean
    questionPreview?: boolean
    executionTime?: boolean
    memoryUsed?: boolean
    errorMessage?: boolean
    testResults?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    language?: boolean
    selectedChoiceId?: boolean
    status?: boolean
    score?: boolean
    studentId?: boolean
    problemId?: boolean
    isSubmitted?: boolean
    isCorrect?: boolean
    questionNumber?: boolean
    questionPreview?: boolean
    executionTime?: boolean
    memoryUsed?: boolean
    errorMessage?: boolean
    testResults?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    language?: boolean
    selectedChoiceId?: boolean
    status?: boolean
    score?: boolean
    studentId?: boolean
    problemId?: boolean
    isSubmitted?: boolean
    isCorrect?: boolean
    questionNumber?: boolean
    questionPreview?: boolean
    executionTime?: boolean
    memoryUsed?: boolean
    errorMessage?: boolean
    testResults?: boolean
    createdAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    code?: boolean
    language?: boolean
    selectedChoiceId?: boolean
    status?: boolean
    score?: boolean
    studentId?: boolean
    problemId?: boolean
    isSubmitted?: boolean
    isCorrect?: boolean
    questionNumber?: boolean
    questionPreview?: boolean
    executionTime?: boolean
    memoryUsed?: boolean
    errorMessage?: boolean
    testResults?: boolean
    createdAt?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "language" | "selectedChoiceId" | "status" | "score" | "studentId" | "problemId" | "isSubmitted" | "isCorrect" | "questionNumber" | "questionPreview" | "executionTime" | "memoryUsed" | "errorMessage" | "testResults" | "createdAt", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      problem: Prisma.$ProblemsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string | null
      language: string | null
      selectedChoiceId: string | null
      status: $Enums.Status
      score: number
      studentId: string
      problemId: string
      isSubmitted: boolean
      isCorrect: boolean | null
      questionNumber: number | null
      questionPreview: string | null
      executionTime: number | null
      memoryUsed: number | null
      errorMessage: string | null
      testResults: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    problem<T extends ProblemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemsDefaultArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly code: FieldRef<"Submission", 'String'>
    readonly language: FieldRef<"Submission", 'String'>
    readonly selectedChoiceId: FieldRef<"Submission", 'String'>
    readonly status: FieldRef<"Submission", 'Status'>
    readonly score: FieldRef<"Submission", 'Int'>
    readonly studentId: FieldRef<"Submission", 'String'>
    readonly problemId: FieldRef<"Submission", 'String'>
    readonly isSubmitted: FieldRef<"Submission", 'Boolean'>
    readonly isCorrect: FieldRef<"Submission", 'Boolean'>
    readonly questionNumber: FieldRef<"Submission", 'Int'>
    readonly questionPreview: FieldRef<"Submission", 'String'>
    readonly executionTime: FieldRef<"Submission", 'Int'>
    readonly memoryUsed: FieldRef<"Submission", 'Int'>
    readonly errorMessage: FieldRef<"Submission", 'String'>
    readonly testResults: FieldRef<"Submission", 'Json'>
    readonly createdAt: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model Assessments
   */

  export type AggregateAssessments = {
    _count: AssessmentsCountAggregateOutputType | null
    _avg: AssessmentsAvgAggregateOutputType | null
    _sum: AssessmentsSumAggregateOutputType | null
    _min: AssessmentsMinAggregateOutputType | null
    _max: AssessmentsMaxAggregateOutputType | null
  }

  export type AssessmentsAvgAggregateOutputType = {
    duration: number | null
    totalQuestions: number | null
  }

  export type AssessmentsSumAggregateOutputType = {
    duration: number | null
    totalQuestions: number | null
  }

  export type AssessmentsMinAggregateOutputType = {
    id: string | null
    title: string | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    totalQuestions: number | null
    status: $Enums.AssessmentStatus | null
    professorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    totalQuestions: number | null
    status: $Enums.AssessmentStatus | null
    professorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentsCountAggregateOutputType = {
    id: number
    title: number
    batch: number
    departments: number
    startTime: number
    endTime: number
    duration: number
    totalQuestions: number
    topics: number
    status: number
    professorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssessmentsAvgAggregateInputType = {
    duration?: true
    totalQuestions?: true
  }

  export type AssessmentsSumAggregateInputType = {
    duration?: true
    totalQuestions?: true
  }

  export type AssessmentsMinAggregateInputType = {
    id?: true
    title?: true
    startTime?: true
    endTime?: true
    duration?: true
    totalQuestions?: true
    status?: true
    professorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentsMaxAggregateInputType = {
    id?: true
    title?: true
    startTime?: true
    endTime?: true
    duration?: true
    totalQuestions?: true
    status?: true
    professorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentsCountAggregateInputType = {
    id?: true
    title?: true
    batch?: true
    departments?: true
    startTime?: true
    endTime?: true
    duration?: true
    totalQuestions?: true
    topics?: true
    status?: true
    professorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssessmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessments to aggregate.
     */
    where?: AssessmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentsOrderByWithRelationInput | AssessmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assessments
    **/
    _count?: true | AssessmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentsMaxAggregateInputType
  }

  export type GetAssessmentsAggregateType<T extends AssessmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessments[P]>
      : GetScalarType<T[P], AggregateAssessments[P]>
  }




  export type AssessmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentsWhereInput
    orderBy?: AssessmentsOrderByWithAggregationInput | AssessmentsOrderByWithAggregationInput[]
    by: AssessmentsScalarFieldEnum[] | AssessmentsScalarFieldEnum
    having?: AssessmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentsCountAggregateInputType | true
    _avg?: AssessmentsAvgAggregateInputType
    _sum?: AssessmentsSumAggregateInputType
    _min?: AssessmentsMinAggregateInputType
    _max?: AssessmentsMaxAggregateInputType
  }

  export type AssessmentsGroupByOutputType = {
    id: string
    title: string
    batch: string[]
    departments: string[]
    startTime: Date
    endTime: Date
    duration: number
    totalQuestions: number
    topics: string[]
    status: $Enums.AssessmentStatus
    professorId: string
    createdAt: Date
    updatedAt: Date
    _count: AssessmentsCountAggregateOutputType | null
    _avg: AssessmentsAvgAggregateOutputType | null
    _sum: AssessmentsSumAggregateOutputType | null
    _min: AssessmentsMinAggregateOutputType | null
    _max: AssessmentsMaxAggregateOutputType | null
  }

  type GetAssessmentsGroupByPayload<T extends AssessmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentsGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentsGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    batch?: boolean
    departments?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    totalQuestions?: boolean
    topics?: boolean
    status?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problems?: boolean | Assessments$problemsArgs<ExtArgs>
    attempts?: boolean | Assessments$attemptsArgs<ExtArgs>
    submissions?: boolean | Assessments$submissionsArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    _count?: boolean | AssessmentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessments"]>

  export type AssessmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    batch?: boolean
    departments?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    totalQuestions?: boolean
    topics?: boolean
    status?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessments"]>

  export type AssessmentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    batch?: boolean
    departments?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    totalQuestions?: boolean
    topics?: boolean
    status?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessments"]>

  export type AssessmentsSelectScalar = {
    id?: boolean
    title?: boolean
    batch?: boolean
    departments?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    totalQuestions?: boolean
    topics?: boolean
    status?: boolean
    professorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssessmentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "batch" | "departments" | "startTime" | "endTime" | "duration" | "totalQuestions" | "topics" | "status" | "professorId" | "createdAt" | "updatedAt", ExtArgs["result"]["assessments"]>
  export type AssessmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | Assessments$problemsArgs<ExtArgs>
    attempts?: boolean | Assessments$attemptsArgs<ExtArgs>
    submissions?: boolean | Assessments$submissionsArgs<ExtArgs>
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
    _count?: boolean | AssessmentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssessmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }
  export type AssessmentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }

  export type $AssessmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assessments"
    objects: {
      problems: Prisma.$ProblemsPayload<ExtArgs>[]
      attempts: Prisma.$AttemptTrackerPayload<ExtArgs>[]
      submissions: Prisma.$AssessmentSubmissionPayload<ExtArgs>[]
      professor: Prisma.$ProfessorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      batch: string[]
      departments: string[]
      startTime: Date
      endTime: Date
      duration: number
      totalQuestions: number
      topics: string[]
      status: $Enums.AssessmentStatus
      professorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assessments"]>
    composites: {}
  }

  type AssessmentsGetPayload<S extends boolean | null | undefined | AssessmentsDefaultArgs> = $Result.GetResult<Prisma.$AssessmentsPayload, S>

  type AssessmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssessmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssessmentsCountAggregateInputType | true
    }

  export interface AssessmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assessments'], meta: { name: 'Assessments' } }
    /**
     * Find zero or one Assessments that matches the filter.
     * @param {AssessmentsFindUniqueArgs} args - Arguments to find a Assessments
     * @example
     * // Get one Assessments
     * const assessments = await prisma.assessments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssessmentsFindUniqueArgs>(args: SelectSubset<T, AssessmentsFindUniqueArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assessments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssessmentsFindUniqueOrThrowArgs} args - Arguments to find a Assessments
     * @example
     * // Get one Assessments
     * const assessments = await prisma.assessments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssessmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, AssessmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentsFindFirstArgs} args - Arguments to find a Assessments
     * @example
     * // Get one Assessments
     * const assessments = await prisma.assessments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssessmentsFindFirstArgs>(args?: SelectSubset<T, AssessmentsFindFirstArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assessments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentsFindFirstOrThrowArgs} args - Arguments to find a Assessments
     * @example
     * // Get one Assessments
     * const assessments = await prisma.assessments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssessmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, AssessmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assessments
     * const assessments = await prisma.assessments.findMany()
     * 
     * // Get first 10 Assessments
     * const assessments = await prisma.assessments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentsWithIdOnly = await prisma.assessments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssessmentsFindManyArgs>(args?: SelectSubset<T, AssessmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assessments.
     * @param {AssessmentsCreateArgs} args - Arguments to create a Assessments.
     * @example
     * // Create one Assessments
     * const Assessments = await prisma.assessments.create({
     *   data: {
     *     // ... data to create a Assessments
     *   }
     * })
     * 
     */
    create<T extends AssessmentsCreateArgs>(args: SelectSubset<T, AssessmentsCreateArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assessments.
     * @param {AssessmentsCreateManyArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessments = await prisma.assessments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssessmentsCreateManyArgs>(args?: SelectSubset<T, AssessmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assessments and returns the data saved in the database.
     * @param {AssessmentsCreateManyAndReturnArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessments = await prisma.assessments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assessments and only return the `id`
     * const assessmentsWithIdOnly = await prisma.assessments.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssessmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, AssessmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assessments.
     * @param {AssessmentsDeleteArgs} args - Arguments to delete one Assessments.
     * @example
     * // Delete one Assessments
     * const Assessments = await prisma.assessments.delete({
     *   where: {
     *     // ... filter to delete one Assessments
     *   }
     * })
     * 
     */
    delete<T extends AssessmentsDeleteArgs>(args: SelectSubset<T, AssessmentsDeleteArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assessments.
     * @param {AssessmentsUpdateArgs} args - Arguments to update one Assessments.
     * @example
     * // Update one Assessments
     * const assessments = await prisma.assessments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssessmentsUpdateArgs>(args: SelectSubset<T, AssessmentsUpdateArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assessments.
     * @param {AssessmentsDeleteManyArgs} args - Arguments to filter Assessments to delete.
     * @example
     * // Delete a few Assessments
     * const { count } = await prisma.assessments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssessmentsDeleteManyArgs>(args?: SelectSubset<T, AssessmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assessments
     * const assessments = await prisma.assessments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssessmentsUpdateManyArgs>(args: SelectSubset<T, AssessmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assessments and returns the data updated in the database.
     * @param {AssessmentsUpdateManyAndReturnArgs} args - Arguments to update many Assessments.
     * @example
     * // Update many Assessments
     * const assessments = await prisma.assessments.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assessments and only return the `id`
     * const assessmentsWithIdOnly = await prisma.assessments.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssessmentsUpdateManyAndReturnArgs>(args: SelectSubset<T, AssessmentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assessments.
     * @param {AssessmentsUpsertArgs} args - Arguments to update or create a Assessments.
     * @example
     * // Update or create a Assessments
     * const assessments = await prisma.assessments.upsert({
     *   create: {
     *     // ... data to create a Assessments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assessments we want to update
     *   }
     * })
     */
    upsert<T extends AssessmentsUpsertArgs>(args: SelectSubset<T, AssessmentsUpsertArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentsCountArgs} args - Arguments to filter Assessments to count.
     * @example
     * // Count the number of Assessments
     * const count = await prisma.assessments.count({
     *   where: {
     *     // ... the filter for the Assessments we want to count
     *   }
     * })
    **/
    count<T extends AssessmentsCountArgs>(
      args?: Subset<T, AssessmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentsAggregateArgs>(args: Subset<T, AssessmentsAggregateArgs>): Prisma.PrismaPromise<GetAssessmentsAggregateType<T>>

    /**
     * Group by Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentsGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assessments model
   */
  readonly fields: AssessmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assessments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problems<T extends Assessments$problemsArgs<ExtArgs> = {}>(args?: Subset<T, Assessments$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attempts<T extends Assessments$attemptsArgs<ExtArgs> = {}>(args?: Subset<T, Assessments$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends Assessments$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Assessments$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assessments model
   */
  interface AssessmentsFieldRefs {
    readonly id: FieldRef<"Assessments", 'String'>
    readonly title: FieldRef<"Assessments", 'String'>
    readonly batch: FieldRef<"Assessments", 'String[]'>
    readonly departments: FieldRef<"Assessments", 'String[]'>
    readonly startTime: FieldRef<"Assessments", 'DateTime'>
    readonly endTime: FieldRef<"Assessments", 'DateTime'>
    readonly duration: FieldRef<"Assessments", 'Int'>
    readonly totalQuestions: FieldRef<"Assessments", 'Int'>
    readonly topics: FieldRef<"Assessments", 'String[]'>
    readonly status: FieldRef<"Assessments", 'AssessmentStatus'>
    readonly professorId: FieldRef<"Assessments", 'String'>
    readonly createdAt: FieldRef<"Assessments", 'DateTime'>
    readonly updatedAt: FieldRef<"Assessments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Assessments findUnique
   */
  export type AssessmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where: AssessmentsWhereUniqueInput
  }

  /**
   * Assessments findUniqueOrThrow
   */
  export type AssessmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where: AssessmentsWhereUniqueInput
  }

  /**
   * Assessments findFirst
   */
  export type AssessmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where?: AssessmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentsOrderByWithRelationInput | AssessmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentsScalarFieldEnum | AssessmentsScalarFieldEnum[]
  }

  /**
   * Assessments findFirstOrThrow
   */
  export type AssessmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where?: AssessmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentsOrderByWithRelationInput | AssessmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentsScalarFieldEnum | AssessmentsScalarFieldEnum[]
  }

  /**
   * Assessments findMany
   */
  export type AssessmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where?: AssessmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentsOrderByWithRelationInput | AssessmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assessments.
     */
    cursor?: AssessmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    distinct?: AssessmentsScalarFieldEnum | AssessmentsScalarFieldEnum[]
  }

  /**
   * Assessments create
   */
  export type AssessmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Assessments.
     */
    data: XOR<AssessmentsCreateInput, AssessmentsUncheckedCreateInput>
  }

  /**
   * Assessments createMany
   */
  export type AssessmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentsCreateManyInput | AssessmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assessments createManyAndReturn
   */
  export type AssessmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentsCreateManyInput | AssessmentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assessments update
   */
  export type AssessmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Assessments.
     */
    data: XOR<AssessmentsUpdateInput, AssessmentsUncheckedUpdateInput>
    /**
     * Choose, which Assessments to update.
     */
    where: AssessmentsWhereUniqueInput
  }

  /**
   * Assessments updateMany
   */
  export type AssessmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assessments.
     */
    data: XOR<AssessmentsUpdateManyMutationInput, AssessmentsUncheckedUpdateManyInput>
    /**
     * Filter which Assessments to update
     */
    where?: AssessmentsWhereInput
    /**
     * Limit how many Assessments to update.
     */
    limit?: number
  }

  /**
   * Assessments updateManyAndReturn
   */
  export type AssessmentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * The data used to update Assessments.
     */
    data: XOR<AssessmentsUpdateManyMutationInput, AssessmentsUncheckedUpdateManyInput>
    /**
     * Filter which Assessments to update
     */
    where?: AssessmentsWhereInput
    /**
     * Limit how many Assessments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assessments upsert
   */
  export type AssessmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Assessments to update in case it exists.
     */
    where: AssessmentsWhereUniqueInput
    /**
     * In case the Assessments found by the `where` argument doesn't exist, create a new Assessments with this data.
     */
    create: XOR<AssessmentsCreateInput, AssessmentsUncheckedCreateInput>
    /**
     * In case the Assessments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentsUpdateInput, AssessmentsUncheckedUpdateInput>
  }

  /**
   * Assessments delete
   */
  export type AssessmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
    /**
     * Filter which Assessments to delete.
     */
    where: AssessmentsWhereUniqueInput
  }

  /**
   * Assessments deleteMany
   */
  export type AssessmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessments to delete
     */
    where?: AssessmentsWhereInput
    /**
     * Limit how many Assessments to delete.
     */
    limit?: number
  }

  /**
   * Assessments.problems
   */
  export type Assessments$problemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problems
     */
    select?: ProblemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problems
     */
    omit?: ProblemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemsInclude<ExtArgs> | null
    where?: ProblemsWhereInput
    orderBy?: ProblemsOrderByWithRelationInput | ProblemsOrderByWithRelationInput[]
    cursor?: ProblemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemsScalarFieldEnum | ProblemsScalarFieldEnum[]
  }

  /**
   * Assessments.attempts
   */
  export type Assessments$attemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    where?: AttemptTrackerWhereInput
    orderBy?: AttemptTrackerOrderByWithRelationInput | AttemptTrackerOrderByWithRelationInput[]
    cursor?: AttemptTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttemptTrackerScalarFieldEnum | AttemptTrackerScalarFieldEnum[]
  }

  /**
   * Assessments.submissions
   */
  export type Assessments$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    where?: AssessmentSubmissionWhereInput
    orderBy?: AssessmentSubmissionOrderByWithRelationInput | AssessmentSubmissionOrderByWithRelationInput[]
    cursor?: AssessmentSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentSubmissionScalarFieldEnum | AssessmentSubmissionScalarFieldEnum[]
  }

  /**
   * Assessments without action
   */
  export type AssessmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessments
     */
    select?: AssessmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assessments
     */
    omit?: AssessmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentsInclude<ExtArgs> | null
  }


  /**
   * Model TestCases
   */

  export type AggregateTestCases = {
    _count: TestCasesCountAggregateOutputType | null
    _min: TestCasesMinAggregateOutputType | null
    _max: TestCasesMaxAggregateOutputType | null
  }

  export type TestCasesMinAggregateOutputType = {
    id: string | null
    input: string | null
    output: string | null
    isHidden: boolean | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCasesMaxAggregateOutputType = {
    id: string | null
    input: string | null
    output: string | null
    isHidden: boolean | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCasesCountAggregateOutputType = {
    id: number
    input: number
    output: number
    isHidden: number
    problemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TestCasesMinAggregateInputType = {
    id?: true
    input?: true
    output?: true
    isHidden?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCasesMaxAggregateInputType = {
    id?: true
    input?: true
    output?: true
    isHidden?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCasesCountAggregateInputType = {
    id?: true
    input?: true
    output?: true
    isHidden?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TestCasesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCases to aggregate.
     */
    where?: TestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCasesOrderByWithRelationInput | TestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestCases
    **/
    _count?: true | TestCasesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestCasesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestCasesMaxAggregateInputType
  }

  export type GetTestCasesAggregateType<T extends TestCasesAggregateArgs> = {
        [P in keyof T & keyof AggregateTestCases]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestCases[P]>
      : GetScalarType<T[P], AggregateTestCases[P]>
  }




  export type TestCasesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCasesWhereInput
    orderBy?: TestCasesOrderByWithAggregationInput | TestCasesOrderByWithAggregationInput[]
    by: TestCasesScalarFieldEnum[] | TestCasesScalarFieldEnum
    having?: TestCasesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCasesCountAggregateInputType | true
    _min?: TestCasesMinAggregateInputType
    _max?: TestCasesMaxAggregateInputType
  }

  export type TestCasesGroupByOutputType = {
    id: string
    input: string
    output: string
    isHidden: boolean
    problemId: string
    createdAt: Date
    updatedAt: Date
    _count: TestCasesCountAggregateOutputType | null
    _min: TestCasesMinAggregateOutputType | null
    _max: TestCasesMaxAggregateOutputType | null
  }

  type GetTestCasesGroupByPayload<T extends TestCasesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestCasesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestCasesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestCasesGroupByOutputType[P]>
            : GetScalarType<T[P], TestCasesGroupByOutputType[P]>
        }
      >
    >


  export type TestCasesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    input?: boolean
    output?: boolean
    isHidden?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCases"]>

  export type TestCasesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    input?: boolean
    output?: boolean
    isHidden?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCases"]>

  export type TestCasesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    input?: boolean
    output?: boolean
    isHidden?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCases"]>

  export type TestCasesSelectScalar = {
    id?: boolean
    input?: boolean
    output?: boolean
    isHidden?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TestCasesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "input" | "output" | "isHidden" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["testCases"]>
  export type TestCasesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type TestCasesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type TestCasesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }

  export type $TestCasesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestCases"
    objects: {
      problem: Prisma.$ProblemsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      input: string
      output: string
      isHidden: boolean
      problemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["testCases"]>
    composites: {}
  }

  type TestCasesGetPayload<S extends boolean | null | undefined | TestCasesDefaultArgs> = $Result.GetResult<Prisma.$TestCasesPayload, S>

  type TestCasesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestCasesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestCasesCountAggregateInputType | true
    }

  export interface TestCasesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCases'], meta: { name: 'TestCases' } }
    /**
     * Find zero or one TestCases that matches the filter.
     * @param {TestCasesFindUniqueArgs} args - Arguments to find a TestCases
     * @example
     * // Get one TestCases
     * const testCases = await prisma.testCases.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestCasesFindUniqueArgs>(args: SelectSubset<T, TestCasesFindUniqueArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestCases that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestCasesFindUniqueOrThrowArgs} args - Arguments to find a TestCases
     * @example
     * // Get one TestCases
     * const testCases = await prisma.testCases.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestCasesFindUniqueOrThrowArgs>(args: SelectSubset<T, TestCasesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCasesFindFirstArgs} args - Arguments to find a TestCases
     * @example
     * // Get one TestCases
     * const testCases = await prisma.testCases.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestCasesFindFirstArgs>(args?: SelectSubset<T, TestCasesFindFirstArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestCases that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCasesFindFirstOrThrowArgs} args - Arguments to find a TestCases
     * @example
     * // Get one TestCases
     * const testCases = await prisma.testCases.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestCasesFindFirstOrThrowArgs>(args?: SelectSubset<T, TestCasesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCasesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestCases
     * const testCases = await prisma.testCases.findMany()
     * 
     * // Get first 10 TestCases
     * const testCases = await prisma.testCases.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testCasesWithIdOnly = await prisma.testCases.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestCasesFindManyArgs>(args?: SelectSubset<T, TestCasesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestCases.
     * @param {TestCasesCreateArgs} args - Arguments to create a TestCases.
     * @example
     * // Create one TestCases
     * const TestCases = await prisma.testCases.create({
     *   data: {
     *     // ... data to create a TestCases
     *   }
     * })
     * 
     */
    create<T extends TestCasesCreateArgs>(args: SelectSubset<T, TestCasesCreateArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestCases.
     * @param {TestCasesCreateManyArgs} args - Arguments to create many TestCases.
     * @example
     * // Create many TestCases
     * const testCases = await prisma.testCases.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCasesCreateManyArgs>(args?: SelectSubset<T, TestCasesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestCases and returns the data saved in the database.
     * @param {TestCasesCreateManyAndReturnArgs} args - Arguments to create many TestCases.
     * @example
     * // Create many TestCases
     * const testCases = await prisma.testCases.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestCases and only return the `id`
     * const testCasesWithIdOnly = await prisma.testCases.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCasesCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCasesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TestCases.
     * @param {TestCasesDeleteArgs} args - Arguments to delete one TestCases.
     * @example
     * // Delete one TestCases
     * const TestCases = await prisma.testCases.delete({
     *   where: {
     *     // ... filter to delete one TestCases
     *   }
     * })
     * 
     */
    delete<T extends TestCasesDeleteArgs>(args: SelectSubset<T, TestCasesDeleteArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestCases.
     * @param {TestCasesUpdateArgs} args - Arguments to update one TestCases.
     * @example
     * // Update one TestCases
     * const testCases = await prisma.testCases.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestCasesUpdateArgs>(args: SelectSubset<T, TestCasesUpdateArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestCases.
     * @param {TestCasesDeleteManyArgs} args - Arguments to filter TestCases to delete.
     * @example
     * // Delete a few TestCases
     * const { count } = await prisma.testCases.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestCasesDeleteManyArgs>(args?: SelectSubset<T, TestCasesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCasesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestCases
     * const testCases = await prisma.testCases.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestCasesUpdateManyArgs>(args: SelectSubset<T, TestCasesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCases and returns the data updated in the database.
     * @param {TestCasesUpdateManyAndReturnArgs} args - Arguments to update many TestCases.
     * @example
     * // Update many TestCases
     * const testCases = await prisma.testCases.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TestCases and only return the `id`
     * const testCasesWithIdOnly = await prisma.testCases.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestCasesUpdateManyAndReturnArgs>(args: SelectSubset<T, TestCasesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TestCases.
     * @param {TestCasesUpsertArgs} args - Arguments to update or create a TestCases.
     * @example
     * // Update or create a TestCases
     * const testCases = await prisma.testCases.upsert({
     *   create: {
     *     // ... data to create a TestCases
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestCases we want to update
     *   }
     * })
     */
    upsert<T extends TestCasesUpsertArgs>(args: SelectSubset<T, TestCasesUpsertArgs<ExtArgs>>): Prisma__TestCasesClient<$Result.GetResult<Prisma.$TestCasesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCasesCountArgs} args - Arguments to filter TestCases to count.
     * @example
     * // Count the number of TestCases
     * const count = await prisma.testCases.count({
     *   where: {
     *     // ... the filter for the TestCases we want to count
     *   }
     * })
    **/
    count<T extends TestCasesCountArgs>(
      args?: Subset<T, TestCasesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCasesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCasesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestCasesAggregateArgs>(args: Subset<T, TestCasesAggregateArgs>): Prisma.PrismaPromise<GetTestCasesAggregateType<T>>

    /**
     * Group by TestCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCasesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestCasesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestCasesGroupByArgs['orderBy'] }
        : { orderBy?: TestCasesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestCasesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCasesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestCases model
   */
  readonly fields: TestCasesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestCases.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestCasesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends ProblemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemsDefaultArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestCases model
   */
  interface TestCasesFieldRefs {
    readonly id: FieldRef<"TestCases", 'String'>
    readonly input: FieldRef<"TestCases", 'String'>
    readonly output: FieldRef<"TestCases", 'String'>
    readonly isHidden: FieldRef<"TestCases", 'Boolean'>
    readonly problemId: FieldRef<"TestCases", 'String'>
    readonly createdAt: FieldRef<"TestCases", 'DateTime'>
    readonly updatedAt: FieldRef<"TestCases", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestCases findUnique
   */
  export type TestCasesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * Filter, which TestCases to fetch.
     */
    where: TestCasesWhereUniqueInput
  }

  /**
   * TestCases findUniqueOrThrow
   */
  export type TestCasesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * Filter, which TestCases to fetch.
     */
    where: TestCasesWhereUniqueInput
  }

  /**
   * TestCases findFirst
   */
  export type TestCasesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * Filter, which TestCases to fetch.
     */
    where?: TestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCasesOrderByWithRelationInput | TestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCases.
     */
    cursor?: TestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCases.
     */
    distinct?: TestCasesScalarFieldEnum | TestCasesScalarFieldEnum[]
  }

  /**
   * TestCases findFirstOrThrow
   */
  export type TestCasesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * Filter, which TestCases to fetch.
     */
    where?: TestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCasesOrderByWithRelationInput | TestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCases.
     */
    cursor?: TestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCases.
     */
    distinct?: TestCasesScalarFieldEnum | TestCasesScalarFieldEnum[]
  }

  /**
   * TestCases findMany
   */
  export type TestCasesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * Filter, which TestCases to fetch.
     */
    where?: TestCasesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCases to fetch.
     */
    orderBy?: TestCasesOrderByWithRelationInput | TestCasesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestCases.
     */
    cursor?: TestCasesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCases.
     */
    skip?: number
    distinct?: TestCasesScalarFieldEnum | TestCasesScalarFieldEnum[]
  }

  /**
   * TestCases create
   */
  export type TestCasesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * The data needed to create a TestCases.
     */
    data: XOR<TestCasesCreateInput, TestCasesUncheckedCreateInput>
  }

  /**
   * TestCases createMany
   */
  export type TestCasesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestCases.
     */
    data: TestCasesCreateManyInput | TestCasesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestCases createManyAndReturn
   */
  export type TestCasesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * The data used to create many TestCases.
     */
    data: TestCasesCreateManyInput | TestCasesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestCases update
   */
  export type TestCasesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * The data needed to update a TestCases.
     */
    data: XOR<TestCasesUpdateInput, TestCasesUncheckedUpdateInput>
    /**
     * Choose, which TestCases to update.
     */
    where: TestCasesWhereUniqueInput
  }

  /**
   * TestCases updateMany
   */
  export type TestCasesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestCases.
     */
    data: XOR<TestCasesUpdateManyMutationInput, TestCasesUncheckedUpdateManyInput>
    /**
     * Filter which TestCases to update
     */
    where?: TestCasesWhereInput
    /**
     * Limit how many TestCases to update.
     */
    limit?: number
  }

  /**
   * TestCases updateManyAndReturn
   */
  export type TestCasesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * The data used to update TestCases.
     */
    data: XOR<TestCasesUpdateManyMutationInput, TestCasesUncheckedUpdateManyInput>
    /**
     * Filter which TestCases to update
     */
    where?: TestCasesWhereInput
    /**
     * Limit how many TestCases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestCases upsert
   */
  export type TestCasesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * The filter to search for the TestCases to update in case it exists.
     */
    where: TestCasesWhereUniqueInput
    /**
     * In case the TestCases found by the `where` argument doesn't exist, create a new TestCases with this data.
     */
    create: XOR<TestCasesCreateInput, TestCasesUncheckedCreateInput>
    /**
     * In case the TestCases was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestCasesUpdateInput, TestCasesUncheckedUpdateInput>
  }

  /**
   * TestCases delete
   */
  export type TestCasesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
    /**
     * Filter which TestCases to delete.
     */
    where: TestCasesWhereUniqueInput
  }

  /**
   * TestCases deleteMany
   */
  export type TestCasesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCases to delete
     */
    where?: TestCasesWhereInput
    /**
     * Limit how many TestCases to delete.
     */
    limit?: number
  }

  /**
   * TestCases without action
   */
  export type TestCasesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCases
     */
    select?: TestCasesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCases
     */
    omit?: TestCasesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCasesInclude<ExtArgs> | null
  }


  /**
   * Model AttemptTracker
   */

  export type AggregateAttemptTracker = {
    _count: AttemptTrackerCountAggregateOutputType | null
    _min: AttemptTrackerMinAggregateOutputType | null
    _max: AttemptTrackerMaxAggregateOutputType | null
  }

  export type AttemptTrackerMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    assessmentId: string | null
    startTime: Date | null
    endTime: Date | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttemptTrackerMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    assessmentId: string | null
    startTime: Date | null
    endTime: Date | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttemptTrackerCountAggregateOutputType = {
    id: number
    studentId: number
    assessmentId: number
    startTime: number
    endTime: number
    isCompleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AttemptTrackerMinAggregateInputType = {
    id?: true
    studentId?: true
    assessmentId?: true
    startTime?: true
    endTime?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttemptTrackerMaxAggregateInputType = {
    id?: true
    studentId?: true
    assessmentId?: true
    startTime?: true
    endTime?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttemptTrackerCountAggregateInputType = {
    id?: true
    studentId?: true
    assessmentId?: true
    startTime?: true
    endTime?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AttemptTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttemptTracker to aggregate.
     */
    where?: AttemptTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttemptTrackers to fetch.
     */
    orderBy?: AttemptTrackerOrderByWithRelationInput | AttemptTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttemptTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttemptTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttemptTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttemptTrackers
    **/
    _count?: true | AttemptTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttemptTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttemptTrackerMaxAggregateInputType
  }

  export type GetAttemptTrackerAggregateType<T extends AttemptTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateAttemptTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttemptTracker[P]>
      : GetScalarType<T[P], AggregateAttemptTracker[P]>
  }




  export type AttemptTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttemptTrackerWhereInput
    orderBy?: AttemptTrackerOrderByWithAggregationInput | AttemptTrackerOrderByWithAggregationInput[]
    by: AttemptTrackerScalarFieldEnum[] | AttemptTrackerScalarFieldEnum
    having?: AttemptTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttemptTrackerCountAggregateInputType | true
    _min?: AttemptTrackerMinAggregateInputType
    _max?: AttemptTrackerMaxAggregateInputType
  }

  export type AttemptTrackerGroupByOutputType = {
    id: string
    studentId: string
    assessmentId: string
    startTime: Date
    endTime: Date | null
    isCompleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: AttemptTrackerCountAggregateOutputType | null
    _min: AttemptTrackerMinAggregateOutputType | null
    _max: AttemptTrackerMaxAggregateOutputType | null
  }

  type GetAttemptTrackerGroupByPayload<T extends AttemptTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttemptTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttemptTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttemptTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], AttemptTrackerGroupByOutputType[P]>
        }
      >
    >


  export type AttemptTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    startTime?: boolean
    endTime?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attemptTracker"]>

  export type AttemptTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    startTime?: boolean
    endTime?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attemptTracker"]>

  export type AttemptTrackerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    startTime?: boolean
    endTime?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attemptTracker"]>

  export type AttemptTrackerSelectScalar = {
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    startTime?: boolean
    endTime?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AttemptTrackerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "assessmentId" | "startTime" | "endTime" | "isCompleted" | "createdAt" | "updatedAt", ExtArgs["result"]["attemptTracker"]>
  export type AttemptTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }
  export type AttemptTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }
  export type AttemptTrackerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }

  export type $AttemptTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttemptTracker"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      assessment: Prisma.$AssessmentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      assessmentId: string
      startTime: Date
      endTime: Date | null
      isCompleted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["attemptTracker"]>
    composites: {}
  }

  type AttemptTrackerGetPayload<S extends boolean | null | undefined | AttemptTrackerDefaultArgs> = $Result.GetResult<Prisma.$AttemptTrackerPayload, S>

  type AttemptTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttemptTrackerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttemptTrackerCountAggregateInputType | true
    }

  export interface AttemptTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttemptTracker'], meta: { name: 'AttemptTracker' } }
    /**
     * Find zero or one AttemptTracker that matches the filter.
     * @param {AttemptTrackerFindUniqueArgs} args - Arguments to find a AttemptTracker
     * @example
     * // Get one AttemptTracker
     * const attemptTracker = await prisma.attemptTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttemptTrackerFindUniqueArgs>(args: SelectSubset<T, AttemptTrackerFindUniqueArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AttemptTracker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttemptTrackerFindUniqueOrThrowArgs} args - Arguments to find a AttemptTracker
     * @example
     * // Get one AttemptTracker
     * const attemptTracker = await prisma.attemptTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttemptTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, AttemptTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttemptTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptTrackerFindFirstArgs} args - Arguments to find a AttemptTracker
     * @example
     * // Get one AttemptTracker
     * const attemptTracker = await prisma.attemptTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttemptTrackerFindFirstArgs>(args?: SelectSubset<T, AttemptTrackerFindFirstArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AttemptTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptTrackerFindFirstOrThrowArgs} args - Arguments to find a AttemptTracker
     * @example
     * // Get one AttemptTracker
     * const attemptTracker = await prisma.attemptTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttemptTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, AttemptTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AttemptTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttemptTrackers
     * const attemptTrackers = await prisma.attemptTracker.findMany()
     * 
     * // Get first 10 AttemptTrackers
     * const attemptTrackers = await prisma.attemptTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attemptTrackerWithIdOnly = await prisma.attemptTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttemptTrackerFindManyArgs>(args?: SelectSubset<T, AttemptTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AttemptTracker.
     * @param {AttemptTrackerCreateArgs} args - Arguments to create a AttemptTracker.
     * @example
     * // Create one AttemptTracker
     * const AttemptTracker = await prisma.attemptTracker.create({
     *   data: {
     *     // ... data to create a AttemptTracker
     *   }
     * })
     * 
     */
    create<T extends AttemptTrackerCreateArgs>(args: SelectSubset<T, AttemptTrackerCreateArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AttemptTrackers.
     * @param {AttemptTrackerCreateManyArgs} args - Arguments to create many AttemptTrackers.
     * @example
     * // Create many AttemptTrackers
     * const attemptTracker = await prisma.attemptTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttemptTrackerCreateManyArgs>(args?: SelectSubset<T, AttemptTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttemptTrackers and returns the data saved in the database.
     * @param {AttemptTrackerCreateManyAndReturnArgs} args - Arguments to create many AttemptTrackers.
     * @example
     * // Create many AttemptTrackers
     * const attemptTracker = await prisma.attemptTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttemptTrackers and only return the `id`
     * const attemptTrackerWithIdOnly = await prisma.attemptTracker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttemptTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, AttemptTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AttemptTracker.
     * @param {AttemptTrackerDeleteArgs} args - Arguments to delete one AttemptTracker.
     * @example
     * // Delete one AttemptTracker
     * const AttemptTracker = await prisma.attemptTracker.delete({
     *   where: {
     *     // ... filter to delete one AttemptTracker
     *   }
     * })
     * 
     */
    delete<T extends AttemptTrackerDeleteArgs>(args: SelectSubset<T, AttemptTrackerDeleteArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AttemptTracker.
     * @param {AttemptTrackerUpdateArgs} args - Arguments to update one AttemptTracker.
     * @example
     * // Update one AttemptTracker
     * const attemptTracker = await prisma.attemptTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttemptTrackerUpdateArgs>(args: SelectSubset<T, AttemptTrackerUpdateArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AttemptTrackers.
     * @param {AttemptTrackerDeleteManyArgs} args - Arguments to filter AttemptTrackers to delete.
     * @example
     * // Delete a few AttemptTrackers
     * const { count } = await prisma.attemptTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttemptTrackerDeleteManyArgs>(args?: SelectSubset<T, AttemptTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttemptTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttemptTrackers
     * const attemptTracker = await prisma.attemptTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttemptTrackerUpdateManyArgs>(args: SelectSubset<T, AttemptTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttemptTrackers and returns the data updated in the database.
     * @param {AttemptTrackerUpdateManyAndReturnArgs} args - Arguments to update many AttemptTrackers.
     * @example
     * // Update many AttemptTrackers
     * const attemptTracker = await prisma.attemptTracker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AttemptTrackers and only return the `id`
     * const attemptTrackerWithIdOnly = await prisma.attemptTracker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttemptTrackerUpdateManyAndReturnArgs>(args: SelectSubset<T, AttemptTrackerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AttemptTracker.
     * @param {AttemptTrackerUpsertArgs} args - Arguments to update or create a AttemptTracker.
     * @example
     * // Update or create a AttemptTracker
     * const attemptTracker = await prisma.attemptTracker.upsert({
     *   create: {
     *     // ... data to create a AttemptTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttemptTracker we want to update
     *   }
     * })
     */
    upsert<T extends AttemptTrackerUpsertArgs>(args: SelectSubset<T, AttemptTrackerUpsertArgs<ExtArgs>>): Prisma__AttemptTrackerClient<$Result.GetResult<Prisma.$AttemptTrackerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AttemptTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptTrackerCountArgs} args - Arguments to filter AttemptTrackers to count.
     * @example
     * // Count the number of AttemptTrackers
     * const count = await prisma.attemptTracker.count({
     *   where: {
     *     // ... the filter for the AttemptTrackers we want to count
     *   }
     * })
    **/
    count<T extends AttemptTrackerCountArgs>(
      args?: Subset<T, AttemptTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttemptTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttemptTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttemptTrackerAggregateArgs>(args: Subset<T, AttemptTrackerAggregateArgs>): Prisma.PrismaPromise<GetAttemptTrackerAggregateType<T>>

    /**
     * Group by AttemptTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttemptTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttemptTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttemptTrackerGroupByArgs['orderBy'] }
        : { orderBy?: AttemptTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttemptTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttemptTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttemptTracker model
   */
  readonly fields: AttemptTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttemptTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttemptTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assessment<T extends AssessmentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentsDefaultArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttemptTracker model
   */
  interface AttemptTrackerFieldRefs {
    readonly id: FieldRef<"AttemptTracker", 'String'>
    readonly studentId: FieldRef<"AttemptTracker", 'String'>
    readonly assessmentId: FieldRef<"AttemptTracker", 'String'>
    readonly startTime: FieldRef<"AttemptTracker", 'DateTime'>
    readonly endTime: FieldRef<"AttemptTracker", 'DateTime'>
    readonly isCompleted: FieldRef<"AttemptTracker", 'Boolean'>
    readonly createdAt: FieldRef<"AttemptTracker", 'DateTime'>
    readonly updatedAt: FieldRef<"AttemptTracker", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AttemptTracker findUnique
   */
  export type AttemptTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AttemptTracker to fetch.
     */
    where: AttemptTrackerWhereUniqueInput
  }

  /**
   * AttemptTracker findUniqueOrThrow
   */
  export type AttemptTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AttemptTracker to fetch.
     */
    where: AttemptTrackerWhereUniqueInput
  }

  /**
   * AttemptTracker findFirst
   */
  export type AttemptTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AttemptTracker to fetch.
     */
    where?: AttemptTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttemptTrackers to fetch.
     */
    orderBy?: AttemptTrackerOrderByWithRelationInput | AttemptTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttemptTrackers.
     */
    cursor?: AttemptTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttemptTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttemptTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttemptTrackers.
     */
    distinct?: AttemptTrackerScalarFieldEnum | AttemptTrackerScalarFieldEnum[]
  }

  /**
   * AttemptTracker findFirstOrThrow
   */
  export type AttemptTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AttemptTracker to fetch.
     */
    where?: AttemptTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttemptTrackers to fetch.
     */
    orderBy?: AttemptTrackerOrderByWithRelationInput | AttemptTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttemptTrackers.
     */
    cursor?: AttemptTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttemptTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttemptTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttemptTrackers.
     */
    distinct?: AttemptTrackerScalarFieldEnum | AttemptTrackerScalarFieldEnum[]
  }

  /**
   * AttemptTracker findMany
   */
  export type AttemptTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * Filter, which AttemptTrackers to fetch.
     */
    where?: AttemptTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttemptTrackers to fetch.
     */
    orderBy?: AttemptTrackerOrderByWithRelationInput | AttemptTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttemptTrackers.
     */
    cursor?: AttemptTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttemptTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttemptTrackers.
     */
    skip?: number
    distinct?: AttemptTrackerScalarFieldEnum | AttemptTrackerScalarFieldEnum[]
  }

  /**
   * AttemptTracker create
   */
  export type AttemptTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a AttemptTracker.
     */
    data: XOR<AttemptTrackerCreateInput, AttemptTrackerUncheckedCreateInput>
  }

  /**
   * AttemptTracker createMany
   */
  export type AttemptTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttemptTrackers.
     */
    data: AttemptTrackerCreateManyInput | AttemptTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttemptTracker createManyAndReturn
   */
  export type AttemptTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * The data used to create many AttemptTrackers.
     */
    data: AttemptTrackerCreateManyInput | AttemptTrackerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttemptTracker update
   */
  export type AttemptTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a AttemptTracker.
     */
    data: XOR<AttemptTrackerUpdateInput, AttemptTrackerUncheckedUpdateInput>
    /**
     * Choose, which AttemptTracker to update.
     */
    where: AttemptTrackerWhereUniqueInput
  }

  /**
   * AttemptTracker updateMany
   */
  export type AttemptTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttemptTrackers.
     */
    data: XOR<AttemptTrackerUpdateManyMutationInput, AttemptTrackerUncheckedUpdateManyInput>
    /**
     * Filter which AttemptTrackers to update
     */
    where?: AttemptTrackerWhereInput
    /**
     * Limit how many AttemptTrackers to update.
     */
    limit?: number
  }

  /**
   * AttemptTracker updateManyAndReturn
   */
  export type AttemptTrackerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * The data used to update AttemptTrackers.
     */
    data: XOR<AttemptTrackerUpdateManyMutationInput, AttemptTrackerUncheckedUpdateManyInput>
    /**
     * Filter which AttemptTrackers to update
     */
    where?: AttemptTrackerWhereInput
    /**
     * Limit how many AttemptTrackers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttemptTracker upsert
   */
  export type AttemptTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the AttemptTracker to update in case it exists.
     */
    where: AttemptTrackerWhereUniqueInput
    /**
     * In case the AttemptTracker found by the `where` argument doesn't exist, create a new AttemptTracker with this data.
     */
    create: XOR<AttemptTrackerCreateInput, AttemptTrackerUncheckedCreateInput>
    /**
     * In case the AttemptTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttemptTrackerUpdateInput, AttemptTrackerUncheckedUpdateInput>
  }

  /**
   * AttemptTracker delete
   */
  export type AttemptTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
    /**
     * Filter which AttemptTracker to delete.
     */
    where: AttemptTrackerWhereUniqueInput
  }

  /**
   * AttemptTracker deleteMany
   */
  export type AttemptTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttemptTrackers to delete
     */
    where?: AttemptTrackerWhereInput
    /**
     * Limit how many AttemptTrackers to delete.
     */
    limit?: number
  }

  /**
   * AttemptTracker without action
   */
  export type AttemptTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttemptTracker
     */
    select?: AttemptTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AttemptTracker
     */
    omit?: AttemptTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttemptTrackerInclude<ExtArgs> | null
  }


  /**
   * Model ProblemLanguage
   */

  export type AggregateProblemLanguage = {
    _count: ProblemLanguageCountAggregateOutputType | null
    _min: ProblemLanguageMinAggregateOutputType | null
    _max: ProblemLanguageMaxAggregateOutputType | null
  }

  export type ProblemLanguageMinAggregateOutputType = {
    id: string | null
    name: string | null
    functionSignature: string | null
    codePrefix: string | null
    starterCode: string | null
    codeSuffix: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemLanguageMaxAggregateOutputType = {
    id: string | null
    name: string | null
    functionSignature: string | null
    codePrefix: string | null
    starterCode: string | null
    codeSuffix: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemLanguageCountAggregateOutputType = {
    id: number
    name: number
    functionSignature: number
    codePrefix: number
    starterCode: number
    codeSuffix: number
    problemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemLanguageMinAggregateInputType = {
    id?: true
    name?: true
    functionSignature?: true
    codePrefix?: true
    starterCode?: true
    codeSuffix?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemLanguageMaxAggregateInputType = {
    id?: true
    name?: true
    functionSignature?: true
    codePrefix?: true
    starterCode?: true
    codeSuffix?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemLanguageCountAggregateInputType = {
    id?: true
    name?: true
    functionSignature?: true
    codePrefix?: true
    starterCode?: true
    codeSuffix?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemLanguageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemLanguage to aggregate.
     */
    where?: ProblemLanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemLanguages to fetch.
     */
    orderBy?: ProblemLanguageOrderByWithRelationInput | ProblemLanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemLanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemLanguages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemLanguages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemLanguages
    **/
    _count?: true | ProblemLanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemLanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemLanguageMaxAggregateInputType
  }

  export type GetProblemLanguageAggregateType<T extends ProblemLanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemLanguage[P]>
      : GetScalarType<T[P], AggregateProblemLanguage[P]>
  }




  export type ProblemLanguageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemLanguageWhereInput
    orderBy?: ProblemLanguageOrderByWithAggregationInput | ProblemLanguageOrderByWithAggregationInput[]
    by: ProblemLanguageScalarFieldEnum[] | ProblemLanguageScalarFieldEnum
    having?: ProblemLanguageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemLanguageCountAggregateInputType | true
    _min?: ProblemLanguageMinAggregateInputType
    _max?: ProblemLanguageMaxAggregateInputType
  }

  export type ProblemLanguageGroupByOutputType = {
    id: string
    name: string
    functionSignature: string
    codePrefix: string
    starterCode: string
    codeSuffix: string
    problemId: string
    createdAt: Date
    updatedAt: Date
    _count: ProblemLanguageCountAggregateOutputType | null
    _min: ProblemLanguageMinAggregateOutputType | null
    _max: ProblemLanguageMaxAggregateOutputType | null
  }

  type GetProblemLanguageGroupByPayload<T extends ProblemLanguageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemLanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemLanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemLanguageGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemLanguageGroupByOutputType[P]>
        }
      >
    >


  export type ProblemLanguageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    functionSignature?: boolean
    codePrefix?: boolean
    starterCode?: boolean
    codeSuffix?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemLanguage"]>

  export type ProblemLanguageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    functionSignature?: boolean
    codePrefix?: boolean
    starterCode?: boolean
    codeSuffix?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemLanguage"]>

  export type ProblemLanguageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    functionSignature?: boolean
    codePrefix?: boolean
    starterCode?: boolean
    codeSuffix?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemLanguage"]>

  export type ProblemLanguageSelectScalar = {
    id?: boolean
    name?: boolean
    functionSignature?: boolean
    codePrefix?: boolean
    starterCode?: boolean
    codeSuffix?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemLanguageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "functionSignature" | "codePrefix" | "starterCode" | "codeSuffix" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["problemLanguage"]>
  export type ProblemLanguageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type ProblemLanguageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }
  export type ProblemLanguageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemsDefaultArgs<ExtArgs>
  }

  export type $ProblemLanguagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemLanguage"
    objects: {
      problem: Prisma.$ProblemsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      functionSignature: string
      codePrefix: string
      starterCode: string
      codeSuffix: string
      problemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problemLanguage"]>
    composites: {}
  }

  type ProblemLanguageGetPayload<S extends boolean | null | undefined | ProblemLanguageDefaultArgs> = $Result.GetResult<Prisma.$ProblemLanguagePayload, S>

  type ProblemLanguageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemLanguageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemLanguageCountAggregateInputType | true
    }

  export interface ProblemLanguageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemLanguage'], meta: { name: 'ProblemLanguage' } }
    /**
     * Find zero or one ProblemLanguage that matches the filter.
     * @param {ProblemLanguageFindUniqueArgs} args - Arguments to find a ProblemLanguage
     * @example
     * // Get one ProblemLanguage
     * const problemLanguage = await prisma.problemLanguage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemLanguageFindUniqueArgs>(args: SelectSubset<T, ProblemLanguageFindUniqueArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemLanguage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemLanguageFindUniqueOrThrowArgs} args - Arguments to find a ProblemLanguage
     * @example
     * // Get one ProblemLanguage
     * const problemLanguage = await prisma.problemLanguage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemLanguageFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemLanguageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemLanguage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemLanguageFindFirstArgs} args - Arguments to find a ProblemLanguage
     * @example
     * // Get one ProblemLanguage
     * const problemLanguage = await prisma.problemLanguage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemLanguageFindFirstArgs>(args?: SelectSubset<T, ProblemLanguageFindFirstArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemLanguage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemLanguageFindFirstOrThrowArgs} args - Arguments to find a ProblemLanguage
     * @example
     * // Get one ProblemLanguage
     * const problemLanguage = await prisma.problemLanguage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemLanguageFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemLanguageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemLanguages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemLanguageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemLanguages
     * const problemLanguages = await prisma.problemLanguage.findMany()
     * 
     * // Get first 10 ProblemLanguages
     * const problemLanguages = await prisma.problemLanguage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemLanguageWithIdOnly = await prisma.problemLanguage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemLanguageFindManyArgs>(args?: SelectSubset<T, ProblemLanguageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemLanguage.
     * @param {ProblemLanguageCreateArgs} args - Arguments to create a ProblemLanguage.
     * @example
     * // Create one ProblemLanguage
     * const ProblemLanguage = await prisma.problemLanguage.create({
     *   data: {
     *     // ... data to create a ProblemLanguage
     *   }
     * })
     * 
     */
    create<T extends ProblemLanguageCreateArgs>(args: SelectSubset<T, ProblemLanguageCreateArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemLanguages.
     * @param {ProblemLanguageCreateManyArgs} args - Arguments to create many ProblemLanguages.
     * @example
     * // Create many ProblemLanguages
     * const problemLanguage = await prisma.problemLanguage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemLanguageCreateManyArgs>(args?: SelectSubset<T, ProblemLanguageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemLanguages and returns the data saved in the database.
     * @param {ProblemLanguageCreateManyAndReturnArgs} args - Arguments to create many ProblemLanguages.
     * @example
     * // Create many ProblemLanguages
     * const problemLanguage = await prisma.problemLanguage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemLanguages and only return the `id`
     * const problemLanguageWithIdOnly = await prisma.problemLanguage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemLanguageCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemLanguageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemLanguage.
     * @param {ProblemLanguageDeleteArgs} args - Arguments to delete one ProblemLanguage.
     * @example
     * // Delete one ProblemLanguage
     * const ProblemLanguage = await prisma.problemLanguage.delete({
     *   where: {
     *     // ... filter to delete one ProblemLanguage
     *   }
     * })
     * 
     */
    delete<T extends ProblemLanguageDeleteArgs>(args: SelectSubset<T, ProblemLanguageDeleteArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemLanguage.
     * @param {ProblemLanguageUpdateArgs} args - Arguments to update one ProblemLanguage.
     * @example
     * // Update one ProblemLanguage
     * const problemLanguage = await prisma.problemLanguage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemLanguageUpdateArgs>(args: SelectSubset<T, ProblemLanguageUpdateArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemLanguages.
     * @param {ProblemLanguageDeleteManyArgs} args - Arguments to filter ProblemLanguages to delete.
     * @example
     * // Delete a few ProblemLanguages
     * const { count } = await prisma.problemLanguage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemLanguageDeleteManyArgs>(args?: SelectSubset<T, ProblemLanguageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemLanguages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemLanguageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemLanguages
     * const problemLanguage = await prisma.problemLanguage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemLanguageUpdateManyArgs>(args: SelectSubset<T, ProblemLanguageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemLanguages and returns the data updated in the database.
     * @param {ProblemLanguageUpdateManyAndReturnArgs} args - Arguments to update many ProblemLanguages.
     * @example
     * // Update many ProblemLanguages
     * const problemLanguage = await prisma.problemLanguage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemLanguages and only return the `id`
     * const problemLanguageWithIdOnly = await prisma.problemLanguage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemLanguageUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemLanguageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemLanguage.
     * @param {ProblemLanguageUpsertArgs} args - Arguments to update or create a ProblemLanguage.
     * @example
     * // Update or create a ProblemLanguage
     * const problemLanguage = await prisma.problemLanguage.upsert({
     *   create: {
     *     // ... data to create a ProblemLanguage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemLanguage we want to update
     *   }
     * })
     */
    upsert<T extends ProblemLanguageUpsertArgs>(args: SelectSubset<T, ProblemLanguageUpsertArgs<ExtArgs>>): Prisma__ProblemLanguageClient<$Result.GetResult<Prisma.$ProblemLanguagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemLanguages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemLanguageCountArgs} args - Arguments to filter ProblemLanguages to count.
     * @example
     * // Count the number of ProblemLanguages
     * const count = await prisma.problemLanguage.count({
     *   where: {
     *     // ... the filter for the ProblemLanguages we want to count
     *   }
     * })
    **/
    count<T extends ProblemLanguageCountArgs>(
      args?: Subset<T, ProblemLanguageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemLanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemLanguage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemLanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemLanguageAggregateArgs>(args: Subset<T, ProblemLanguageAggregateArgs>): Prisma.PrismaPromise<GetProblemLanguageAggregateType<T>>

    /**
     * Group by ProblemLanguage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemLanguageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemLanguageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemLanguageGroupByArgs['orderBy'] }
        : { orderBy?: ProblemLanguageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemLanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemLanguageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemLanguage model
   */
  readonly fields: ProblemLanguageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemLanguage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemLanguageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends ProblemsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemsDefaultArgs<ExtArgs>>): Prisma__ProblemsClient<$Result.GetResult<Prisma.$ProblemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemLanguage model
   */
  interface ProblemLanguageFieldRefs {
    readonly id: FieldRef<"ProblemLanguage", 'String'>
    readonly name: FieldRef<"ProblemLanguage", 'String'>
    readonly functionSignature: FieldRef<"ProblemLanguage", 'String'>
    readonly codePrefix: FieldRef<"ProblemLanguage", 'String'>
    readonly starterCode: FieldRef<"ProblemLanguage", 'String'>
    readonly codeSuffix: FieldRef<"ProblemLanguage", 'String'>
    readonly problemId: FieldRef<"ProblemLanguage", 'String'>
    readonly createdAt: FieldRef<"ProblemLanguage", 'DateTime'>
    readonly updatedAt: FieldRef<"ProblemLanguage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProblemLanguage findUnique
   */
  export type ProblemLanguageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * Filter, which ProblemLanguage to fetch.
     */
    where: ProblemLanguageWhereUniqueInput
  }

  /**
   * ProblemLanguage findUniqueOrThrow
   */
  export type ProblemLanguageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * Filter, which ProblemLanguage to fetch.
     */
    where: ProblemLanguageWhereUniqueInput
  }

  /**
   * ProblemLanguage findFirst
   */
  export type ProblemLanguageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * Filter, which ProblemLanguage to fetch.
     */
    where?: ProblemLanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemLanguages to fetch.
     */
    orderBy?: ProblemLanguageOrderByWithRelationInput | ProblemLanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemLanguages.
     */
    cursor?: ProblemLanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemLanguages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemLanguages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemLanguages.
     */
    distinct?: ProblemLanguageScalarFieldEnum | ProblemLanguageScalarFieldEnum[]
  }

  /**
   * ProblemLanguage findFirstOrThrow
   */
  export type ProblemLanguageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * Filter, which ProblemLanguage to fetch.
     */
    where?: ProblemLanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemLanguages to fetch.
     */
    orderBy?: ProblemLanguageOrderByWithRelationInput | ProblemLanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemLanguages.
     */
    cursor?: ProblemLanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemLanguages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemLanguages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemLanguages.
     */
    distinct?: ProblemLanguageScalarFieldEnum | ProblemLanguageScalarFieldEnum[]
  }

  /**
   * ProblemLanguage findMany
   */
  export type ProblemLanguageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * Filter, which ProblemLanguages to fetch.
     */
    where?: ProblemLanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemLanguages to fetch.
     */
    orderBy?: ProblemLanguageOrderByWithRelationInput | ProblemLanguageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemLanguages.
     */
    cursor?: ProblemLanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemLanguages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemLanguages.
     */
    skip?: number
    distinct?: ProblemLanguageScalarFieldEnum | ProblemLanguageScalarFieldEnum[]
  }

  /**
   * ProblemLanguage create
   */
  export type ProblemLanguageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * The data needed to create a ProblemLanguage.
     */
    data: XOR<ProblemLanguageCreateInput, ProblemLanguageUncheckedCreateInput>
  }

  /**
   * ProblemLanguage createMany
   */
  export type ProblemLanguageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemLanguages.
     */
    data: ProblemLanguageCreateManyInput | ProblemLanguageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemLanguage createManyAndReturn
   */
  export type ProblemLanguageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemLanguages.
     */
    data: ProblemLanguageCreateManyInput | ProblemLanguageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemLanguage update
   */
  export type ProblemLanguageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * The data needed to update a ProblemLanguage.
     */
    data: XOR<ProblemLanguageUpdateInput, ProblemLanguageUncheckedUpdateInput>
    /**
     * Choose, which ProblemLanguage to update.
     */
    where: ProblemLanguageWhereUniqueInput
  }

  /**
   * ProblemLanguage updateMany
   */
  export type ProblemLanguageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemLanguages.
     */
    data: XOR<ProblemLanguageUpdateManyMutationInput, ProblemLanguageUncheckedUpdateManyInput>
    /**
     * Filter which ProblemLanguages to update
     */
    where?: ProblemLanguageWhereInput
    /**
     * Limit how many ProblemLanguages to update.
     */
    limit?: number
  }

  /**
   * ProblemLanguage updateManyAndReturn
   */
  export type ProblemLanguageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * The data used to update ProblemLanguages.
     */
    data: XOR<ProblemLanguageUpdateManyMutationInput, ProblemLanguageUncheckedUpdateManyInput>
    /**
     * Filter which ProblemLanguages to update
     */
    where?: ProblemLanguageWhereInput
    /**
     * Limit how many ProblemLanguages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemLanguage upsert
   */
  export type ProblemLanguageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * The filter to search for the ProblemLanguage to update in case it exists.
     */
    where: ProblemLanguageWhereUniqueInput
    /**
     * In case the ProblemLanguage found by the `where` argument doesn't exist, create a new ProblemLanguage with this data.
     */
    create: XOR<ProblemLanguageCreateInput, ProblemLanguageUncheckedCreateInput>
    /**
     * In case the ProblemLanguage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemLanguageUpdateInput, ProblemLanguageUncheckedUpdateInput>
  }

  /**
   * ProblemLanguage delete
   */
  export type ProblemLanguageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
    /**
     * Filter which ProblemLanguage to delete.
     */
    where: ProblemLanguageWhereUniqueInput
  }

  /**
   * ProblemLanguage deleteMany
   */
  export type ProblemLanguageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemLanguages to delete
     */
    where?: ProblemLanguageWhereInput
    /**
     * Limit how many ProblemLanguages to delete.
     */
    limit?: number
  }

  /**
   * ProblemLanguage without action
   */
  export type ProblemLanguageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemLanguage
     */
    select?: ProblemLanguageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemLanguage
     */
    omit?: ProblemLanguageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemLanguageInclude<ExtArgs> | null
  }


  /**
   * Model AssessmentSubmission
   */

  export type AggregateAssessmentSubmission = {
    _count: AssessmentSubmissionCountAggregateOutputType | null
    _avg: AssessmentSubmissionAvgAggregateOutputType | null
    _sum: AssessmentSubmissionSumAggregateOutputType | null
    _min: AssessmentSubmissionMinAggregateOutputType | null
    _max: AssessmentSubmissionMaxAggregateOutputType | null
  }

  export type AssessmentSubmissionAvgAggregateOutputType = {
    totalScore: number | null
    maxScore: number | null
    duration: number | null
    codingScore: number | null
    mcqScore: number | null
    totalProblems: number | null
    problemsAttempted: number | null
    problemsCompleted: number | null
    averageTimePerProblem: number | null
  }

  export type AssessmentSubmissionSumAggregateOutputType = {
    totalScore: number | null
    maxScore: number | null
    duration: number | null
    codingScore: number | null
    mcqScore: number | null
    totalProblems: number | null
    problemsAttempted: number | null
    problemsCompleted: number | null
    averageTimePerProblem: number | null
  }

  export type AssessmentSubmissionMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    assessmentId: string | null
    totalScore: number | null
    maxScore: number | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    status: $Enums.AssessmentSubmissionStatus | null
    codingScore: number | null
    mcqScore: number | null
    totalProblems: number | null
    problemsAttempted: number | null
    problemsCompleted: number | null
    averageTimePerProblem: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentSubmissionMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    assessmentId: string | null
    totalScore: number | null
    maxScore: number | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    status: $Enums.AssessmentSubmissionStatus | null
    codingScore: number | null
    mcqScore: number | null
    totalProblems: number | null
    problemsAttempted: number | null
    problemsCompleted: number | null
    averageTimePerProblem: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentSubmissionCountAggregateOutputType = {
    id: number
    studentId: number
    assessmentId: number
    totalScore: number
    maxScore: number
    startTime: number
    endTime: number
    duration: number
    status: number
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem: number
    submissionDetails: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssessmentSubmissionAvgAggregateInputType = {
    totalScore?: true
    maxScore?: true
    duration?: true
    codingScore?: true
    mcqScore?: true
    totalProblems?: true
    problemsAttempted?: true
    problemsCompleted?: true
    averageTimePerProblem?: true
  }

  export type AssessmentSubmissionSumAggregateInputType = {
    totalScore?: true
    maxScore?: true
    duration?: true
    codingScore?: true
    mcqScore?: true
    totalProblems?: true
    problemsAttempted?: true
    problemsCompleted?: true
    averageTimePerProblem?: true
  }

  export type AssessmentSubmissionMinAggregateInputType = {
    id?: true
    studentId?: true
    assessmentId?: true
    totalScore?: true
    maxScore?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    codingScore?: true
    mcqScore?: true
    totalProblems?: true
    problemsAttempted?: true
    problemsCompleted?: true
    averageTimePerProblem?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentSubmissionMaxAggregateInputType = {
    id?: true
    studentId?: true
    assessmentId?: true
    totalScore?: true
    maxScore?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    codingScore?: true
    mcqScore?: true
    totalProblems?: true
    problemsAttempted?: true
    problemsCompleted?: true
    averageTimePerProblem?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentSubmissionCountAggregateInputType = {
    id?: true
    studentId?: true
    assessmentId?: true
    totalScore?: true
    maxScore?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    codingScore?: true
    mcqScore?: true
    totalProblems?: true
    problemsAttempted?: true
    problemsCompleted?: true
    averageTimePerProblem?: true
    submissionDetails?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssessmentSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentSubmission to aggregate.
     */
    where?: AssessmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubmissions to fetch.
     */
    orderBy?: AssessmentSubmissionOrderByWithRelationInput | AssessmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssessmentSubmissions
    **/
    _count?: true | AssessmentSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentSubmissionMaxAggregateInputType
  }

  export type GetAssessmentSubmissionAggregateType<T extends AssessmentSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessmentSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessmentSubmission[P]>
      : GetScalarType<T[P], AggregateAssessmentSubmission[P]>
  }




  export type AssessmentSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentSubmissionWhereInput
    orderBy?: AssessmentSubmissionOrderByWithAggregationInput | AssessmentSubmissionOrderByWithAggregationInput[]
    by: AssessmentSubmissionScalarFieldEnum[] | AssessmentSubmissionScalarFieldEnum
    having?: AssessmentSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentSubmissionCountAggregateInputType | true
    _avg?: AssessmentSubmissionAvgAggregateInputType
    _sum?: AssessmentSubmissionSumAggregateInputType
    _min?: AssessmentSubmissionMinAggregateInputType
    _max?: AssessmentSubmissionMaxAggregateInputType
  }

  export type AssessmentSubmissionGroupByOutputType = {
    id: string
    studentId: string
    assessmentId: string
    totalScore: number
    maxScore: number
    startTime: Date
    endTime: Date | null
    duration: number | null
    status: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem: number | null
    submissionDetails: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: AssessmentSubmissionCountAggregateOutputType | null
    _avg: AssessmentSubmissionAvgAggregateOutputType | null
    _sum: AssessmentSubmissionSumAggregateOutputType | null
    _min: AssessmentSubmissionMinAggregateOutputType | null
    _max: AssessmentSubmissionMaxAggregateOutputType | null
  }

  type GetAssessmentSubmissionGroupByPayload<T extends AssessmentSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    codingScore?: boolean
    mcqScore?: boolean
    totalProblems?: boolean
    problemsAttempted?: boolean
    problemsCompleted?: boolean
    averageTimePerProblem?: boolean
    submissionDetails?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentSubmission"]>

  export type AssessmentSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    codingScore?: boolean
    mcqScore?: boolean
    totalProblems?: boolean
    problemsAttempted?: boolean
    problemsCompleted?: boolean
    averageTimePerProblem?: boolean
    submissionDetails?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentSubmission"]>

  export type AssessmentSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    codingScore?: boolean
    mcqScore?: boolean
    totalProblems?: boolean
    problemsAttempted?: boolean
    problemsCompleted?: boolean
    averageTimePerProblem?: boolean
    submissionDetails?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentSubmission"]>

  export type AssessmentSubmissionSelectScalar = {
    id?: boolean
    studentId?: boolean
    assessmentId?: boolean
    totalScore?: boolean
    maxScore?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    codingScore?: boolean
    mcqScore?: boolean
    totalProblems?: boolean
    problemsAttempted?: boolean
    problemsCompleted?: boolean
    averageTimePerProblem?: boolean
    submissionDetails?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssessmentSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "assessmentId" | "totalScore" | "maxScore" | "startTime" | "endTime" | "duration" | "status" | "codingScore" | "mcqScore" | "totalProblems" | "problemsAttempted" | "problemsCompleted" | "averageTimePerProblem" | "submissionDetails" | "createdAt" | "updatedAt", ExtArgs["result"]["assessmentSubmission"]>
  export type AssessmentSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }
  export type AssessmentSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }
  export type AssessmentSubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    assessment?: boolean | AssessmentsDefaultArgs<ExtArgs>
  }

  export type $AssessmentSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssessmentSubmission"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      assessment: Prisma.$AssessmentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      assessmentId: string
      totalScore: number
      maxScore: number
      startTime: Date
      endTime: Date | null
      duration: number | null
      status: $Enums.AssessmentSubmissionStatus
      codingScore: number
      mcqScore: number
      totalProblems: number
      problemsAttempted: number
      problemsCompleted: number
      averageTimePerProblem: number | null
      submissionDetails: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assessmentSubmission"]>
    composites: {}
  }

  type AssessmentSubmissionGetPayload<S extends boolean | null | undefined | AssessmentSubmissionDefaultArgs> = $Result.GetResult<Prisma.$AssessmentSubmissionPayload, S>

  type AssessmentSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssessmentSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssessmentSubmissionCountAggregateInputType | true
    }

  export interface AssessmentSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssessmentSubmission'], meta: { name: 'AssessmentSubmission' } }
    /**
     * Find zero or one AssessmentSubmission that matches the filter.
     * @param {AssessmentSubmissionFindUniqueArgs} args - Arguments to find a AssessmentSubmission
     * @example
     * // Get one AssessmentSubmission
     * const assessmentSubmission = await prisma.assessmentSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssessmentSubmissionFindUniqueArgs>(args: SelectSubset<T, AssessmentSubmissionFindUniqueArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssessmentSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssessmentSubmissionFindUniqueOrThrowArgs} args - Arguments to find a AssessmentSubmission
     * @example
     * // Get one AssessmentSubmission
     * const assessmentSubmission = await prisma.assessmentSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssessmentSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, AssessmentSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssessmentSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubmissionFindFirstArgs} args - Arguments to find a AssessmentSubmission
     * @example
     * // Get one AssessmentSubmission
     * const assessmentSubmission = await prisma.assessmentSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssessmentSubmissionFindFirstArgs>(args?: SelectSubset<T, AssessmentSubmissionFindFirstArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssessmentSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubmissionFindFirstOrThrowArgs} args - Arguments to find a AssessmentSubmission
     * @example
     * // Get one AssessmentSubmission
     * const assessmentSubmission = await prisma.assessmentSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssessmentSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, AssessmentSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssessmentSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssessmentSubmissions
     * const assessmentSubmissions = await prisma.assessmentSubmission.findMany()
     * 
     * // Get first 10 AssessmentSubmissions
     * const assessmentSubmissions = await prisma.assessmentSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentSubmissionWithIdOnly = await prisma.assessmentSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssessmentSubmissionFindManyArgs>(args?: SelectSubset<T, AssessmentSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssessmentSubmission.
     * @param {AssessmentSubmissionCreateArgs} args - Arguments to create a AssessmentSubmission.
     * @example
     * // Create one AssessmentSubmission
     * const AssessmentSubmission = await prisma.assessmentSubmission.create({
     *   data: {
     *     // ... data to create a AssessmentSubmission
     *   }
     * })
     * 
     */
    create<T extends AssessmentSubmissionCreateArgs>(args: SelectSubset<T, AssessmentSubmissionCreateArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssessmentSubmissions.
     * @param {AssessmentSubmissionCreateManyArgs} args - Arguments to create many AssessmentSubmissions.
     * @example
     * // Create many AssessmentSubmissions
     * const assessmentSubmission = await prisma.assessmentSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssessmentSubmissionCreateManyArgs>(args?: SelectSubset<T, AssessmentSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssessmentSubmissions and returns the data saved in the database.
     * @param {AssessmentSubmissionCreateManyAndReturnArgs} args - Arguments to create many AssessmentSubmissions.
     * @example
     * // Create many AssessmentSubmissions
     * const assessmentSubmission = await prisma.assessmentSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssessmentSubmissions and only return the `id`
     * const assessmentSubmissionWithIdOnly = await prisma.assessmentSubmission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssessmentSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, AssessmentSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssessmentSubmission.
     * @param {AssessmentSubmissionDeleteArgs} args - Arguments to delete one AssessmentSubmission.
     * @example
     * // Delete one AssessmentSubmission
     * const AssessmentSubmission = await prisma.assessmentSubmission.delete({
     *   where: {
     *     // ... filter to delete one AssessmentSubmission
     *   }
     * })
     * 
     */
    delete<T extends AssessmentSubmissionDeleteArgs>(args: SelectSubset<T, AssessmentSubmissionDeleteArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssessmentSubmission.
     * @param {AssessmentSubmissionUpdateArgs} args - Arguments to update one AssessmentSubmission.
     * @example
     * // Update one AssessmentSubmission
     * const assessmentSubmission = await prisma.assessmentSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssessmentSubmissionUpdateArgs>(args: SelectSubset<T, AssessmentSubmissionUpdateArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssessmentSubmissions.
     * @param {AssessmentSubmissionDeleteManyArgs} args - Arguments to filter AssessmentSubmissions to delete.
     * @example
     * // Delete a few AssessmentSubmissions
     * const { count } = await prisma.assessmentSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssessmentSubmissionDeleteManyArgs>(args?: SelectSubset<T, AssessmentSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssessmentSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssessmentSubmissions
     * const assessmentSubmission = await prisma.assessmentSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssessmentSubmissionUpdateManyArgs>(args: SelectSubset<T, AssessmentSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssessmentSubmissions and returns the data updated in the database.
     * @param {AssessmentSubmissionUpdateManyAndReturnArgs} args - Arguments to update many AssessmentSubmissions.
     * @example
     * // Update many AssessmentSubmissions
     * const assessmentSubmission = await prisma.assessmentSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssessmentSubmissions and only return the `id`
     * const assessmentSubmissionWithIdOnly = await prisma.assessmentSubmission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssessmentSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, AssessmentSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssessmentSubmission.
     * @param {AssessmentSubmissionUpsertArgs} args - Arguments to update or create a AssessmentSubmission.
     * @example
     * // Update or create a AssessmentSubmission
     * const assessmentSubmission = await prisma.assessmentSubmission.upsert({
     *   create: {
     *     // ... data to create a AssessmentSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssessmentSubmission we want to update
     *   }
     * })
     */
    upsert<T extends AssessmentSubmissionUpsertArgs>(args: SelectSubset<T, AssessmentSubmissionUpsertArgs<ExtArgs>>): Prisma__AssessmentSubmissionClient<$Result.GetResult<Prisma.$AssessmentSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssessmentSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubmissionCountArgs} args - Arguments to filter AssessmentSubmissions to count.
     * @example
     * // Count the number of AssessmentSubmissions
     * const count = await prisma.assessmentSubmission.count({
     *   where: {
     *     // ... the filter for the AssessmentSubmissions we want to count
     *   }
     * })
    **/
    count<T extends AssessmentSubmissionCountArgs>(
      args?: Subset<T, AssessmentSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssessmentSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentSubmissionAggregateArgs>(args: Subset<T, AssessmentSubmissionAggregateArgs>): Prisma.PrismaPromise<GetAssessmentSubmissionAggregateType<T>>

    /**
     * Group by AssessmentSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssessmentSubmission model
   */
  readonly fields: AssessmentSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssessmentSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assessment<T extends AssessmentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentsDefaultArgs<ExtArgs>>): Prisma__AssessmentsClient<$Result.GetResult<Prisma.$AssessmentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssessmentSubmission model
   */
  interface AssessmentSubmissionFieldRefs {
    readonly id: FieldRef<"AssessmentSubmission", 'String'>
    readonly studentId: FieldRef<"AssessmentSubmission", 'String'>
    readonly assessmentId: FieldRef<"AssessmentSubmission", 'String'>
    readonly totalScore: FieldRef<"AssessmentSubmission", 'Int'>
    readonly maxScore: FieldRef<"AssessmentSubmission", 'Int'>
    readonly startTime: FieldRef<"AssessmentSubmission", 'DateTime'>
    readonly endTime: FieldRef<"AssessmentSubmission", 'DateTime'>
    readonly duration: FieldRef<"AssessmentSubmission", 'Int'>
    readonly status: FieldRef<"AssessmentSubmission", 'AssessmentSubmissionStatus'>
    readonly codingScore: FieldRef<"AssessmentSubmission", 'Int'>
    readonly mcqScore: FieldRef<"AssessmentSubmission", 'Int'>
    readonly totalProblems: FieldRef<"AssessmentSubmission", 'Int'>
    readonly problemsAttempted: FieldRef<"AssessmentSubmission", 'Int'>
    readonly problemsCompleted: FieldRef<"AssessmentSubmission", 'Int'>
    readonly averageTimePerProblem: FieldRef<"AssessmentSubmission", 'Float'>
    readonly submissionDetails: FieldRef<"AssessmentSubmission", 'Json'>
    readonly createdAt: FieldRef<"AssessmentSubmission", 'DateTime'>
    readonly updatedAt: FieldRef<"AssessmentSubmission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AssessmentSubmission findUnique
   */
  export type AssessmentSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubmission to fetch.
     */
    where: AssessmentSubmissionWhereUniqueInput
  }

  /**
   * AssessmentSubmission findUniqueOrThrow
   */
  export type AssessmentSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubmission to fetch.
     */
    where: AssessmentSubmissionWhereUniqueInput
  }

  /**
   * AssessmentSubmission findFirst
   */
  export type AssessmentSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubmission to fetch.
     */
    where?: AssessmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubmissions to fetch.
     */
    orderBy?: AssessmentSubmissionOrderByWithRelationInput | AssessmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentSubmissions.
     */
    cursor?: AssessmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentSubmissions.
     */
    distinct?: AssessmentSubmissionScalarFieldEnum | AssessmentSubmissionScalarFieldEnum[]
  }

  /**
   * AssessmentSubmission findFirstOrThrow
   */
  export type AssessmentSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubmission to fetch.
     */
    where?: AssessmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubmissions to fetch.
     */
    orderBy?: AssessmentSubmissionOrderByWithRelationInput | AssessmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentSubmissions.
     */
    cursor?: AssessmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentSubmissions.
     */
    distinct?: AssessmentSubmissionScalarFieldEnum | AssessmentSubmissionScalarFieldEnum[]
  }

  /**
   * AssessmentSubmission findMany
   */
  export type AssessmentSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentSubmissions to fetch.
     */
    where?: AssessmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentSubmissions to fetch.
     */
    orderBy?: AssessmentSubmissionOrderByWithRelationInput | AssessmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssessmentSubmissions.
     */
    cursor?: AssessmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentSubmissions.
     */
    skip?: number
    distinct?: AssessmentSubmissionScalarFieldEnum | AssessmentSubmissionScalarFieldEnum[]
  }

  /**
   * AssessmentSubmission create
   */
  export type AssessmentSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a AssessmentSubmission.
     */
    data: XOR<AssessmentSubmissionCreateInput, AssessmentSubmissionUncheckedCreateInput>
  }

  /**
   * AssessmentSubmission createMany
   */
  export type AssessmentSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssessmentSubmissions.
     */
    data: AssessmentSubmissionCreateManyInput | AssessmentSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssessmentSubmission createManyAndReturn
   */
  export type AssessmentSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many AssessmentSubmissions.
     */
    data: AssessmentSubmissionCreateManyInput | AssessmentSubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssessmentSubmission update
   */
  export type AssessmentSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a AssessmentSubmission.
     */
    data: XOR<AssessmentSubmissionUpdateInput, AssessmentSubmissionUncheckedUpdateInput>
    /**
     * Choose, which AssessmentSubmission to update.
     */
    where: AssessmentSubmissionWhereUniqueInput
  }

  /**
   * AssessmentSubmission updateMany
   */
  export type AssessmentSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssessmentSubmissions.
     */
    data: XOR<AssessmentSubmissionUpdateManyMutationInput, AssessmentSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which AssessmentSubmissions to update
     */
    where?: AssessmentSubmissionWhereInput
    /**
     * Limit how many AssessmentSubmissions to update.
     */
    limit?: number
  }

  /**
   * AssessmentSubmission updateManyAndReturn
   */
  export type AssessmentSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update AssessmentSubmissions.
     */
    data: XOR<AssessmentSubmissionUpdateManyMutationInput, AssessmentSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which AssessmentSubmissions to update
     */
    where?: AssessmentSubmissionWhereInput
    /**
     * Limit how many AssessmentSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssessmentSubmission upsert
   */
  export type AssessmentSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the AssessmentSubmission to update in case it exists.
     */
    where: AssessmentSubmissionWhereUniqueInput
    /**
     * In case the AssessmentSubmission found by the `where` argument doesn't exist, create a new AssessmentSubmission with this data.
     */
    create: XOR<AssessmentSubmissionCreateInput, AssessmentSubmissionUncheckedCreateInput>
    /**
     * In case the AssessmentSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentSubmissionUpdateInput, AssessmentSubmissionUncheckedUpdateInput>
  }

  /**
   * AssessmentSubmission delete
   */
  export type AssessmentSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter which AssessmentSubmission to delete.
     */
    where: AssessmentSubmissionWhereUniqueInput
  }

  /**
   * AssessmentSubmission deleteMany
   */
  export type AssessmentSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentSubmissions to delete
     */
    where?: AssessmentSubmissionWhereInput
    /**
     * Limit how many AssessmentSubmissions to delete.
     */
    limit?: number
  }

  /**
   * AssessmentSubmission without action
   */
  export type AssessmentSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentSubmission
     */
    select?: AssessmentSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssessmentSubmission
     */
    omit?: AssessmentSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentSubmissionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    email: 'email',
    name: 'name',
    password: 'password',
    department: 'department',
    PhoneNumber: 'PhoneNumber',
    semester: 'semester',
    batch: 'batch',
    role: 'role',
    isVerified: 'isVerified',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ProfessorScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    department: 'department',
    professorId: 'professorId',
    role: 'role',
    isVerified: 'isVerified',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const ProblemsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    difficulty: 'difficulty',
    score: 'score',
    questionType: 'questionType',
    assessmentId: 'assessmentId',
    professorId: 'professorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemsScalarFieldEnum = (typeof ProblemsScalarFieldEnum)[keyof typeof ProblemsScalarFieldEnum]


  export const QuestionChoiceScalarFieldEnum: {
    id: 'id',
    text: 'text',
    isCorrect: 'isCorrect',
    problemId: 'problemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionChoiceScalarFieldEnum = (typeof QuestionChoiceScalarFieldEnum)[keyof typeof QuestionChoiceScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    language: 'language',
    selectedChoiceId: 'selectedChoiceId',
    status: 'status',
    score: 'score',
    studentId: 'studentId',
    problemId: 'problemId',
    isSubmitted: 'isSubmitted',
    isCorrect: 'isCorrect',
    questionNumber: 'questionNumber',
    questionPreview: 'questionPreview',
    executionTime: 'executionTime',
    memoryUsed: 'memoryUsed',
    errorMessage: 'errorMessage',
    testResults: 'testResults',
    createdAt: 'createdAt'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const AssessmentsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    batch: 'batch',
    departments: 'departments',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    totalQuestions: 'totalQuestions',
    topics: 'topics',
    status: 'status',
    professorId: 'professorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssessmentsScalarFieldEnum = (typeof AssessmentsScalarFieldEnum)[keyof typeof AssessmentsScalarFieldEnum]


  export const TestCasesScalarFieldEnum: {
    id: 'id',
    input: 'input',
    output: 'output',
    isHidden: 'isHidden',
    problemId: 'problemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TestCasesScalarFieldEnum = (typeof TestCasesScalarFieldEnum)[keyof typeof TestCasesScalarFieldEnum]


  export const AttemptTrackerScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    assessmentId: 'assessmentId',
    startTime: 'startTime',
    endTime: 'endTime',
    isCompleted: 'isCompleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AttemptTrackerScalarFieldEnum = (typeof AttemptTrackerScalarFieldEnum)[keyof typeof AttemptTrackerScalarFieldEnum]


  export const ProblemLanguageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    functionSignature: 'functionSignature',
    codePrefix: 'codePrefix',
    starterCode: 'starterCode',
    codeSuffix: 'codeSuffix',
    problemId: 'problemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemLanguageScalarFieldEnum = (typeof ProblemLanguageScalarFieldEnum)[keyof typeof ProblemLanguageScalarFieldEnum]


  export const AssessmentSubmissionScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    assessmentId: 'assessmentId',
    totalScore: 'totalScore',
    maxScore: 'maxScore',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    status: 'status',
    codingScore: 'codingScore',
    mcqScore: 'mcqScore',
    totalProblems: 'totalProblems',
    problemsAttempted: 'problemsAttempted',
    problemsCompleted: 'problemsCompleted',
    averageTimePerProblem: 'averageTimePerProblem',
    submissionDetails: 'submissionDetails',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssessmentSubmissionScalarFieldEnum = (typeof AssessmentSubmissionScalarFieldEnum)[keyof typeof AssessmentSubmissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'DifficultyLevel'
   */
  export type EnumDifficultyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DifficultyLevel'>
    


  /**
   * Reference to a field of type 'DifficultyLevel[]'
   */
  export type ListEnumDifficultyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DifficultyLevel[]'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'QuestionType[]'
   */
  export type ListEnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'AssessmentStatus'
   */
  export type EnumAssessmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssessmentStatus'>
    


  /**
   * Reference to a field of type 'AssessmentStatus[]'
   */
  export type ListEnumAssessmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssessmentStatus[]'>
    


  /**
   * Reference to a field of type 'AssessmentSubmissionStatus'
   */
  export type EnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssessmentSubmissionStatus'>
    


  /**
   * Reference to a field of type 'AssessmentSubmissionStatus[]'
   */
  export type ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssessmentSubmissionStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    studentId?: StringFilter<"Student"> | string
    email?: StringNullableFilter<"Student"> | string | null
    name?: StringNullableFilter<"Student"> | string | null
    password?: StringFilter<"Student"> | string
    department?: StringFilter<"Student"> | string
    PhoneNumber?: StringNullableFilter<"Student"> | string | null
    semester?: IntNullableFilter<"Student"> | number | null
    batch?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    isVerified?: BoolFilter<"Student"> | boolean
    isActive?: BoolFilter<"Student"> | boolean
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    submissions?: SubmissionListRelationFilter
    attempts?: AttemptTrackerListRelationFilter
    assessmentSubmissions?: AssessmentSubmissionListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    department?: SortOrder
    PhoneNumber?: SortOrderInput | SortOrder
    semester?: SortOrderInput | SortOrder
    batch?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submissions?: SubmissionOrderByRelationAggregateInput
    attempts?: AttemptTrackerOrderByRelationAggregateInput
    assessmentSubmissions?: AssessmentSubmissionOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId?: string
    email?: string
    PhoneNumber?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    name?: StringNullableFilter<"Student"> | string | null
    password?: StringFilter<"Student"> | string
    department?: StringFilter<"Student"> | string
    semester?: IntNullableFilter<"Student"> | number | null
    batch?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    isVerified?: BoolFilter<"Student"> | boolean
    isActive?: BoolFilter<"Student"> | boolean
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    submissions?: SubmissionListRelationFilter
    attempts?: AttemptTrackerListRelationFilter
    assessmentSubmissions?: AssessmentSubmissionListRelationFilter
  }, "id" | "studentId" | "email" | "PhoneNumber">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    department?: SortOrder
    PhoneNumber?: SortOrderInput | SortOrder
    semester?: SortOrderInput | SortOrder
    batch?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    studentId?: StringWithAggregatesFilter<"Student"> | string
    email?: StringNullableWithAggregatesFilter<"Student"> | string | null
    name?: StringNullableWithAggregatesFilter<"Student"> | string | null
    password?: StringWithAggregatesFilter<"Student"> | string
    department?: StringWithAggregatesFilter<"Student"> | string
    PhoneNumber?: StringNullableWithAggregatesFilter<"Student"> | string | null
    semester?: IntNullableWithAggregatesFilter<"Student"> | number | null
    batch?: StringWithAggregatesFilter<"Student"> | string
    role?: EnumRoleWithAggregatesFilter<"Student"> | $Enums.Role
    isVerified?: BoolWithAggregatesFilter<"Student"> | boolean
    isActive?: BoolWithAggregatesFilter<"Student"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type ProfessorWhereInput = {
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    id?: StringFilter<"Professor"> | string
    email?: StringFilter<"Professor"> | string
    name?: StringFilter<"Professor"> | string
    password?: StringFilter<"Professor"> | string
    department?: StringFilter<"Professor"> | string
    professorId?: StringFilter<"Professor"> | string
    role?: EnumRoleFilter<"Professor"> | $Enums.Role
    isVerified?: BoolFilter<"Professor"> | boolean
    isActive?: BoolFilter<"Professor"> | boolean
    createdAt?: DateTimeFilter<"Professor"> | Date | string
    updatedAt?: DateTimeFilter<"Professor"> | Date | string
    problems?: ProblemsListRelationFilter
    assessments?: AssessmentsListRelationFilter
  }

  export type ProfessorOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    professorId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problems?: ProblemsOrderByRelationAggregateInput
    assessments?: AssessmentsOrderByRelationAggregateInput
  }

  export type ProfessorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    professorId?: string
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    name?: StringFilter<"Professor"> | string
    password?: StringFilter<"Professor"> | string
    department?: StringFilter<"Professor"> | string
    role?: EnumRoleFilter<"Professor"> | $Enums.Role
    isVerified?: BoolFilter<"Professor"> | boolean
    isActive?: BoolFilter<"Professor"> | boolean
    createdAt?: DateTimeFilter<"Professor"> | Date | string
    updatedAt?: DateTimeFilter<"Professor"> | Date | string
    problems?: ProblemsListRelationFilter
    assessments?: AssessmentsListRelationFilter
  }, "id" | "email" | "professorId">

  export type ProfessorOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    professorId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessorCountOrderByAggregateInput
    _max?: ProfessorMaxOrderByAggregateInput
    _min?: ProfessorMinOrderByAggregateInput
  }

  export type ProfessorScalarWhereWithAggregatesInput = {
    AND?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    OR?: ProfessorScalarWhereWithAggregatesInput[]
    NOT?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Professor"> | string
    email?: StringWithAggregatesFilter<"Professor"> | string
    name?: StringWithAggregatesFilter<"Professor"> | string
    password?: StringWithAggregatesFilter<"Professor"> | string
    department?: StringWithAggregatesFilter<"Professor"> | string
    professorId?: StringWithAggregatesFilter<"Professor"> | string
    role?: EnumRoleWithAggregatesFilter<"Professor"> | $Enums.Role
    isVerified?: BoolWithAggregatesFilter<"Professor"> | boolean
    isActive?: BoolWithAggregatesFilter<"Professor"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Professor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Professor"> | Date | string
  }

  export type ProblemsWhereInput = {
    AND?: ProblemsWhereInput | ProblemsWhereInput[]
    OR?: ProblemsWhereInput[]
    NOT?: ProblemsWhereInput | ProblemsWhereInput[]
    id?: StringFilter<"Problems"> | string
    title?: StringFilter<"Problems"> | string
    description?: StringFilter<"Problems"> | string
    difficulty?: EnumDifficultyLevelFilter<"Problems"> | $Enums.DifficultyLevel
    score?: IntFilter<"Problems"> | number
    questionType?: EnumQuestionTypeFilter<"Problems"> | $Enums.QuestionType
    assessmentId?: StringFilter<"Problems"> | string
    professorId?: StringFilter<"Problems"> | string
    createdAt?: DateTimeFilter<"Problems"> | Date | string
    updatedAt?: DateTimeFilter<"Problems"> | Date | string
    assessment?: XOR<AssessmentsScalarRelationFilter, AssessmentsWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    languages?: ProblemLanguageListRelationFilter
    testCases?: TestCasesListRelationFilter
    choices?: QuestionChoiceListRelationFilter
    submissions?: SubmissionListRelationFilter
  }

  export type ProblemsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    score?: SortOrder
    questionType?: SortOrder
    assessmentId?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assessment?: AssessmentsOrderByWithRelationInput
    professor?: ProfessorOrderByWithRelationInput
    languages?: ProblemLanguageOrderByRelationAggregateInput
    testCases?: TestCasesOrderByRelationAggregateInput
    choices?: QuestionChoiceOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
  }

  export type ProblemsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProblemsWhereInput | ProblemsWhereInput[]
    OR?: ProblemsWhereInput[]
    NOT?: ProblemsWhereInput | ProblemsWhereInput[]
    title?: StringFilter<"Problems"> | string
    description?: StringFilter<"Problems"> | string
    difficulty?: EnumDifficultyLevelFilter<"Problems"> | $Enums.DifficultyLevel
    score?: IntFilter<"Problems"> | number
    questionType?: EnumQuestionTypeFilter<"Problems"> | $Enums.QuestionType
    assessmentId?: StringFilter<"Problems"> | string
    professorId?: StringFilter<"Problems"> | string
    createdAt?: DateTimeFilter<"Problems"> | Date | string
    updatedAt?: DateTimeFilter<"Problems"> | Date | string
    assessment?: XOR<AssessmentsScalarRelationFilter, AssessmentsWhereInput>
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
    languages?: ProblemLanguageListRelationFilter
    testCases?: TestCasesListRelationFilter
    choices?: QuestionChoiceListRelationFilter
    submissions?: SubmissionListRelationFilter
  }, "id">

  export type ProblemsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    score?: SortOrder
    questionType?: SortOrder
    assessmentId?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemsCountOrderByAggregateInput
    _avg?: ProblemsAvgOrderByAggregateInput
    _max?: ProblemsMaxOrderByAggregateInput
    _min?: ProblemsMinOrderByAggregateInput
    _sum?: ProblemsSumOrderByAggregateInput
  }

  export type ProblemsScalarWhereWithAggregatesInput = {
    AND?: ProblemsScalarWhereWithAggregatesInput | ProblemsScalarWhereWithAggregatesInput[]
    OR?: ProblemsScalarWhereWithAggregatesInput[]
    NOT?: ProblemsScalarWhereWithAggregatesInput | ProblemsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Problems"> | string
    title?: StringWithAggregatesFilter<"Problems"> | string
    description?: StringWithAggregatesFilter<"Problems"> | string
    difficulty?: EnumDifficultyLevelWithAggregatesFilter<"Problems"> | $Enums.DifficultyLevel
    score?: IntWithAggregatesFilter<"Problems"> | number
    questionType?: EnumQuestionTypeWithAggregatesFilter<"Problems"> | $Enums.QuestionType
    assessmentId?: StringWithAggregatesFilter<"Problems"> | string
    professorId?: StringWithAggregatesFilter<"Problems"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Problems"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Problems"> | Date | string
  }

  export type QuestionChoiceWhereInput = {
    AND?: QuestionChoiceWhereInput | QuestionChoiceWhereInput[]
    OR?: QuestionChoiceWhereInput[]
    NOT?: QuestionChoiceWhereInput | QuestionChoiceWhereInput[]
    id?: StringFilter<"QuestionChoice"> | string
    text?: StringFilter<"QuestionChoice"> | string
    isCorrect?: BoolFilter<"QuestionChoice"> | boolean
    problemId?: StringFilter<"QuestionChoice"> | string
    createdAt?: DateTimeFilter<"QuestionChoice"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionChoice"> | Date | string
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }

  export type QuestionChoiceOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problem?: ProblemsOrderByWithRelationInput
  }

  export type QuestionChoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionChoiceWhereInput | QuestionChoiceWhereInput[]
    OR?: QuestionChoiceWhereInput[]
    NOT?: QuestionChoiceWhereInput | QuestionChoiceWhereInput[]
    text?: StringFilter<"QuestionChoice"> | string
    isCorrect?: BoolFilter<"QuestionChoice"> | boolean
    problemId?: StringFilter<"QuestionChoice"> | string
    createdAt?: DateTimeFilter<"QuestionChoice"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionChoice"> | Date | string
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }, "id">

  export type QuestionChoiceOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionChoiceCountOrderByAggregateInput
    _max?: QuestionChoiceMaxOrderByAggregateInput
    _min?: QuestionChoiceMinOrderByAggregateInput
  }

  export type QuestionChoiceScalarWhereWithAggregatesInput = {
    AND?: QuestionChoiceScalarWhereWithAggregatesInput | QuestionChoiceScalarWhereWithAggregatesInput[]
    OR?: QuestionChoiceScalarWhereWithAggregatesInput[]
    NOT?: QuestionChoiceScalarWhereWithAggregatesInput | QuestionChoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionChoice"> | string
    text?: StringWithAggregatesFilter<"QuestionChoice"> | string
    isCorrect?: BoolWithAggregatesFilter<"QuestionChoice"> | boolean
    problemId?: StringWithAggregatesFilter<"QuestionChoice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"QuestionChoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionChoice"> | Date | string
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    code?: StringNullableFilter<"Submission"> | string | null
    language?: StringNullableFilter<"Submission"> | string | null
    selectedChoiceId?: StringNullableFilter<"Submission"> | string | null
    status?: EnumStatusFilter<"Submission"> | $Enums.Status
    score?: IntFilter<"Submission"> | number
    studentId?: StringFilter<"Submission"> | string
    problemId?: StringFilter<"Submission"> | string
    isSubmitted?: BoolFilter<"Submission"> | boolean
    isCorrect?: BoolNullableFilter<"Submission"> | boolean | null
    questionNumber?: IntNullableFilter<"Submission"> | number | null
    questionPreview?: StringNullableFilter<"Submission"> | string | null
    executionTime?: IntNullableFilter<"Submission"> | number | null
    memoryUsed?: IntNullableFilter<"Submission"> | number | null
    errorMessage?: StringNullableFilter<"Submission"> | string | null
    testResults?: JsonNullableFilter<"Submission">
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    selectedChoiceId?: SortOrderInput | SortOrder
    status?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    problemId?: SortOrder
    isSubmitted?: SortOrder
    isCorrect?: SortOrderInput | SortOrder
    questionNumber?: SortOrderInput | SortOrder
    questionPreview?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    memoryUsed?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    testResults?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    problem?: ProblemsOrderByWithRelationInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId_problemId?: SubmissionStudentIdProblemIdCompoundUniqueInput
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    code?: StringNullableFilter<"Submission"> | string | null
    language?: StringNullableFilter<"Submission"> | string | null
    selectedChoiceId?: StringNullableFilter<"Submission"> | string | null
    status?: EnumStatusFilter<"Submission"> | $Enums.Status
    score?: IntFilter<"Submission"> | number
    studentId?: StringFilter<"Submission"> | string
    problemId?: StringFilter<"Submission"> | string
    isSubmitted?: BoolFilter<"Submission"> | boolean
    isCorrect?: BoolNullableFilter<"Submission"> | boolean | null
    questionNumber?: IntNullableFilter<"Submission"> | number | null
    questionPreview?: StringNullableFilter<"Submission"> | string | null
    executionTime?: IntNullableFilter<"Submission"> | number | null
    memoryUsed?: IntNullableFilter<"Submission"> | number | null
    errorMessage?: StringNullableFilter<"Submission"> | string | null
    testResults?: JsonNullableFilter<"Submission">
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }, "id" | "studentId_problemId">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    selectedChoiceId?: SortOrderInput | SortOrder
    status?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    problemId?: SortOrder
    isSubmitted?: SortOrder
    isCorrect?: SortOrderInput | SortOrder
    questionNumber?: SortOrderInput | SortOrder
    questionPreview?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    memoryUsed?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    testResults?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _avg?: SubmissionAvgOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
    _sum?: SubmissionSumOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    code?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    language?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    selectedChoiceId?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    status?: EnumStatusWithAggregatesFilter<"Submission"> | $Enums.Status
    score?: IntWithAggregatesFilter<"Submission"> | number
    studentId?: StringWithAggregatesFilter<"Submission"> | string
    problemId?: StringWithAggregatesFilter<"Submission"> | string
    isSubmitted?: BoolWithAggregatesFilter<"Submission"> | boolean
    isCorrect?: BoolNullableWithAggregatesFilter<"Submission"> | boolean | null
    questionNumber?: IntNullableWithAggregatesFilter<"Submission"> | number | null
    questionPreview?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    executionTime?: IntNullableWithAggregatesFilter<"Submission"> | number | null
    memoryUsed?: IntNullableWithAggregatesFilter<"Submission"> | number | null
    errorMessage?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    testResults?: JsonNullableWithAggregatesFilter<"Submission">
    createdAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type AssessmentsWhereInput = {
    AND?: AssessmentsWhereInput | AssessmentsWhereInput[]
    OR?: AssessmentsWhereInput[]
    NOT?: AssessmentsWhereInput | AssessmentsWhereInput[]
    id?: StringFilter<"Assessments"> | string
    title?: StringFilter<"Assessments"> | string
    batch?: StringNullableListFilter<"Assessments">
    departments?: StringNullableListFilter<"Assessments">
    startTime?: DateTimeFilter<"Assessments"> | Date | string
    endTime?: DateTimeFilter<"Assessments"> | Date | string
    duration?: IntFilter<"Assessments"> | number
    totalQuestions?: IntFilter<"Assessments"> | number
    topics?: StringNullableListFilter<"Assessments">
    status?: EnumAssessmentStatusFilter<"Assessments"> | $Enums.AssessmentStatus
    professorId?: StringFilter<"Assessments"> | string
    createdAt?: DateTimeFilter<"Assessments"> | Date | string
    updatedAt?: DateTimeFilter<"Assessments"> | Date | string
    problems?: ProblemsListRelationFilter
    attempts?: AttemptTrackerListRelationFilter
    submissions?: AssessmentSubmissionListRelationFilter
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
  }

  export type AssessmentsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    batch?: SortOrder
    departments?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    topics?: SortOrder
    status?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problems?: ProblemsOrderByRelationAggregateInput
    attempts?: AttemptTrackerOrderByRelationAggregateInput
    submissions?: AssessmentSubmissionOrderByRelationAggregateInput
    professor?: ProfessorOrderByWithRelationInput
  }

  export type AssessmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentsWhereInput | AssessmentsWhereInput[]
    OR?: AssessmentsWhereInput[]
    NOT?: AssessmentsWhereInput | AssessmentsWhereInput[]
    title?: StringFilter<"Assessments"> | string
    batch?: StringNullableListFilter<"Assessments">
    departments?: StringNullableListFilter<"Assessments">
    startTime?: DateTimeFilter<"Assessments"> | Date | string
    endTime?: DateTimeFilter<"Assessments"> | Date | string
    duration?: IntFilter<"Assessments"> | number
    totalQuestions?: IntFilter<"Assessments"> | number
    topics?: StringNullableListFilter<"Assessments">
    status?: EnumAssessmentStatusFilter<"Assessments"> | $Enums.AssessmentStatus
    professorId?: StringFilter<"Assessments"> | string
    createdAt?: DateTimeFilter<"Assessments"> | Date | string
    updatedAt?: DateTimeFilter<"Assessments"> | Date | string
    problems?: ProblemsListRelationFilter
    attempts?: AttemptTrackerListRelationFilter
    submissions?: AssessmentSubmissionListRelationFilter
    professor?: XOR<ProfessorScalarRelationFilter, ProfessorWhereInput>
  }, "id">

  export type AssessmentsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    batch?: SortOrder
    departments?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    topics?: SortOrder
    status?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssessmentsCountOrderByAggregateInput
    _avg?: AssessmentsAvgOrderByAggregateInput
    _max?: AssessmentsMaxOrderByAggregateInput
    _min?: AssessmentsMinOrderByAggregateInput
    _sum?: AssessmentsSumOrderByAggregateInput
  }

  export type AssessmentsScalarWhereWithAggregatesInput = {
    AND?: AssessmentsScalarWhereWithAggregatesInput | AssessmentsScalarWhereWithAggregatesInput[]
    OR?: AssessmentsScalarWhereWithAggregatesInput[]
    NOT?: AssessmentsScalarWhereWithAggregatesInput | AssessmentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assessments"> | string
    title?: StringWithAggregatesFilter<"Assessments"> | string
    batch?: StringNullableListFilter<"Assessments">
    departments?: StringNullableListFilter<"Assessments">
    startTime?: DateTimeWithAggregatesFilter<"Assessments"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Assessments"> | Date | string
    duration?: IntWithAggregatesFilter<"Assessments"> | number
    totalQuestions?: IntWithAggregatesFilter<"Assessments"> | number
    topics?: StringNullableListFilter<"Assessments">
    status?: EnumAssessmentStatusWithAggregatesFilter<"Assessments"> | $Enums.AssessmentStatus
    professorId?: StringWithAggregatesFilter<"Assessments"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Assessments"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Assessments"> | Date | string
  }

  export type TestCasesWhereInput = {
    AND?: TestCasesWhereInput | TestCasesWhereInput[]
    OR?: TestCasesWhereInput[]
    NOT?: TestCasesWhereInput | TestCasesWhereInput[]
    id?: StringFilter<"TestCases"> | string
    input?: StringFilter<"TestCases"> | string
    output?: StringFilter<"TestCases"> | string
    isHidden?: BoolFilter<"TestCases"> | boolean
    problemId?: StringFilter<"TestCases"> | string
    createdAt?: DateTimeFilter<"TestCases"> | Date | string
    updatedAt?: DateTimeFilter<"TestCases"> | Date | string
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }

  export type TestCasesOrderByWithRelationInput = {
    id?: SortOrder
    input?: SortOrder
    output?: SortOrder
    isHidden?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problem?: ProblemsOrderByWithRelationInput
  }

  export type TestCasesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestCasesWhereInput | TestCasesWhereInput[]
    OR?: TestCasesWhereInput[]
    NOT?: TestCasesWhereInput | TestCasesWhereInput[]
    input?: StringFilter<"TestCases"> | string
    output?: StringFilter<"TestCases"> | string
    isHidden?: BoolFilter<"TestCases"> | boolean
    problemId?: StringFilter<"TestCases"> | string
    createdAt?: DateTimeFilter<"TestCases"> | Date | string
    updatedAt?: DateTimeFilter<"TestCases"> | Date | string
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }, "id">

  export type TestCasesOrderByWithAggregationInput = {
    id?: SortOrder
    input?: SortOrder
    output?: SortOrder
    isHidden?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TestCasesCountOrderByAggregateInput
    _max?: TestCasesMaxOrderByAggregateInput
    _min?: TestCasesMinOrderByAggregateInput
  }

  export type TestCasesScalarWhereWithAggregatesInput = {
    AND?: TestCasesScalarWhereWithAggregatesInput | TestCasesScalarWhereWithAggregatesInput[]
    OR?: TestCasesScalarWhereWithAggregatesInput[]
    NOT?: TestCasesScalarWhereWithAggregatesInput | TestCasesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestCases"> | string
    input?: StringWithAggregatesFilter<"TestCases"> | string
    output?: StringWithAggregatesFilter<"TestCases"> | string
    isHidden?: BoolWithAggregatesFilter<"TestCases"> | boolean
    problemId?: StringWithAggregatesFilter<"TestCases"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TestCases"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TestCases"> | Date | string
  }

  export type AttemptTrackerWhereInput = {
    AND?: AttemptTrackerWhereInput | AttemptTrackerWhereInput[]
    OR?: AttemptTrackerWhereInput[]
    NOT?: AttemptTrackerWhereInput | AttemptTrackerWhereInput[]
    id?: StringFilter<"AttemptTracker"> | string
    studentId?: StringFilter<"AttemptTracker"> | string
    assessmentId?: StringFilter<"AttemptTracker"> | string
    startTime?: DateTimeFilter<"AttemptTracker"> | Date | string
    endTime?: DateTimeNullableFilter<"AttemptTracker"> | Date | string | null
    isCompleted?: BoolFilter<"AttemptTracker"> | boolean
    createdAt?: DateTimeFilter<"AttemptTracker"> | Date | string
    updatedAt?: DateTimeFilter<"AttemptTracker"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    assessment?: XOR<AssessmentsScalarRelationFilter, AssessmentsWhereInput>
  }

  export type AttemptTrackerOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    assessment?: AssessmentsOrderByWithRelationInput
  }

  export type AttemptTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId_assessmentId?: AttemptTrackerStudentIdAssessmentIdCompoundUniqueInput
    AND?: AttemptTrackerWhereInput | AttemptTrackerWhereInput[]
    OR?: AttemptTrackerWhereInput[]
    NOT?: AttemptTrackerWhereInput | AttemptTrackerWhereInput[]
    studentId?: StringFilter<"AttemptTracker"> | string
    assessmentId?: StringFilter<"AttemptTracker"> | string
    startTime?: DateTimeFilter<"AttemptTracker"> | Date | string
    endTime?: DateTimeNullableFilter<"AttemptTracker"> | Date | string | null
    isCompleted?: BoolFilter<"AttemptTracker"> | boolean
    createdAt?: DateTimeFilter<"AttemptTracker"> | Date | string
    updatedAt?: DateTimeFilter<"AttemptTracker"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    assessment?: XOR<AssessmentsScalarRelationFilter, AssessmentsWhereInput>
  }, "id" | "studentId_assessmentId">

  export type AttemptTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AttemptTrackerCountOrderByAggregateInput
    _max?: AttemptTrackerMaxOrderByAggregateInput
    _min?: AttemptTrackerMinOrderByAggregateInput
  }

  export type AttemptTrackerScalarWhereWithAggregatesInput = {
    AND?: AttemptTrackerScalarWhereWithAggregatesInput | AttemptTrackerScalarWhereWithAggregatesInput[]
    OR?: AttemptTrackerScalarWhereWithAggregatesInput[]
    NOT?: AttemptTrackerScalarWhereWithAggregatesInput | AttemptTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AttemptTracker"> | string
    studentId?: StringWithAggregatesFilter<"AttemptTracker"> | string
    assessmentId?: StringWithAggregatesFilter<"AttemptTracker"> | string
    startTime?: DateTimeWithAggregatesFilter<"AttemptTracker"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"AttemptTracker"> | Date | string | null
    isCompleted?: BoolWithAggregatesFilter<"AttemptTracker"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AttemptTracker"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AttemptTracker"> | Date | string
  }

  export type ProblemLanguageWhereInput = {
    AND?: ProblemLanguageWhereInput | ProblemLanguageWhereInput[]
    OR?: ProblemLanguageWhereInput[]
    NOT?: ProblemLanguageWhereInput | ProblemLanguageWhereInput[]
    id?: StringFilter<"ProblemLanguage"> | string
    name?: StringFilter<"ProblemLanguage"> | string
    functionSignature?: StringFilter<"ProblemLanguage"> | string
    codePrefix?: StringFilter<"ProblemLanguage"> | string
    starterCode?: StringFilter<"ProblemLanguage"> | string
    codeSuffix?: StringFilter<"ProblemLanguage"> | string
    problemId?: StringFilter<"ProblemLanguage"> | string
    createdAt?: DateTimeFilter<"ProblemLanguage"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemLanguage"> | Date | string
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }

  export type ProblemLanguageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    functionSignature?: SortOrder
    codePrefix?: SortOrder
    starterCode?: SortOrder
    codeSuffix?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problem?: ProblemsOrderByWithRelationInput
  }

  export type ProblemLanguageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_problemId?: ProblemLanguageNameProblemIdCompoundUniqueInput
    AND?: ProblemLanguageWhereInput | ProblemLanguageWhereInput[]
    OR?: ProblemLanguageWhereInput[]
    NOT?: ProblemLanguageWhereInput | ProblemLanguageWhereInput[]
    name?: StringFilter<"ProblemLanguage"> | string
    functionSignature?: StringFilter<"ProblemLanguage"> | string
    codePrefix?: StringFilter<"ProblemLanguage"> | string
    starterCode?: StringFilter<"ProblemLanguage"> | string
    codeSuffix?: StringFilter<"ProblemLanguage"> | string
    problemId?: StringFilter<"ProblemLanguage"> | string
    createdAt?: DateTimeFilter<"ProblemLanguage"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemLanguage"> | Date | string
    problem?: XOR<ProblemsScalarRelationFilter, ProblemsWhereInput>
  }, "id" | "name_problemId">

  export type ProblemLanguageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    functionSignature?: SortOrder
    codePrefix?: SortOrder
    starterCode?: SortOrder
    codeSuffix?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemLanguageCountOrderByAggregateInput
    _max?: ProblemLanguageMaxOrderByAggregateInput
    _min?: ProblemLanguageMinOrderByAggregateInput
  }

  export type ProblemLanguageScalarWhereWithAggregatesInput = {
    AND?: ProblemLanguageScalarWhereWithAggregatesInput | ProblemLanguageScalarWhereWithAggregatesInput[]
    OR?: ProblemLanguageScalarWhereWithAggregatesInput[]
    NOT?: ProblemLanguageScalarWhereWithAggregatesInput | ProblemLanguageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemLanguage"> | string
    name?: StringWithAggregatesFilter<"ProblemLanguage"> | string
    functionSignature?: StringWithAggregatesFilter<"ProblemLanguage"> | string
    codePrefix?: StringWithAggregatesFilter<"ProblemLanguage"> | string
    starterCode?: StringWithAggregatesFilter<"ProblemLanguage"> | string
    codeSuffix?: StringWithAggregatesFilter<"ProblemLanguage"> | string
    problemId?: StringWithAggregatesFilter<"ProblemLanguage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProblemLanguage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProblemLanguage"> | Date | string
  }

  export type AssessmentSubmissionWhereInput = {
    AND?: AssessmentSubmissionWhereInput | AssessmentSubmissionWhereInput[]
    OR?: AssessmentSubmissionWhereInput[]
    NOT?: AssessmentSubmissionWhereInput | AssessmentSubmissionWhereInput[]
    id?: StringFilter<"AssessmentSubmission"> | string
    studentId?: StringFilter<"AssessmentSubmission"> | string
    assessmentId?: StringFilter<"AssessmentSubmission"> | string
    totalScore?: IntFilter<"AssessmentSubmission"> | number
    maxScore?: IntFilter<"AssessmentSubmission"> | number
    startTime?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    endTime?: DateTimeNullableFilter<"AssessmentSubmission"> | Date | string | null
    duration?: IntNullableFilter<"AssessmentSubmission"> | number | null
    status?: EnumAssessmentSubmissionStatusFilter<"AssessmentSubmission"> | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFilter<"AssessmentSubmission"> | number
    mcqScore?: IntFilter<"AssessmentSubmission"> | number
    totalProblems?: IntFilter<"AssessmentSubmission"> | number
    problemsAttempted?: IntFilter<"AssessmentSubmission"> | number
    problemsCompleted?: IntFilter<"AssessmentSubmission"> | number
    averageTimePerProblem?: FloatNullableFilter<"AssessmentSubmission"> | number | null
    submissionDetails?: JsonNullableFilter<"AssessmentSubmission">
    createdAt?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    assessment?: XOR<AssessmentsScalarRelationFilter, AssessmentsWhereInput>
  }

  export type AssessmentSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    status?: SortOrder
    codingScore?: SortOrder
    mcqScore?: SortOrder
    totalProblems?: SortOrder
    problemsAttempted?: SortOrder
    problemsCompleted?: SortOrder
    averageTimePerProblem?: SortOrderInput | SortOrder
    submissionDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: StudentOrderByWithRelationInput
    assessment?: AssessmentsOrderByWithRelationInput
  }

  export type AssessmentSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId_assessmentId?: AssessmentSubmissionStudentIdAssessmentIdCompoundUniqueInput
    AND?: AssessmentSubmissionWhereInput | AssessmentSubmissionWhereInput[]
    OR?: AssessmentSubmissionWhereInput[]
    NOT?: AssessmentSubmissionWhereInput | AssessmentSubmissionWhereInput[]
    studentId?: StringFilter<"AssessmentSubmission"> | string
    assessmentId?: StringFilter<"AssessmentSubmission"> | string
    totalScore?: IntFilter<"AssessmentSubmission"> | number
    maxScore?: IntFilter<"AssessmentSubmission"> | number
    startTime?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    endTime?: DateTimeNullableFilter<"AssessmentSubmission"> | Date | string | null
    duration?: IntNullableFilter<"AssessmentSubmission"> | number | null
    status?: EnumAssessmentSubmissionStatusFilter<"AssessmentSubmission"> | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFilter<"AssessmentSubmission"> | number
    mcqScore?: IntFilter<"AssessmentSubmission"> | number
    totalProblems?: IntFilter<"AssessmentSubmission"> | number
    problemsAttempted?: IntFilter<"AssessmentSubmission"> | number
    problemsCompleted?: IntFilter<"AssessmentSubmission"> | number
    averageTimePerProblem?: FloatNullableFilter<"AssessmentSubmission"> | number | null
    submissionDetails?: JsonNullableFilter<"AssessmentSubmission">
    createdAt?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    assessment?: XOR<AssessmentsScalarRelationFilter, AssessmentsWhereInput>
  }, "id" | "studentId_assessmentId">

  export type AssessmentSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    status?: SortOrder
    codingScore?: SortOrder
    mcqScore?: SortOrder
    totalProblems?: SortOrder
    problemsAttempted?: SortOrder
    problemsCompleted?: SortOrder
    averageTimePerProblem?: SortOrderInput | SortOrder
    submissionDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssessmentSubmissionCountOrderByAggregateInput
    _avg?: AssessmentSubmissionAvgOrderByAggregateInput
    _max?: AssessmentSubmissionMaxOrderByAggregateInput
    _min?: AssessmentSubmissionMinOrderByAggregateInput
    _sum?: AssessmentSubmissionSumOrderByAggregateInput
  }

  export type AssessmentSubmissionScalarWhereWithAggregatesInput = {
    AND?: AssessmentSubmissionScalarWhereWithAggregatesInput | AssessmentSubmissionScalarWhereWithAggregatesInput[]
    OR?: AssessmentSubmissionScalarWhereWithAggregatesInput[]
    NOT?: AssessmentSubmissionScalarWhereWithAggregatesInput | AssessmentSubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssessmentSubmission"> | string
    studentId?: StringWithAggregatesFilter<"AssessmentSubmission"> | string
    assessmentId?: StringWithAggregatesFilter<"AssessmentSubmission"> | string
    totalScore?: IntWithAggregatesFilter<"AssessmentSubmission"> | number
    maxScore?: IntWithAggregatesFilter<"AssessmentSubmission"> | number
    startTime?: DateTimeWithAggregatesFilter<"AssessmentSubmission"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"AssessmentSubmission"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"AssessmentSubmission"> | number | null
    status?: EnumAssessmentSubmissionStatusWithAggregatesFilter<"AssessmentSubmission"> | $Enums.AssessmentSubmissionStatus
    codingScore?: IntWithAggregatesFilter<"AssessmentSubmission"> | number
    mcqScore?: IntWithAggregatesFilter<"AssessmentSubmission"> | number
    totalProblems?: IntWithAggregatesFilter<"AssessmentSubmission"> | number
    problemsAttempted?: IntWithAggregatesFilter<"AssessmentSubmission"> | number
    problemsCompleted?: IntWithAggregatesFilter<"AssessmentSubmission"> | number
    averageTimePerProblem?: FloatNullableWithAggregatesFilter<"AssessmentSubmission"> | number | null
    submissionDetails?: JsonNullableWithAggregatesFilter<"AssessmentSubmission">
    createdAt?: DateTimeWithAggregatesFilter<"AssessmentSubmission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AssessmentSubmission"> | Date | string
  }

  export type StudentCreateInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    attempts?: AttemptTrackerCreateNestedManyWithoutStudentInput
    assessmentSubmissions?: AssessmentSubmissionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    attempts?: AttemptTrackerUncheckedCreateNestedManyWithoutStudentInput
    assessmentSubmissions?: AssessmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    attempts?: AttemptTrackerUpdateManyWithoutStudentNestedInput
    assessmentSubmissions?: AssessmentSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    attempts?: AttemptTrackerUncheckedUpdateManyWithoutStudentNestedInput
    assessmentSubmissions?: AssessmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessorCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsCreateNestedManyWithoutProfessorInput
    assessments?: AssessmentsCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsUncheckedCreateNestedManyWithoutProfessorInput
    assessments?: AssessmentsUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUpdateManyWithoutProfessorNestedInput
    assessments?: AssessmentsUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUncheckedUpdateManyWithoutProfessorNestedInput
    assessments?: AssessmentsUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemsCreateInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutProblemsInput
    professor: ProfessorCreateNestedOneWithoutProblemsInput
    languages?: ProblemLanguageCreateNestedManyWithoutProblemInput
    testCases?: TestCasesCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceCreateNestedManyWithoutProblemInput
    submissions?: SubmissionCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    languages?: ProblemLanguageUncheckedCreateNestedManyWithoutProblemInput
    testCases?: TestCasesUncheckedCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceUncheckedCreateNestedManyWithoutProblemInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutProblemsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutProblemsNestedInput
    languages?: ProblemLanguageUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    languages?: ProblemLanguageUncheckedUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUncheckedUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUncheckedUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsCreateManyInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionChoiceCreateInput = {
    id?: string
    text: string
    isCorrect?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemsCreateNestedOneWithoutChoicesInput
  }

  export type QuestionChoiceUncheckedCreateInput = {
    id?: string
    text: string
    isCorrect?: boolean
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionChoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemsUpdateOneRequiredWithoutChoicesNestedInput
  }

  export type QuestionChoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionChoiceCreateManyInput = {
    id?: string
    text: string
    isCorrect?: boolean
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionChoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionChoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutSubmissionsInput
    problem: ProblemsCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    studentId: string
    problemId: string
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutSubmissionsNestedInput
    problem?: ProblemsUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateManyInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    studentId: string
    problemId: string
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentsCreateInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsCreateNestedManyWithoutAssessmentInput
    attempts?: AttemptTrackerCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionCreateNestedManyWithoutAssessmentInput
    professor: ProfessorCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentsUncheckedCreateInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsUncheckedCreateNestedManyWithoutAssessmentInput
    attempts?: AttemptTrackerUncheckedCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUpdateManyWithoutAssessmentNestedInput
    attempts?: AttemptTrackerUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUpdateManyWithoutAssessmentNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutAssessmentsNestedInput
  }

  export type AssessmentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUncheckedUpdateManyWithoutAssessmentNestedInput
    attempts?: AttemptTrackerUncheckedUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentsCreateManyInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCasesCreateInput = {
    id?: string
    input: string
    output: string
    isHidden: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemsCreateNestedOneWithoutTestCasesInput
  }

  export type TestCasesUncheckedCreateInput = {
    id?: string
    input: string
    output: string
    isHidden: boolean
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCasesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemsUpdateOneRequiredWithoutTestCasesNestedInput
  }

  export type TestCasesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCasesCreateManyInput = {
    id?: string
    input: string
    output: string
    isHidden: boolean
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCasesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCasesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptTrackerCreateInput = {
    id?: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAttemptsInput
    assessment: AssessmentsCreateNestedOneWithoutAttemptsInput
  }

  export type AttemptTrackerUncheckedCreateInput = {
    id?: string
    studentId: string
    assessmentId: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttemptTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAttemptsNestedInput
    assessment?: AssessmentsUpdateOneRequiredWithoutAttemptsNestedInput
  }

  export type AttemptTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptTrackerCreateManyInput = {
    id?: string
    studentId: string
    assessmentId: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttemptTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemLanguageCreateInput = {
    id?: string
    name: string
    functionSignature: string
    codePrefix: string
    starterCode: string
    codeSuffix: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemsCreateNestedOneWithoutLanguagesInput
  }

  export type ProblemLanguageUncheckedCreateInput = {
    id?: string
    name: string
    functionSignature: string
    codePrefix: string
    starterCode: string
    codeSuffix: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemLanguageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    functionSignature?: StringFieldUpdateOperationsInput | string
    codePrefix?: StringFieldUpdateOperationsInput | string
    starterCode?: StringFieldUpdateOperationsInput | string
    codeSuffix?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemsUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type ProblemLanguageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    functionSignature?: StringFieldUpdateOperationsInput | string
    codePrefix?: StringFieldUpdateOperationsInput | string
    starterCode?: StringFieldUpdateOperationsInput | string
    codeSuffix?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemLanguageCreateManyInput = {
    id?: string
    name: string
    functionSignature: string
    codePrefix: string
    starterCode: string
    codeSuffix: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemLanguageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    functionSignature?: StringFieldUpdateOperationsInput | string
    codePrefix?: StringFieldUpdateOperationsInput | string
    starterCode?: StringFieldUpdateOperationsInput | string
    codeSuffix?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemLanguageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    functionSignature?: StringFieldUpdateOperationsInput | string
    codePrefix?: StringFieldUpdateOperationsInput | string
    starterCode?: StringFieldUpdateOperationsInput | string
    codeSuffix?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentSubmissionCreateInput = {
    id?: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAssessmentSubmissionsInput
    assessment: AssessmentsCreateNestedOneWithoutSubmissionsInput
  }

  export type AssessmentSubmissionUncheckedCreateInput = {
    id?: string
    studentId: string
    assessmentId: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentSubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAssessmentSubmissionsNestedInput
    assessment?: AssessmentsUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type AssessmentSubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentSubmissionCreateManyInput = {
    id?: string
    studentId: string
    assessmentId: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentSubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentSubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type AttemptTrackerListRelationFilter = {
    every?: AttemptTrackerWhereInput
    some?: AttemptTrackerWhereInput
    none?: AttemptTrackerWhereInput
  }

  export type AssessmentSubmissionListRelationFilter = {
    every?: AssessmentSubmissionWhereInput
    some?: AssessmentSubmissionWhereInput
    none?: AssessmentSubmissionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttemptTrackerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    PhoneNumber?: SortOrder
    semester?: SortOrder
    batch?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    semester?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    PhoneNumber?: SortOrder
    semester?: SortOrder
    batch?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    PhoneNumber?: SortOrder
    semester?: SortOrder
    batch?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    semester?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProblemsListRelationFilter = {
    every?: ProblemsWhereInput
    some?: ProblemsWhereInput
    none?: ProblemsWhereInput
  }

  export type AssessmentsListRelationFilter = {
    every?: AssessmentsWhereInput
    some?: AssessmentsWhereInput
    none?: AssessmentsWhereInput
  }

  export type ProblemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    professorId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessorMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    professorId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessorMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    department?: SortOrder
    professorId?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDifficultyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelFilter<$PrismaModel> | $Enums.DifficultyLevel
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type AssessmentsScalarRelationFilter = {
    is?: AssessmentsWhereInput
    isNot?: AssessmentsWhereInput
  }

  export type ProfessorScalarRelationFilter = {
    is?: ProfessorWhereInput
    isNot?: ProfessorWhereInput
  }

  export type ProblemLanguageListRelationFilter = {
    every?: ProblemLanguageWhereInput
    some?: ProblemLanguageWhereInput
    none?: ProblemLanguageWhereInput
  }

  export type TestCasesListRelationFilter = {
    every?: TestCasesWhereInput
    some?: TestCasesWhereInput
    none?: TestCasesWhereInput
  }

  export type QuestionChoiceListRelationFilter = {
    every?: QuestionChoiceWhereInput
    some?: QuestionChoiceWhereInput
    none?: QuestionChoiceWhereInput
  }

  export type ProblemLanguageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestCasesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionChoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    score?: SortOrder
    questionType?: SortOrder
    assessmentId?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemsAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type ProblemsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    score?: SortOrder
    questionType?: SortOrder
    assessmentId?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    score?: SortOrder
    questionType?: SortOrder
    assessmentId?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemsSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type EnumDifficultyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelWithAggregatesFilter<$PrismaModel> | $Enums.DifficultyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyLevelFilter<$PrismaModel>
    _max?: NestedEnumDifficultyLevelFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type ProblemsScalarRelationFilter = {
    is?: ProblemsWhereInput
    isNot?: ProblemsWhereInput
  }

  export type QuestionChoiceCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionChoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionChoiceMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    isCorrect?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type SubmissionStudentIdProblemIdCompoundUniqueInput = {
    studentId: string
    problemId: string
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    language?: SortOrder
    selectedChoiceId?: SortOrder
    status?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    problemId?: SortOrder
    isSubmitted?: SortOrder
    isCorrect?: SortOrder
    questionNumber?: SortOrder
    questionPreview?: SortOrder
    executionTime?: SortOrder
    memoryUsed?: SortOrder
    errorMessage?: SortOrder
    testResults?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionAvgOrderByAggregateInput = {
    score?: SortOrder
    questionNumber?: SortOrder
    executionTime?: SortOrder
    memoryUsed?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    language?: SortOrder
    selectedChoiceId?: SortOrder
    status?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    problemId?: SortOrder
    isSubmitted?: SortOrder
    isCorrect?: SortOrder
    questionNumber?: SortOrder
    questionPreview?: SortOrder
    executionTime?: SortOrder
    memoryUsed?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    language?: SortOrder
    selectedChoiceId?: SortOrder
    status?: SortOrder
    score?: SortOrder
    studentId?: SortOrder
    problemId?: SortOrder
    isSubmitted?: SortOrder
    isCorrect?: SortOrder
    questionNumber?: SortOrder
    questionPreview?: SortOrder
    executionTime?: SortOrder
    memoryUsed?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionSumOrderByAggregateInput = {
    score?: SortOrder
    questionNumber?: SortOrder
    executionTime?: SortOrder
    memoryUsed?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumAssessmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentStatus | EnumAssessmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentStatusFilter<$PrismaModel> | $Enums.AssessmentStatus
  }

  export type AssessmentsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    batch?: SortOrder
    departments?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    topics?: SortOrder
    status?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentsAvgOrderByAggregateInput = {
    duration?: SortOrder
    totalQuestions?: SortOrder
  }

  export type AssessmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    status?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    status?: SortOrder
    professorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentsSumOrderByAggregateInput = {
    duration?: SortOrder
    totalQuestions?: SortOrder
  }

  export type EnumAssessmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentStatus | EnumAssessmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssessmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssessmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssessmentStatusFilter<$PrismaModel>
  }

  export type TestCasesCountOrderByAggregateInput = {
    id?: SortOrder
    input?: SortOrder
    output?: SortOrder
    isHidden?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCasesMaxOrderByAggregateInput = {
    id?: SortOrder
    input?: SortOrder
    output?: SortOrder
    isHidden?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCasesMinOrderByAggregateInput = {
    id?: SortOrder
    input?: SortOrder
    output?: SortOrder
    isHidden?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AttemptTrackerStudentIdAssessmentIdCompoundUniqueInput = {
    studentId: string
    assessmentId: string
  }

  export type AttemptTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttemptTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttemptTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProblemLanguageNameProblemIdCompoundUniqueInput = {
    name: string
    problemId: string
  }

  export type ProblemLanguageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    functionSignature?: SortOrder
    codePrefix?: SortOrder
    starterCode?: SortOrder
    codeSuffix?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemLanguageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    functionSignature?: SortOrder
    codePrefix?: SortOrder
    starterCode?: SortOrder
    codeSuffix?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemLanguageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    functionSignature?: SortOrder
    codePrefix?: SortOrder
    starterCode?: SortOrder
    codeSuffix?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAssessmentSubmissionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentSubmissionStatus | EnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentSubmissionStatusFilter<$PrismaModel> | $Enums.AssessmentSubmissionStatus
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AssessmentSubmissionStudentIdAssessmentIdCompoundUniqueInput = {
    studentId: string
    assessmentId: string
  }

  export type AssessmentSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    codingScore?: SortOrder
    mcqScore?: SortOrder
    totalProblems?: SortOrder
    problemsAttempted?: SortOrder
    problemsCompleted?: SortOrder
    averageTimePerProblem?: SortOrder
    submissionDetails?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentSubmissionAvgOrderByAggregateInput = {
    totalScore?: SortOrder
    maxScore?: SortOrder
    duration?: SortOrder
    codingScore?: SortOrder
    mcqScore?: SortOrder
    totalProblems?: SortOrder
    problemsAttempted?: SortOrder
    problemsCompleted?: SortOrder
    averageTimePerProblem?: SortOrder
  }

  export type AssessmentSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    codingScore?: SortOrder
    mcqScore?: SortOrder
    totalProblems?: SortOrder
    problemsAttempted?: SortOrder
    problemsCompleted?: SortOrder
    averageTimePerProblem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assessmentId?: SortOrder
    totalScore?: SortOrder
    maxScore?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    codingScore?: SortOrder
    mcqScore?: SortOrder
    totalProblems?: SortOrder
    problemsAttempted?: SortOrder
    problemsCompleted?: SortOrder
    averageTimePerProblem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentSubmissionSumOrderByAggregateInput = {
    totalScore?: SortOrder
    maxScore?: SortOrder
    duration?: SortOrder
    codingScore?: SortOrder
    mcqScore?: SortOrder
    totalProblems?: SortOrder
    problemsAttempted?: SortOrder
    problemsCompleted?: SortOrder
    averageTimePerProblem?: SortOrder
  }

  export type EnumAssessmentSubmissionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentSubmissionStatus | EnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentSubmissionStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssessmentSubmissionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssessmentSubmissionStatusFilter<$PrismaModel>
    _max?: NestedEnumAssessmentSubmissionStatusFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SubmissionCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type AttemptTrackerCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttemptTrackerCreateWithoutStudentInput, AttemptTrackerUncheckedCreateWithoutStudentInput> | AttemptTrackerCreateWithoutStudentInput[] | AttemptTrackerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutStudentInput | AttemptTrackerCreateOrConnectWithoutStudentInput[]
    createMany?: AttemptTrackerCreateManyStudentInputEnvelope
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
  }

  export type AssessmentSubmissionCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutStudentInput, AssessmentSubmissionUncheckedCreateWithoutStudentInput> | AssessmentSubmissionCreateWithoutStudentInput[] | AssessmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutStudentInput | AssessmentSubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: AssessmentSubmissionCreateManyStudentInputEnvelope
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type AttemptTrackerUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttemptTrackerCreateWithoutStudentInput, AttemptTrackerUncheckedCreateWithoutStudentInput> | AttemptTrackerCreateWithoutStudentInput[] | AttemptTrackerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutStudentInput | AttemptTrackerCreateOrConnectWithoutStudentInput[]
    createMany?: AttemptTrackerCreateManyStudentInputEnvelope
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
  }

  export type AssessmentSubmissionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutStudentInput, AssessmentSubmissionUncheckedCreateWithoutStudentInput> | AssessmentSubmissionCreateWithoutStudentInput[] | AssessmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutStudentInput | AssessmentSubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: AssessmentSubmissionCreateManyStudentInputEnvelope
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SubmissionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type AttemptTrackerUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttemptTrackerCreateWithoutStudentInput, AttemptTrackerUncheckedCreateWithoutStudentInput> | AttemptTrackerCreateWithoutStudentInput[] | AttemptTrackerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutStudentInput | AttemptTrackerCreateOrConnectWithoutStudentInput[]
    upsert?: AttemptTrackerUpsertWithWhereUniqueWithoutStudentInput | AttemptTrackerUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttemptTrackerCreateManyStudentInputEnvelope
    set?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    disconnect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    delete?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    update?: AttemptTrackerUpdateWithWhereUniqueWithoutStudentInput | AttemptTrackerUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttemptTrackerUpdateManyWithWhereWithoutStudentInput | AttemptTrackerUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttemptTrackerScalarWhereInput | AttemptTrackerScalarWhereInput[]
  }

  export type AssessmentSubmissionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutStudentInput, AssessmentSubmissionUncheckedCreateWithoutStudentInput> | AssessmentSubmissionCreateWithoutStudentInput[] | AssessmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutStudentInput | AssessmentSubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: AssessmentSubmissionUpsertWithWhereUniqueWithoutStudentInput | AssessmentSubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssessmentSubmissionCreateManyStudentInputEnvelope
    set?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    disconnect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    delete?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    update?: AssessmentSubmissionUpdateWithWhereUniqueWithoutStudentInput | AssessmentSubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssessmentSubmissionUpdateManyWithWhereWithoutStudentInput | AssessmentSubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssessmentSubmissionScalarWhereInput | AssessmentSubmissionScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type AttemptTrackerUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttemptTrackerCreateWithoutStudentInput, AttemptTrackerUncheckedCreateWithoutStudentInput> | AttemptTrackerCreateWithoutStudentInput[] | AttemptTrackerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutStudentInput | AttemptTrackerCreateOrConnectWithoutStudentInput[]
    upsert?: AttemptTrackerUpsertWithWhereUniqueWithoutStudentInput | AttemptTrackerUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttemptTrackerCreateManyStudentInputEnvelope
    set?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    disconnect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    delete?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    update?: AttemptTrackerUpdateWithWhereUniqueWithoutStudentInput | AttemptTrackerUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttemptTrackerUpdateManyWithWhereWithoutStudentInput | AttemptTrackerUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttemptTrackerScalarWhereInput | AttemptTrackerScalarWhereInput[]
  }

  export type AssessmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutStudentInput, AssessmentSubmissionUncheckedCreateWithoutStudentInput> | AssessmentSubmissionCreateWithoutStudentInput[] | AssessmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutStudentInput | AssessmentSubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: AssessmentSubmissionUpsertWithWhereUniqueWithoutStudentInput | AssessmentSubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssessmentSubmissionCreateManyStudentInputEnvelope
    set?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    disconnect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    delete?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    update?: AssessmentSubmissionUpdateWithWhereUniqueWithoutStudentInput | AssessmentSubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssessmentSubmissionUpdateManyWithWhereWithoutStudentInput | AssessmentSubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssessmentSubmissionScalarWhereInput | AssessmentSubmissionScalarWhereInput[]
  }

  export type ProblemsCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ProblemsCreateWithoutProfessorInput, ProblemsUncheckedCreateWithoutProfessorInput> | ProblemsCreateWithoutProfessorInput[] | ProblemsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutProfessorInput | ProblemsCreateOrConnectWithoutProfessorInput[]
    createMany?: ProblemsCreateManyProfessorInputEnvelope
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
  }

  export type AssessmentsCreateNestedManyWithoutProfessorInput = {
    create?: XOR<AssessmentsCreateWithoutProfessorInput, AssessmentsUncheckedCreateWithoutProfessorInput> | AssessmentsCreateWithoutProfessorInput[] | AssessmentsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: AssessmentsCreateOrConnectWithoutProfessorInput | AssessmentsCreateOrConnectWithoutProfessorInput[]
    createMany?: AssessmentsCreateManyProfessorInputEnvelope
    connect?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
  }

  export type ProblemsUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ProblemsCreateWithoutProfessorInput, ProblemsUncheckedCreateWithoutProfessorInput> | ProblemsCreateWithoutProfessorInput[] | ProblemsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutProfessorInput | ProblemsCreateOrConnectWithoutProfessorInput[]
    createMany?: ProblemsCreateManyProfessorInputEnvelope
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
  }

  export type AssessmentsUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<AssessmentsCreateWithoutProfessorInput, AssessmentsUncheckedCreateWithoutProfessorInput> | AssessmentsCreateWithoutProfessorInput[] | AssessmentsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: AssessmentsCreateOrConnectWithoutProfessorInput | AssessmentsCreateOrConnectWithoutProfessorInput[]
    createMany?: AssessmentsCreateManyProfessorInputEnvelope
    connect?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
  }

  export type ProblemsUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ProblemsCreateWithoutProfessorInput, ProblemsUncheckedCreateWithoutProfessorInput> | ProblemsCreateWithoutProfessorInput[] | ProblemsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutProfessorInput | ProblemsCreateOrConnectWithoutProfessorInput[]
    upsert?: ProblemsUpsertWithWhereUniqueWithoutProfessorInput | ProblemsUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ProblemsCreateManyProfessorInputEnvelope
    set?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    disconnect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    delete?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    update?: ProblemsUpdateWithWhereUniqueWithoutProfessorInput | ProblemsUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ProblemsUpdateManyWithWhereWithoutProfessorInput | ProblemsUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ProblemsScalarWhereInput | ProblemsScalarWhereInput[]
  }

  export type AssessmentsUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<AssessmentsCreateWithoutProfessorInput, AssessmentsUncheckedCreateWithoutProfessorInput> | AssessmentsCreateWithoutProfessorInput[] | AssessmentsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: AssessmentsCreateOrConnectWithoutProfessorInput | AssessmentsCreateOrConnectWithoutProfessorInput[]
    upsert?: AssessmentsUpsertWithWhereUniqueWithoutProfessorInput | AssessmentsUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: AssessmentsCreateManyProfessorInputEnvelope
    set?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    disconnect?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    delete?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    connect?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    update?: AssessmentsUpdateWithWhereUniqueWithoutProfessorInput | AssessmentsUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: AssessmentsUpdateManyWithWhereWithoutProfessorInput | AssessmentsUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: AssessmentsScalarWhereInput | AssessmentsScalarWhereInput[]
  }

  export type ProblemsUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ProblemsCreateWithoutProfessorInput, ProblemsUncheckedCreateWithoutProfessorInput> | ProblemsCreateWithoutProfessorInput[] | ProblemsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutProfessorInput | ProblemsCreateOrConnectWithoutProfessorInput[]
    upsert?: ProblemsUpsertWithWhereUniqueWithoutProfessorInput | ProblemsUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ProblemsCreateManyProfessorInputEnvelope
    set?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    disconnect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    delete?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    update?: ProblemsUpdateWithWhereUniqueWithoutProfessorInput | ProblemsUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ProblemsUpdateManyWithWhereWithoutProfessorInput | ProblemsUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ProblemsScalarWhereInput | ProblemsScalarWhereInput[]
  }

  export type AssessmentsUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<AssessmentsCreateWithoutProfessorInput, AssessmentsUncheckedCreateWithoutProfessorInput> | AssessmentsCreateWithoutProfessorInput[] | AssessmentsUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: AssessmentsCreateOrConnectWithoutProfessorInput | AssessmentsCreateOrConnectWithoutProfessorInput[]
    upsert?: AssessmentsUpsertWithWhereUniqueWithoutProfessorInput | AssessmentsUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: AssessmentsCreateManyProfessorInputEnvelope
    set?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    disconnect?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    delete?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    connect?: AssessmentsWhereUniqueInput | AssessmentsWhereUniqueInput[]
    update?: AssessmentsUpdateWithWhereUniqueWithoutProfessorInput | AssessmentsUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: AssessmentsUpdateManyWithWhereWithoutProfessorInput | AssessmentsUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: AssessmentsScalarWhereInput | AssessmentsScalarWhereInput[]
  }

  export type AssessmentsCreateNestedOneWithoutProblemsInput = {
    create?: XOR<AssessmentsCreateWithoutProblemsInput, AssessmentsUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: AssessmentsCreateOrConnectWithoutProblemsInput
    connect?: AssessmentsWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutProblemsInput = {
    create?: XOR<ProfessorCreateWithoutProblemsInput, ProfessorUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProblemsInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ProblemLanguageCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemLanguageCreateWithoutProblemInput, ProblemLanguageUncheckedCreateWithoutProblemInput> | ProblemLanguageCreateWithoutProblemInput[] | ProblemLanguageUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemLanguageCreateOrConnectWithoutProblemInput | ProblemLanguageCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemLanguageCreateManyProblemInputEnvelope
    connect?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
  }

  export type TestCasesCreateNestedManyWithoutProblemInput = {
    create?: XOR<TestCasesCreateWithoutProblemInput, TestCasesUncheckedCreateWithoutProblemInput> | TestCasesCreateWithoutProblemInput[] | TestCasesUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TestCasesCreateOrConnectWithoutProblemInput | TestCasesCreateOrConnectWithoutProblemInput[]
    createMany?: TestCasesCreateManyProblemInputEnvelope
    connect?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
  }

  export type QuestionChoiceCreateNestedManyWithoutProblemInput = {
    create?: XOR<QuestionChoiceCreateWithoutProblemInput, QuestionChoiceUncheckedCreateWithoutProblemInput> | QuestionChoiceCreateWithoutProblemInput[] | QuestionChoiceUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: QuestionChoiceCreateOrConnectWithoutProblemInput | QuestionChoiceCreateOrConnectWithoutProblemInput[]
    createMany?: QuestionChoiceCreateManyProblemInputEnvelope
    connect?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutProblemInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ProblemLanguageUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemLanguageCreateWithoutProblemInput, ProblemLanguageUncheckedCreateWithoutProblemInput> | ProblemLanguageCreateWithoutProblemInput[] | ProblemLanguageUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemLanguageCreateOrConnectWithoutProblemInput | ProblemLanguageCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemLanguageCreateManyProblemInputEnvelope
    connect?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
  }

  export type TestCasesUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<TestCasesCreateWithoutProblemInput, TestCasesUncheckedCreateWithoutProblemInput> | TestCasesCreateWithoutProblemInput[] | TestCasesUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TestCasesCreateOrConnectWithoutProblemInput | TestCasesCreateOrConnectWithoutProblemInput[]
    createMany?: TestCasesCreateManyProblemInputEnvelope
    connect?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
  }

  export type QuestionChoiceUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<QuestionChoiceCreateWithoutProblemInput, QuestionChoiceUncheckedCreateWithoutProblemInput> | QuestionChoiceCreateWithoutProblemInput[] | QuestionChoiceUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: QuestionChoiceCreateOrConnectWithoutProblemInput | QuestionChoiceCreateOrConnectWithoutProblemInput[]
    createMany?: QuestionChoiceCreateManyProblemInputEnvelope
    connect?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type EnumDifficultyLevelFieldUpdateOperationsInput = {
    set?: $Enums.DifficultyLevel
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type AssessmentsUpdateOneRequiredWithoutProblemsNestedInput = {
    create?: XOR<AssessmentsCreateWithoutProblemsInput, AssessmentsUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: AssessmentsCreateOrConnectWithoutProblemsInput
    upsert?: AssessmentsUpsertWithoutProblemsInput
    connect?: AssessmentsWhereUniqueInput
    update?: XOR<XOR<AssessmentsUpdateToOneWithWhereWithoutProblemsInput, AssessmentsUpdateWithoutProblemsInput>, AssessmentsUncheckedUpdateWithoutProblemsInput>
  }

  export type ProfessorUpdateOneRequiredWithoutProblemsNestedInput = {
    create?: XOR<ProfessorCreateWithoutProblemsInput, ProfessorUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutProblemsInput
    upsert?: ProfessorUpsertWithoutProblemsInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutProblemsInput, ProfessorUpdateWithoutProblemsInput>, ProfessorUncheckedUpdateWithoutProblemsInput>
  }

  export type ProblemLanguageUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemLanguageCreateWithoutProblemInput, ProblemLanguageUncheckedCreateWithoutProblemInput> | ProblemLanguageCreateWithoutProblemInput[] | ProblemLanguageUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemLanguageCreateOrConnectWithoutProblemInput | ProblemLanguageCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemLanguageUpsertWithWhereUniqueWithoutProblemInput | ProblemLanguageUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemLanguageCreateManyProblemInputEnvelope
    set?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    disconnect?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    delete?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    connect?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    update?: ProblemLanguageUpdateWithWhereUniqueWithoutProblemInput | ProblemLanguageUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemLanguageUpdateManyWithWhereWithoutProblemInput | ProblemLanguageUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemLanguageScalarWhereInput | ProblemLanguageScalarWhereInput[]
  }

  export type TestCasesUpdateManyWithoutProblemNestedInput = {
    create?: XOR<TestCasesCreateWithoutProblemInput, TestCasesUncheckedCreateWithoutProblemInput> | TestCasesCreateWithoutProblemInput[] | TestCasesUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TestCasesCreateOrConnectWithoutProblemInput | TestCasesCreateOrConnectWithoutProblemInput[]
    upsert?: TestCasesUpsertWithWhereUniqueWithoutProblemInput | TestCasesUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: TestCasesCreateManyProblemInputEnvelope
    set?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    disconnect?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    delete?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    connect?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    update?: TestCasesUpdateWithWhereUniqueWithoutProblemInput | TestCasesUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: TestCasesUpdateManyWithWhereWithoutProblemInput | TestCasesUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: TestCasesScalarWhereInput | TestCasesScalarWhereInput[]
  }

  export type QuestionChoiceUpdateManyWithoutProblemNestedInput = {
    create?: XOR<QuestionChoiceCreateWithoutProblemInput, QuestionChoiceUncheckedCreateWithoutProblemInput> | QuestionChoiceCreateWithoutProblemInput[] | QuestionChoiceUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: QuestionChoiceCreateOrConnectWithoutProblemInput | QuestionChoiceCreateOrConnectWithoutProblemInput[]
    upsert?: QuestionChoiceUpsertWithWhereUniqueWithoutProblemInput | QuestionChoiceUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: QuestionChoiceCreateManyProblemInputEnvelope
    set?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    disconnect?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    delete?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    connect?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    update?: QuestionChoiceUpdateWithWhereUniqueWithoutProblemInput | QuestionChoiceUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: QuestionChoiceUpdateManyWithWhereWithoutProblemInput | QuestionChoiceUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: QuestionChoiceScalarWhereInput | QuestionChoiceScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutProblemNestedInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutProblemInput | SubmissionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutProblemInput | SubmissionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutProblemInput | SubmissionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ProblemLanguageUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemLanguageCreateWithoutProblemInput, ProblemLanguageUncheckedCreateWithoutProblemInput> | ProblemLanguageCreateWithoutProblemInput[] | ProblemLanguageUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemLanguageCreateOrConnectWithoutProblemInput | ProblemLanguageCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemLanguageUpsertWithWhereUniqueWithoutProblemInput | ProblemLanguageUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemLanguageCreateManyProblemInputEnvelope
    set?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    disconnect?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    delete?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    connect?: ProblemLanguageWhereUniqueInput | ProblemLanguageWhereUniqueInput[]
    update?: ProblemLanguageUpdateWithWhereUniqueWithoutProblemInput | ProblemLanguageUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemLanguageUpdateManyWithWhereWithoutProblemInput | ProblemLanguageUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemLanguageScalarWhereInput | ProblemLanguageScalarWhereInput[]
  }

  export type TestCasesUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<TestCasesCreateWithoutProblemInput, TestCasesUncheckedCreateWithoutProblemInput> | TestCasesCreateWithoutProblemInput[] | TestCasesUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TestCasesCreateOrConnectWithoutProblemInput | TestCasesCreateOrConnectWithoutProblemInput[]
    upsert?: TestCasesUpsertWithWhereUniqueWithoutProblemInput | TestCasesUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: TestCasesCreateManyProblemInputEnvelope
    set?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    disconnect?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    delete?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    connect?: TestCasesWhereUniqueInput | TestCasesWhereUniqueInput[]
    update?: TestCasesUpdateWithWhereUniqueWithoutProblemInput | TestCasesUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: TestCasesUpdateManyWithWhereWithoutProblemInput | TestCasesUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: TestCasesScalarWhereInput | TestCasesScalarWhereInput[]
  }

  export type QuestionChoiceUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<QuestionChoiceCreateWithoutProblemInput, QuestionChoiceUncheckedCreateWithoutProblemInput> | QuestionChoiceCreateWithoutProblemInput[] | QuestionChoiceUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: QuestionChoiceCreateOrConnectWithoutProblemInput | QuestionChoiceCreateOrConnectWithoutProblemInput[]
    upsert?: QuestionChoiceUpsertWithWhereUniqueWithoutProblemInput | QuestionChoiceUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: QuestionChoiceCreateManyProblemInputEnvelope
    set?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    disconnect?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    delete?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    connect?: QuestionChoiceWhereUniqueInput | QuestionChoiceWhereUniqueInput[]
    update?: QuestionChoiceUpdateWithWhereUniqueWithoutProblemInput | QuestionChoiceUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: QuestionChoiceUpdateManyWithWhereWithoutProblemInput | QuestionChoiceUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: QuestionChoiceScalarWhereInput | QuestionChoiceScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutProblemInput | SubmissionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutProblemInput | SubmissionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutProblemInput | SubmissionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ProblemsCreateNestedOneWithoutChoicesInput = {
    create?: XOR<ProblemsCreateWithoutChoicesInput, ProblemsUncheckedCreateWithoutChoicesInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutChoicesInput
    connect?: ProblemsWhereUniqueInput
  }

  export type ProblemsUpdateOneRequiredWithoutChoicesNestedInput = {
    create?: XOR<ProblemsCreateWithoutChoicesInput, ProblemsUncheckedCreateWithoutChoicesInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutChoicesInput
    upsert?: ProblemsUpsertWithoutChoicesInput
    connect?: ProblemsWhereUniqueInput
    update?: XOR<XOR<ProblemsUpdateToOneWithWhereWithoutChoicesInput, ProblemsUpdateWithoutChoicesInput>, ProblemsUncheckedUpdateWithoutChoicesInput>
  }

  export type StudentCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSubmissionsInput
    connect?: StudentWhereUniqueInput
  }

  export type ProblemsCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<ProblemsCreateWithoutSubmissionsInput, ProblemsUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutSubmissionsInput
    connect?: ProblemsWhereUniqueInput
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type StudentUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSubmissionsInput
    upsert?: StudentUpsertWithoutSubmissionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutSubmissionsInput, StudentUpdateWithoutSubmissionsInput>, StudentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type ProblemsUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<ProblemsCreateWithoutSubmissionsInput, ProblemsUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutSubmissionsInput
    upsert?: ProblemsUpsertWithoutSubmissionsInput
    connect?: ProblemsWhereUniqueInput
    update?: XOR<XOR<ProblemsUpdateToOneWithWhereWithoutSubmissionsInput, ProblemsUpdateWithoutSubmissionsInput>, ProblemsUncheckedUpdateWithoutSubmissionsInput>
  }

  export type AssessmentsCreatebatchInput = {
    set: string[]
  }

  export type AssessmentsCreatedepartmentsInput = {
    set: string[]
  }

  export type AssessmentsCreatetopicsInput = {
    set: string[]
  }

  export type ProblemsCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<ProblemsCreateWithoutAssessmentInput, ProblemsUncheckedCreateWithoutAssessmentInput> | ProblemsCreateWithoutAssessmentInput[] | ProblemsUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutAssessmentInput | ProblemsCreateOrConnectWithoutAssessmentInput[]
    createMany?: ProblemsCreateManyAssessmentInputEnvelope
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
  }

  export type AttemptTrackerCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AttemptTrackerCreateWithoutAssessmentInput, AttemptTrackerUncheckedCreateWithoutAssessmentInput> | AttemptTrackerCreateWithoutAssessmentInput[] | AttemptTrackerUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutAssessmentInput | AttemptTrackerCreateOrConnectWithoutAssessmentInput[]
    createMany?: AttemptTrackerCreateManyAssessmentInputEnvelope
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
  }

  export type AssessmentSubmissionCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutAssessmentInput, AssessmentSubmissionUncheckedCreateWithoutAssessmentInput> | AssessmentSubmissionCreateWithoutAssessmentInput[] | AssessmentSubmissionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutAssessmentInput | AssessmentSubmissionCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentSubmissionCreateManyAssessmentInputEnvelope
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
  }

  export type ProfessorCreateNestedOneWithoutAssessmentsInput = {
    create?: XOR<ProfessorCreateWithoutAssessmentsInput, ProfessorUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutAssessmentsInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ProblemsUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<ProblemsCreateWithoutAssessmentInput, ProblemsUncheckedCreateWithoutAssessmentInput> | ProblemsCreateWithoutAssessmentInput[] | ProblemsUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutAssessmentInput | ProblemsCreateOrConnectWithoutAssessmentInput[]
    createMany?: ProblemsCreateManyAssessmentInputEnvelope
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
  }

  export type AttemptTrackerUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AttemptTrackerCreateWithoutAssessmentInput, AttemptTrackerUncheckedCreateWithoutAssessmentInput> | AttemptTrackerCreateWithoutAssessmentInput[] | AttemptTrackerUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutAssessmentInput | AttemptTrackerCreateOrConnectWithoutAssessmentInput[]
    createMany?: AttemptTrackerCreateManyAssessmentInputEnvelope
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
  }

  export type AssessmentSubmissionUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutAssessmentInput, AssessmentSubmissionUncheckedCreateWithoutAssessmentInput> | AssessmentSubmissionCreateWithoutAssessmentInput[] | AssessmentSubmissionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutAssessmentInput | AssessmentSubmissionCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentSubmissionCreateManyAssessmentInputEnvelope
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
  }

  export type AssessmentsUpdatebatchInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AssessmentsUpdatedepartmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AssessmentsUpdatetopicsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumAssessmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssessmentStatus
  }

  export type ProblemsUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<ProblemsCreateWithoutAssessmentInput, ProblemsUncheckedCreateWithoutAssessmentInput> | ProblemsCreateWithoutAssessmentInput[] | ProblemsUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutAssessmentInput | ProblemsCreateOrConnectWithoutAssessmentInput[]
    upsert?: ProblemsUpsertWithWhereUniqueWithoutAssessmentInput | ProblemsUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: ProblemsCreateManyAssessmentInputEnvelope
    set?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    disconnect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    delete?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    update?: ProblemsUpdateWithWhereUniqueWithoutAssessmentInput | ProblemsUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: ProblemsUpdateManyWithWhereWithoutAssessmentInput | ProblemsUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: ProblemsScalarWhereInput | ProblemsScalarWhereInput[]
  }

  export type AttemptTrackerUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AttemptTrackerCreateWithoutAssessmentInput, AttemptTrackerUncheckedCreateWithoutAssessmentInput> | AttemptTrackerCreateWithoutAssessmentInput[] | AttemptTrackerUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutAssessmentInput | AttemptTrackerCreateOrConnectWithoutAssessmentInput[]
    upsert?: AttemptTrackerUpsertWithWhereUniqueWithoutAssessmentInput | AttemptTrackerUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AttemptTrackerCreateManyAssessmentInputEnvelope
    set?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    disconnect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    delete?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    update?: AttemptTrackerUpdateWithWhereUniqueWithoutAssessmentInput | AttemptTrackerUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AttemptTrackerUpdateManyWithWhereWithoutAssessmentInput | AttemptTrackerUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AttemptTrackerScalarWhereInput | AttemptTrackerScalarWhereInput[]
  }

  export type AssessmentSubmissionUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutAssessmentInput, AssessmentSubmissionUncheckedCreateWithoutAssessmentInput> | AssessmentSubmissionCreateWithoutAssessmentInput[] | AssessmentSubmissionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutAssessmentInput | AssessmentSubmissionCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentSubmissionUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentSubmissionUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentSubmissionCreateManyAssessmentInputEnvelope
    set?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    disconnect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    delete?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    update?: AssessmentSubmissionUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentSubmissionUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentSubmissionUpdateManyWithWhereWithoutAssessmentInput | AssessmentSubmissionUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentSubmissionScalarWhereInput | AssessmentSubmissionScalarWhereInput[]
  }

  export type ProfessorUpdateOneRequiredWithoutAssessmentsNestedInput = {
    create?: XOR<ProfessorCreateWithoutAssessmentsInput, ProfessorUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutAssessmentsInput
    upsert?: ProfessorUpsertWithoutAssessmentsInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutAssessmentsInput, ProfessorUpdateWithoutAssessmentsInput>, ProfessorUncheckedUpdateWithoutAssessmentsInput>
  }

  export type ProblemsUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<ProblemsCreateWithoutAssessmentInput, ProblemsUncheckedCreateWithoutAssessmentInput> | ProblemsCreateWithoutAssessmentInput[] | ProblemsUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: ProblemsCreateOrConnectWithoutAssessmentInput | ProblemsCreateOrConnectWithoutAssessmentInput[]
    upsert?: ProblemsUpsertWithWhereUniqueWithoutAssessmentInput | ProblemsUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: ProblemsCreateManyAssessmentInputEnvelope
    set?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    disconnect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    delete?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    connect?: ProblemsWhereUniqueInput | ProblemsWhereUniqueInput[]
    update?: ProblemsUpdateWithWhereUniqueWithoutAssessmentInput | ProblemsUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: ProblemsUpdateManyWithWhereWithoutAssessmentInput | ProblemsUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: ProblemsScalarWhereInput | ProblemsScalarWhereInput[]
  }

  export type AttemptTrackerUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AttemptTrackerCreateWithoutAssessmentInput, AttemptTrackerUncheckedCreateWithoutAssessmentInput> | AttemptTrackerCreateWithoutAssessmentInput[] | AttemptTrackerUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AttemptTrackerCreateOrConnectWithoutAssessmentInput | AttemptTrackerCreateOrConnectWithoutAssessmentInput[]
    upsert?: AttemptTrackerUpsertWithWhereUniqueWithoutAssessmentInput | AttemptTrackerUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AttemptTrackerCreateManyAssessmentInputEnvelope
    set?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    disconnect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    delete?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    connect?: AttemptTrackerWhereUniqueInput | AttemptTrackerWhereUniqueInput[]
    update?: AttemptTrackerUpdateWithWhereUniqueWithoutAssessmentInput | AttemptTrackerUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AttemptTrackerUpdateManyWithWhereWithoutAssessmentInput | AttemptTrackerUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AttemptTrackerScalarWhereInput | AttemptTrackerScalarWhereInput[]
  }

  export type AssessmentSubmissionUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentSubmissionCreateWithoutAssessmentInput, AssessmentSubmissionUncheckedCreateWithoutAssessmentInput> | AssessmentSubmissionCreateWithoutAssessmentInput[] | AssessmentSubmissionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentSubmissionCreateOrConnectWithoutAssessmentInput | AssessmentSubmissionCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentSubmissionUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentSubmissionUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentSubmissionCreateManyAssessmentInputEnvelope
    set?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    disconnect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    delete?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    connect?: AssessmentSubmissionWhereUniqueInput | AssessmentSubmissionWhereUniqueInput[]
    update?: AssessmentSubmissionUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentSubmissionUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentSubmissionUpdateManyWithWhereWithoutAssessmentInput | AssessmentSubmissionUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentSubmissionScalarWhereInput | AssessmentSubmissionScalarWhereInput[]
  }

  export type ProblemsCreateNestedOneWithoutTestCasesInput = {
    create?: XOR<ProblemsCreateWithoutTestCasesInput, ProblemsUncheckedCreateWithoutTestCasesInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutTestCasesInput
    connect?: ProblemsWhereUniqueInput
  }

  export type ProblemsUpdateOneRequiredWithoutTestCasesNestedInput = {
    create?: XOR<ProblemsCreateWithoutTestCasesInput, ProblemsUncheckedCreateWithoutTestCasesInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutTestCasesInput
    upsert?: ProblemsUpsertWithoutTestCasesInput
    connect?: ProblemsWhereUniqueInput
    update?: XOR<XOR<ProblemsUpdateToOneWithWhereWithoutTestCasesInput, ProblemsUpdateWithoutTestCasesInput>, ProblemsUncheckedUpdateWithoutTestCasesInput>
  }

  export type StudentCreateNestedOneWithoutAttemptsInput = {
    create?: XOR<StudentCreateWithoutAttemptsInput, StudentUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttemptsInput
    connect?: StudentWhereUniqueInput
  }

  export type AssessmentsCreateNestedOneWithoutAttemptsInput = {
    create?: XOR<AssessmentsCreateWithoutAttemptsInput, AssessmentsUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: AssessmentsCreateOrConnectWithoutAttemptsInput
    connect?: AssessmentsWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type StudentUpdateOneRequiredWithoutAttemptsNestedInput = {
    create?: XOR<StudentCreateWithoutAttemptsInput, StudentUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttemptsInput
    upsert?: StudentUpsertWithoutAttemptsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAttemptsInput, StudentUpdateWithoutAttemptsInput>, StudentUncheckedUpdateWithoutAttemptsInput>
  }

  export type AssessmentsUpdateOneRequiredWithoutAttemptsNestedInput = {
    create?: XOR<AssessmentsCreateWithoutAttemptsInput, AssessmentsUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: AssessmentsCreateOrConnectWithoutAttemptsInput
    upsert?: AssessmentsUpsertWithoutAttemptsInput
    connect?: AssessmentsWhereUniqueInput
    update?: XOR<XOR<AssessmentsUpdateToOneWithWhereWithoutAttemptsInput, AssessmentsUpdateWithoutAttemptsInput>, AssessmentsUncheckedUpdateWithoutAttemptsInput>
  }

  export type ProblemsCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<ProblemsCreateWithoutLanguagesInput, ProblemsUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutLanguagesInput
    connect?: ProblemsWhereUniqueInput
  }

  export type ProblemsUpdateOneRequiredWithoutLanguagesNestedInput = {
    create?: XOR<ProblemsCreateWithoutLanguagesInput, ProblemsUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: ProblemsCreateOrConnectWithoutLanguagesInput
    upsert?: ProblemsUpsertWithoutLanguagesInput
    connect?: ProblemsWhereUniqueInput
    update?: XOR<XOR<ProblemsUpdateToOneWithWhereWithoutLanguagesInput, ProblemsUpdateWithoutLanguagesInput>, ProblemsUncheckedUpdateWithoutLanguagesInput>
  }

  export type StudentCreateNestedOneWithoutAssessmentSubmissionsInput = {
    create?: XOR<StudentCreateWithoutAssessmentSubmissionsInput, StudentUncheckedCreateWithoutAssessmentSubmissionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAssessmentSubmissionsInput
    connect?: StudentWhereUniqueInput
  }

  export type AssessmentsCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<AssessmentsCreateWithoutSubmissionsInput, AssessmentsUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssessmentsCreateOrConnectWithoutSubmissionsInput
    connect?: AssessmentsWhereUniqueInput
  }

  export type EnumAssessmentSubmissionStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssessmentSubmissionStatus
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentUpdateOneRequiredWithoutAssessmentSubmissionsNestedInput = {
    create?: XOR<StudentCreateWithoutAssessmentSubmissionsInput, StudentUncheckedCreateWithoutAssessmentSubmissionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAssessmentSubmissionsInput
    upsert?: StudentUpsertWithoutAssessmentSubmissionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAssessmentSubmissionsInput, StudentUpdateWithoutAssessmentSubmissionsInput>, StudentUncheckedUpdateWithoutAssessmentSubmissionsInput>
  }

  export type AssessmentsUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<AssessmentsCreateWithoutSubmissionsInput, AssessmentsUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssessmentsCreateOrConnectWithoutSubmissionsInput
    upsert?: AssessmentsUpsertWithoutSubmissionsInput
    connect?: AssessmentsWhereUniqueInput
    update?: XOR<XOR<AssessmentsUpdateToOneWithWhereWithoutSubmissionsInput, AssessmentsUpdateWithoutSubmissionsInput>, AssessmentsUncheckedUpdateWithoutSubmissionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelFilter<$PrismaModel> | $Enums.DifficultyLevel
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type NestedEnumDifficultyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DifficultyLevel | EnumDifficultyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.DifficultyLevel[] | ListEnumDifficultyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyLevelWithAggregatesFilter<$PrismaModel> | $Enums.DifficultyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyLevelFilter<$PrismaModel>
    _max?: NestedEnumDifficultyLevelFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumAssessmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentStatus | EnumAssessmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentStatusFilter<$PrismaModel> | $Enums.AssessmentStatus
  }

  export type NestedEnumAssessmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentStatus | EnumAssessmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentStatus[] | ListEnumAssessmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssessmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssessmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssessmentStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumAssessmentSubmissionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentSubmissionStatus | EnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentSubmissionStatusFilter<$PrismaModel> | $Enums.AssessmentSubmissionStatus
  }

  export type NestedEnumAssessmentSubmissionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssessmentSubmissionStatus | EnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssessmentSubmissionStatus[] | ListEnumAssessmentSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssessmentSubmissionStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssessmentSubmissionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssessmentSubmissionStatusFilter<$PrismaModel>
    _max?: NestedEnumAssessmentSubmissionStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SubmissionCreateWithoutStudentInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    problem: ProblemsCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutStudentInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    problemId: string
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionCreateManyStudentInputEnvelope = {
    data: SubmissionCreateManyStudentInput | SubmissionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AttemptTrackerCreateWithoutStudentInput = {
    id?: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutAttemptsInput
  }

  export type AttemptTrackerUncheckedCreateWithoutStudentInput = {
    id?: string
    assessmentId: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttemptTrackerCreateOrConnectWithoutStudentInput = {
    where: AttemptTrackerWhereUniqueInput
    create: XOR<AttemptTrackerCreateWithoutStudentInput, AttemptTrackerUncheckedCreateWithoutStudentInput>
  }

  export type AttemptTrackerCreateManyStudentInputEnvelope = {
    data: AttemptTrackerCreateManyStudentInput | AttemptTrackerCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentSubmissionCreateWithoutStudentInput = {
    id?: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutSubmissionsInput
  }

  export type AssessmentSubmissionUncheckedCreateWithoutStudentInput = {
    id?: string
    assessmentId: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentSubmissionCreateOrConnectWithoutStudentInput = {
    where: AssessmentSubmissionWhereUniqueInput
    create: XOR<AssessmentSubmissionCreateWithoutStudentInput, AssessmentSubmissionUncheckedCreateWithoutStudentInput>
  }

  export type AssessmentSubmissionCreateManyStudentInputEnvelope = {
    data: AssessmentSubmissionCreateManyStudentInput | AssessmentSubmissionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionUpsertWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutStudentInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutStudentInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    code?: StringNullableFilter<"Submission"> | string | null
    language?: StringNullableFilter<"Submission"> | string | null
    selectedChoiceId?: StringNullableFilter<"Submission"> | string | null
    status?: EnumStatusFilter<"Submission"> | $Enums.Status
    score?: IntFilter<"Submission"> | number
    studentId?: StringFilter<"Submission"> | string
    problemId?: StringFilter<"Submission"> | string
    isSubmitted?: BoolFilter<"Submission"> | boolean
    isCorrect?: BoolNullableFilter<"Submission"> | boolean | null
    questionNumber?: IntNullableFilter<"Submission"> | number | null
    questionPreview?: StringNullableFilter<"Submission"> | string | null
    executionTime?: IntNullableFilter<"Submission"> | number | null
    memoryUsed?: IntNullableFilter<"Submission"> | number | null
    errorMessage?: StringNullableFilter<"Submission"> | string | null
    testResults?: JsonNullableFilter<"Submission">
    createdAt?: DateTimeFilter<"Submission"> | Date | string
  }

  export type AttemptTrackerUpsertWithWhereUniqueWithoutStudentInput = {
    where: AttemptTrackerWhereUniqueInput
    update: XOR<AttemptTrackerUpdateWithoutStudentInput, AttemptTrackerUncheckedUpdateWithoutStudentInput>
    create: XOR<AttemptTrackerCreateWithoutStudentInput, AttemptTrackerUncheckedCreateWithoutStudentInput>
  }

  export type AttemptTrackerUpdateWithWhereUniqueWithoutStudentInput = {
    where: AttemptTrackerWhereUniqueInput
    data: XOR<AttemptTrackerUpdateWithoutStudentInput, AttemptTrackerUncheckedUpdateWithoutStudentInput>
  }

  export type AttemptTrackerUpdateManyWithWhereWithoutStudentInput = {
    where: AttemptTrackerScalarWhereInput
    data: XOR<AttemptTrackerUpdateManyMutationInput, AttemptTrackerUncheckedUpdateManyWithoutStudentInput>
  }

  export type AttemptTrackerScalarWhereInput = {
    AND?: AttemptTrackerScalarWhereInput | AttemptTrackerScalarWhereInput[]
    OR?: AttemptTrackerScalarWhereInput[]
    NOT?: AttemptTrackerScalarWhereInput | AttemptTrackerScalarWhereInput[]
    id?: StringFilter<"AttemptTracker"> | string
    studentId?: StringFilter<"AttemptTracker"> | string
    assessmentId?: StringFilter<"AttemptTracker"> | string
    startTime?: DateTimeFilter<"AttemptTracker"> | Date | string
    endTime?: DateTimeNullableFilter<"AttemptTracker"> | Date | string | null
    isCompleted?: BoolFilter<"AttemptTracker"> | boolean
    createdAt?: DateTimeFilter<"AttemptTracker"> | Date | string
    updatedAt?: DateTimeFilter<"AttemptTracker"> | Date | string
  }

  export type AssessmentSubmissionUpsertWithWhereUniqueWithoutStudentInput = {
    where: AssessmentSubmissionWhereUniqueInput
    update: XOR<AssessmentSubmissionUpdateWithoutStudentInput, AssessmentSubmissionUncheckedUpdateWithoutStudentInput>
    create: XOR<AssessmentSubmissionCreateWithoutStudentInput, AssessmentSubmissionUncheckedCreateWithoutStudentInput>
  }

  export type AssessmentSubmissionUpdateWithWhereUniqueWithoutStudentInput = {
    where: AssessmentSubmissionWhereUniqueInput
    data: XOR<AssessmentSubmissionUpdateWithoutStudentInput, AssessmentSubmissionUncheckedUpdateWithoutStudentInput>
  }

  export type AssessmentSubmissionUpdateManyWithWhereWithoutStudentInput = {
    where: AssessmentSubmissionScalarWhereInput
    data: XOR<AssessmentSubmissionUpdateManyMutationInput, AssessmentSubmissionUncheckedUpdateManyWithoutStudentInput>
  }

  export type AssessmentSubmissionScalarWhereInput = {
    AND?: AssessmentSubmissionScalarWhereInput | AssessmentSubmissionScalarWhereInput[]
    OR?: AssessmentSubmissionScalarWhereInput[]
    NOT?: AssessmentSubmissionScalarWhereInput | AssessmentSubmissionScalarWhereInput[]
    id?: StringFilter<"AssessmentSubmission"> | string
    studentId?: StringFilter<"AssessmentSubmission"> | string
    assessmentId?: StringFilter<"AssessmentSubmission"> | string
    totalScore?: IntFilter<"AssessmentSubmission"> | number
    maxScore?: IntFilter<"AssessmentSubmission"> | number
    startTime?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    endTime?: DateTimeNullableFilter<"AssessmentSubmission"> | Date | string | null
    duration?: IntNullableFilter<"AssessmentSubmission"> | number | null
    status?: EnumAssessmentSubmissionStatusFilter<"AssessmentSubmission"> | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFilter<"AssessmentSubmission"> | number
    mcqScore?: IntFilter<"AssessmentSubmission"> | number
    totalProblems?: IntFilter<"AssessmentSubmission"> | number
    problemsAttempted?: IntFilter<"AssessmentSubmission"> | number
    problemsCompleted?: IntFilter<"AssessmentSubmission"> | number
    averageTimePerProblem?: FloatNullableFilter<"AssessmentSubmission"> | number | null
    submissionDetails?: JsonNullableFilter<"AssessmentSubmission">
    createdAt?: DateTimeFilter<"AssessmentSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"AssessmentSubmission"> | Date | string
  }

  export type ProblemsCreateWithoutProfessorInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutProblemsInput
    languages?: ProblemLanguageCreateNestedManyWithoutProblemInput
    testCases?: TestCasesCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceCreateNestedManyWithoutProblemInput
    submissions?: SubmissionCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUncheckedCreateWithoutProfessorInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    languages?: ProblemLanguageUncheckedCreateNestedManyWithoutProblemInput
    testCases?: TestCasesUncheckedCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceUncheckedCreateNestedManyWithoutProblemInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemsCreateOrConnectWithoutProfessorInput = {
    where: ProblemsWhereUniqueInput
    create: XOR<ProblemsCreateWithoutProfessorInput, ProblemsUncheckedCreateWithoutProfessorInput>
  }

  export type ProblemsCreateManyProfessorInputEnvelope = {
    data: ProblemsCreateManyProfessorInput | ProblemsCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentsCreateWithoutProfessorInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsCreateNestedManyWithoutAssessmentInput
    attempts?: AttemptTrackerCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentsUncheckedCreateWithoutProfessorInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsUncheckedCreateNestedManyWithoutAssessmentInput
    attempts?: AttemptTrackerUncheckedCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentsCreateOrConnectWithoutProfessorInput = {
    where: AssessmentsWhereUniqueInput
    create: XOR<AssessmentsCreateWithoutProfessorInput, AssessmentsUncheckedCreateWithoutProfessorInput>
  }

  export type AssessmentsCreateManyProfessorInputEnvelope = {
    data: AssessmentsCreateManyProfessorInput | AssessmentsCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type ProblemsUpsertWithWhereUniqueWithoutProfessorInput = {
    where: ProblemsWhereUniqueInput
    update: XOR<ProblemsUpdateWithoutProfessorInput, ProblemsUncheckedUpdateWithoutProfessorInput>
    create: XOR<ProblemsCreateWithoutProfessorInput, ProblemsUncheckedCreateWithoutProfessorInput>
  }

  export type ProblemsUpdateWithWhereUniqueWithoutProfessorInput = {
    where: ProblemsWhereUniqueInput
    data: XOR<ProblemsUpdateWithoutProfessorInput, ProblemsUncheckedUpdateWithoutProfessorInput>
  }

  export type ProblemsUpdateManyWithWhereWithoutProfessorInput = {
    where: ProblemsScalarWhereInput
    data: XOR<ProblemsUpdateManyMutationInput, ProblemsUncheckedUpdateManyWithoutProfessorInput>
  }

  export type ProblemsScalarWhereInput = {
    AND?: ProblemsScalarWhereInput | ProblemsScalarWhereInput[]
    OR?: ProblemsScalarWhereInput[]
    NOT?: ProblemsScalarWhereInput | ProblemsScalarWhereInput[]
    id?: StringFilter<"Problems"> | string
    title?: StringFilter<"Problems"> | string
    description?: StringFilter<"Problems"> | string
    difficulty?: EnumDifficultyLevelFilter<"Problems"> | $Enums.DifficultyLevel
    score?: IntFilter<"Problems"> | number
    questionType?: EnumQuestionTypeFilter<"Problems"> | $Enums.QuestionType
    assessmentId?: StringFilter<"Problems"> | string
    professorId?: StringFilter<"Problems"> | string
    createdAt?: DateTimeFilter<"Problems"> | Date | string
    updatedAt?: DateTimeFilter<"Problems"> | Date | string
  }

  export type AssessmentsUpsertWithWhereUniqueWithoutProfessorInput = {
    where: AssessmentsWhereUniqueInput
    update: XOR<AssessmentsUpdateWithoutProfessorInput, AssessmentsUncheckedUpdateWithoutProfessorInput>
    create: XOR<AssessmentsCreateWithoutProfessorInput, AssessmentsUncheckedCreateWithoutProfessorInput>
  }

  export type AssessmentsUpdateWithWhereUniqueWithoutProfessorInput = {
    where: AssessmentsWhereUniqueInput
    data: XOR<AssessmentsUpdateWithoutProfessorInput, AssessmentsUncheckedUpdateWithoutProfessorInput>
  }

  export type AssessmentsUpdateManyWithWhereWithoutProfessorInput = {
    where: AssessmentsScalarWhereInput
    data: XOR<AssessmentsUpdateManyMutationInput, AssessmentsUncheckedUpdateManyWithoutProfessorInput>
  }

  export type AssessmentsScalarWhereInput = {
    AND?: AssessmentsScalarWhereInput | AssessmentsScalarWhereInput[]
    OR?: AssessmentsScalarWhereInput[]
    NOT?: AssessmentsScalarWhereInput | AssessmentsScalarWhereInput[]
    id?: StringFilter<"Assessments"> | string
    title?: StringFilter<"Assessments"> | string
    batch?: StringNullableListFilter<"Assessments">
    departments?: StringNullableListFilter<"Assessments">
    startTime?: DateTimeFilter<"Assessments"> | Date | string
    endTime?: DateTimeFilter<"Assessments"> | Date | string
    duration?: IntFilter<"Assessments"> | number
    totalQuestions?: IntFilter<"Assessments"> | number
    topics?: StringNullableListFilter<"Assessments">
    status?: EnumAssessmentStatusFilter<"Assessments"> | $Enums.AssessmentStatus
    professorId?: StringFilter<"Assessments"> | string
    createdAt?: DateTimeFilter<"Assessments"> | Date | string
    updatedAt?: DateTimeFilter<"Assessments"> | Date | string
  }

  export type AssessmentsCreateWithoutProblemsInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptTrackerCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionCreateNestedManyWithoutAssessmentInput
    professor: ProfessorCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentsUncheckedCreateWithoutProblemsInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptTrackerUncheckedCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentsCreateOrConnectWithoutProblemsInput = {
    where: AssessmentsWhereUniqueInput
    create: XOR<AssessmentsCreateWithoutProblemsInput, AssessmentsUncheckedCreateWithoutProblemsInput>
  }

  export type ProfessorCreateWithoutProblemsInput = {
    id?: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentsCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutProblemsInput = {
    id?: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentsUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutProblemsInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutProblemsInput, ProfessorUncheckedCreateWithoutProblemsInput>
  }

  export type ProblemLanguageCreateWithoutProblemInput = {
    id?: string
    name: string
    functionSignature: string
    codePrefix: string
    starterCode: string
    codeSuffix: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemLanguageUncheckedCreateWithoutProblemInput = {
    id?: string
    name: string
    functionSignature: string
    codePrefix: string
    starterCode: string
    codeSuffix: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemLanguageCreateOrConnectWithoutProblemInput = {
    where: ProblemLanguageWhereUniqueInput
    create: XOR<ProblemLanguageCreateWithoutProblemInput, ProblemLanguageUncheckedCreateWithoutProblemInput>
  }

  export type ProblemLanguageCreateManyProblemInputEnvelope = {
    data: ProblemLanguageCreateManyProblemInput | ProblemLanguageCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type TestCasesCreateWithoutProblemInput = {
    id?: string
    input: string
    output: string
    isHidden: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCasesUncheckedCreateWithoutProblemInput = {
    id?: string
    input: string
    output: string
    isHidden: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCasesCreateOrConnectWithoutProblemInput = {
    where: TestCasesWhereUniqueInput
    create: XOR<TestCasesCreateWithoutProblemInput, TestCasesUncheckedCreateWithoutProblemInput>
  }

  export type TestCasesCreateManyProblemInputEnvelope = {
    data: TestCasesCreateManyProblemInput | TestCasesCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type QuestionChoiceCreateWithoutProblemInput = {
    id?: string
    text: string
    isCorrect?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionChoiceUncheckedCreateWithoutProblemInput = {
    id?: string
    text: string
    isCorrect?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionChoiceCreateOrConnectWithoutProblemInput = {
    where: QuestionChoiceWhereUniqueInput
    create: XOR<QuestionChoiceCreateWithoutProblemInput, QuestionChoiceUncheckedCreateWithoutProblemInput>
  }

  export type QuestionChoiceCreateManyProblemInputEnvelope = {
    data: QuestionChoiceCreateManyProblemInput | QuestionChoiceCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutProblemInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    student: StudentCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutProblemInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    studentId: string
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutProblemInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput>
  }

  export type SubmissionCreateManyProblemInputEnvelope = {
    data: SubmissionCreateManyProblemInput | SubmissionCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentsUpsertWithoutProblemsInput = {
    update: XOR<AssessmentsUpdateWithoutProblemsInput, AssessmentsUncheckedUpdateWithoutProblemsInput>
    create: XOR<AssessmentsCreateWithoutProblemsInput, AssessmentsUncheckedCreateWithoutProblemsInput>
    where?: AssessmentsWhereInput
  }

  export type AssessmentsUpdateToOneWithWhereWithoutProblemsInput = {
    where?: AssessmentsWhereInput
    data: XOR<AssessmentsUpdateWithoutProblemsInput, AssessmentsUncheckedUpdateWithoutProblemsInput>
  }

  export type AssessmentsUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptTrackerUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUpdateManyWithoutAssessmentNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutAssessmentsNestedInput
  }

  export type AssessmentsUncheckedUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptTrackerUncheckedUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type ProfessorUpsertWithoutProblemsInput = {
    update: XOR<ProfessorUpdateWithoutProblemsInput, ProfessorUncheckedUpdateWithoutProblemsInput>
    create: XOR<ProfessorCreateWithoutProblemsInput, ProfessorUncheckedCreateWithoutProblemsInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutProblemsInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutProblemsInput, ProfessorUncheckedUpdateWithoutProblemsInput>
  }

  export type ProfessorUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentsUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentsUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProblemLanguageUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemLanguageWhereUniqueInput
    update: XOR<ProblemLanguageUpdateWithoutProblemInput, ProblemLanguageUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemLanguageCreateWithoutProblemInput, ProblemLanguageUncheckedCreateWithoutProblemInput>
  }

  export type ProblemLanguageUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemLanguageWhereUniqueInput
    data: XOR<ProblemLanguageUpdateWithoutProblemInput, ProblemLanguageUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemLanguageUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemLanguageScalarWhereInput
    data: XOR<ProblemLanguageUpdateManyMutationInput, ProblemLanguageUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemLanguageScalarWhereInput = {
    AND?: ProblemLanguageScalarWhereInput | ProblemLanguageScalarWhereInput[]
    OR?: ProblemLanguageScalarWhereInput[]
    NOT?: ProblemLanguageScalarWhereInput | ProblemLanguageScalarWhereInput[]
    id?: StringFilter<"ProblemLanguage"> | string
    name?: StringFilter<"ProblemLanguage"> | string
    functionSignature?: StringFilter<"ProblemLanguage"> | string
    codePrefix?: StringFilter<"ProblemLanguage"> | string
    starterCode?: StringFilter<"ProblemLanguage"> | string
    codeSuffix?: StringFilter<"ProblemLanguage"> | string
    problemId?: StringFilter<"ProblemLanguage"> | string
    createdAt?: DateTimeFilter<"ProblemLanguage"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemLanguage"> | Date | string
  }

  export type TestCasesUpsertWithWhereUniqueWithoutProblemInput = {
    where: TestCasesWhereUniqueInput
    update: XOR<TestCasesUpdateWithoutProblemInput, TestCasesUncheckedUpdateWithoutProblemInput>
    create: XOR<TestCasesCreateWithoutProblemInput, TestCasesUncheckedCreateWithoutProblemInput>
  }

  export type TestCasesUpdateWithWhereUniqueWithoutProblemInput = {
    where: TestCasesWhereUniqueInput
    data: XOR<TestCasesUpdateWithoutProblemInput, TestCasesUncheckedUpdateWithoutProblemInput>
  }

  export type TestCasesUpdateManyWithWhereWithoutProblemInput = {
    where: TestCasesScalarWhereInput
    data: XOR<TestCasesUpdateManyMutationInput, TestCasesUncheckedUpdateManyWithoutProblemInput>
  }

  export type TestCasesScalarWhereInput = {
    AND?: TestCasesScalarWhereInput | TestCasesScalarWhereInput[]
    OR?: TestCasesScalarWhereInput[]
    NOT?: TestCasesScalarWhereInput | TestCasesScalarWhereInput[]
    id?: StringFilter<"TestCases"> | string
    input?: StringFilter<"TestCases"> | string
    output?: StringFilter<"TestCases"> | string
    isHidden?: BoolFilter<"TestCases"> | boolean
    problemId?: StringFilter<"TestCases"> | string
    createdAt?: DateTimeFilter<"TestCases"> | Date | string
    updatedAt?: DateTimeFilter<"TestCases"> | Date | string
  }

  export type QuestionChoiceUpsertWithWhereUniqueWithoutProblemInput = {
    where: QuestionChoiceWhereUniqueInput
    update: XOR<QuestionChoiceUpdateWithoutProblemInput, QuestionChoiceUncheckedUpdateWithoutProblemInput>
    create: XOR<QuestionChoiceCreateWithoutProblemInput, QuestionChoiceUncheckedCreateWithoutProblemInput>
  }

  export type QuestionChoiceUpdateWithWhereUniqueWithoutProblemInput = {
    where: QuestionChoiceWhereUniqueInput
    data: XOR<QuestionChoiceUpdateWithoutProblemInput, QuestionChoiceUncheckedUpdateWithoutProblemInput>
  }

  export type QuestionChoiceUpdateManyWithWhereWithoutProblemInput = {
    where: QuestionChoiceScalarWhereInput
    data: XOR<QuestionChoiceUpdateManyMutationInput, QuestionChoiceUncheckedUpdateManyWithoutProblemInput>
  }

  export type QuestionChoiceScalarWhereInput = {
    AND?: QuestionChoiceScalarWhereInput | QuestionChoiceScalarWhereInput[]
    OR?: QuestionChoiceScalarWhereInput[]
    NOT?: QuestionChoiceScalarWhereInput | QuestionChoiceScalarWhereInput[]
    id?: StringFilter<"QuestionChoice"> | string
    text?: StringFilter<"QuestionChoice"> | string
    isCorrect?: BoolFilter<"QuestionChoice"> | boolean
    problemId?: StringFilter<"QuestionChoice"> | string
    createdAt?: DateTimeFilter<"QuestionChoice"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionChoice"> | Date | string
  }

  export type SubmissionUpsertWithWhereUniqueWithoutProblemInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutProblemInput, SubmissionUncheckedUpdateWithoutProblemInput>
    create: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutProblemInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutProblemInput, SubmissionUncheckedUpdateWithoutProblemInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutProblemInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemsCreateWithoutChoicesInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutProblemsInput
    professor: ProfessorCreateNestedOneWithoutProblemsInput
    languages?: ProblemLanguageCreateNestedManyWithoutProblemInput
    testCases?: TestCasesCreateNestedManyWithoutProblemInput
    submissions?: SubmissionCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUncheckedCreateWithoutChoicesInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    languages?: ProblemLanguageUncheckedCreateNestedManyWithoutProblemInput
    testCases?: TestCasesUncheckedCreateNestedManyWithoutProblemInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemsCreateOrConnectWithoutChoicesInput = {
    where: ProblemsWhereUniqueInput
    create: XOR<ProblemsCreateWithoutChoicesInput, ProblemsUncheckedCreateWithoutChoicesInput>
  }

  export type ProblemsUpsertWithoutChoicesInput = {
    update: XOR<ProblemsUpdateWithoutChoicesInput, ProblemsUncheckedUpdateWithoutChoicesInput>
    create: XOR<ProblemsCreateWithoutChoicesInput, ProblemsUncheckedCreateWithoutChoicesInput>
    where?: ProblemsWhereInput
  }

  export type ProblemsUpdateToOneWithWhereWithoutChoicesInput = {
    where?: ProblemsWhereInput
    data: XOR<ProblemsUpdateWithoutChoicesInput, ProblemsUncheckedUpdateWithoutChoicesInput>
  }

  export type ProblemsUpdateWithoutChoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutProblemsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutProblemsNestedInput
    languages?: ProblemLanguageUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateWithoutChoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    languages?: ProblemLanguageUncheckedUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUncheckedUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type StudentCreateWithoutSubmissionsInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptTrackerCreateNestedManyWithoutStudentInput
    assessmentSubmissions?: AssessmentSubmissionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AttemptTrackerUncheckedCreateNestedManyWithoutStudentInput
    assessmentSubmissions?: AssessmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSubmissionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
  }

  export type ProblemsCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutProblemsInput
    professor: ProfessorCreateNestedOneWithoutProblemsInput
    languages?: ProblemLanguageCreateNestedManyWithoutProblemInput
    testCases?: TestCasesCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    languages?: ProblemLanguageUncheckedCreateNestedManyWithoutProblemInput
    testCases?: TestCasesUncheckedCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemsCreateOrConnectWithoutSubmissionsInput = {
    where: ProblemsWhereUniqueInput
    create: XOR<ProblemsCreateWithoutSubmissionsInput, ProblemsUncheckedCreateWithoutSubmissionsInput>
  }

  export type StudentUpsertWithoutSubmissionsInput = {
    update: XOR<StudentUpdateWithoutSubmissionsInput, StudentUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutSubmissionsInput, StudentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type StudentUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptTrackerUpdateManyWithoutStudentNestedInput
    assessmentSubmissions?: AssessmentSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AttemptTrackerUncheckedUpdateManyWithoutStudentNestedInput
    assessmentSubmissions?: AssessmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ProblemsUpsertWithoutSubmissionsInput = {
    update: XOR<ProblemsUpdateWithoutSubmissionsInput, ProblemsUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<ProblemsCreateWithoutSubmissionsInput, ProblemsUncheckedCreateWithoutSubmissionsInput>
    where?: ProblemsWhereInput
  }

  export type ProblemsUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: ProblemsWhereInput
    data: XOR<ProblemsUpdateWithoutSubmissionsInput, ProblemsUncheckedUpdateWithoutSubmissionsInput>
  }

  export type ProblemsUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutProblemsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutProblemsNestedInput
    languages?: ProblemLanguageUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    languages?: ProblemLanguageUncheckedUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUncheckedUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsCreateWithoutAssessmentInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    createdAt?: Date | string
    updatedAt?: Date | string
    professor: ProfessorCreateNestedOneWithoutProblemsInput
    languages?: ProblemLanguageCreateNestedManyWithoutProblemInput
    testCases?: TestCasesCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceCreateNestedManyWithoutProblemInput
    submissions?: SubmissionCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUncheckedCreateWithoutAssessmentInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    languages?: ProblemLanguageUncheckedCreateNestedManyWithoutProblemInput
    testCases?: TestCasesUncheckedCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceUncheckedCreateNestedManyWithoutProblemInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemsCreateOrConnectWithoutAssessmentInput = {
    where: ProblemsWhereUniqueInput
    create: XOR<ProblemsCreateWithoutAssessmentInput, ProblemsUncheckedCreateWithoutAssessmentInput>
  }

  export type ProblemsCreateManyAssessmentInputEnvelope = {
    data: ProblemsCreateManyAssessmentInput | ProblemsCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type AttemptTrackerCreateWithoutAssessmentInput = {
    id?: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAttemptsInput
  }

  export type AttemptTrackerUncheckedCreateWithoutAssessmentInput = {
    id?: string
    studentId: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttemptTrackerCreateOrConnectWithoutAssessmentInput = {
    where: AttemptTrackerWhereUniqueInput
    create: XOR<AttemptTrackerCreateWithoutAssessmentInput, AttemptTrackerUncheckedCreateWithoutAssessmentInput>
  }

  export type AttemptTrackerCreateManyAssessmentInputEnvelope = {
    data: AttemptTrackerCreateManyAssessmentInput | AttemptTrackerCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentSubmissionCreateWithoutAssessmentInput = {
    id?: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutAssessmentSubmissionsInput
  }

  export type AssessmentSubmissionUncheckedCreateWithoutAssessmentInput = {
    id?: string
    studentId: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentSubmissionCreateOrConnectWithoutAssessmentInput = {
    where: AssessmentSubmissionWhereUniqueInput
    create: XOR<AssessmentSubmissionCreateWithoutAssessmentInput, AssessmentSubmissionUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentSubmissionCreateManyAssessmentInputEnvelope = {
    data: AssessmentSubmissionCreateManyAssessmentInput | AssessmentSubmissionCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type ProfessorCreateWithoutAssessmentsInput = {
    id?: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutAssessmentsInput = {
    id?: string
    email: string
    name: string
    password: string
    department: string
    professorId: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutAssessmentsInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutAssessmentsInput, ProfessorUncheckedCreateWithoutAssessmentsInput>
  }

  export type ProblemsUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: ProblemsWhereUniqueInput
    update: XOR<ProblemsUpdateWithoutAssessmentInput, ProblemsUncheckedUpdateWithoutAssessmentInput>
    create: XOR<ProblemsCreateWithoutAssessmentInput, ProblemsUncheckedCreateWithoutAssessmentInput>
  }

  export type ProblemsUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: ProblemsWhereUniqueInput
    data: XOR<ProblemsUpdateWithoutAssessmentInput, ProblemsUncheckedUpdateWithoutAssessmentInput>
  }

  export type ProblemsUpdateManyWithWhereWithoutAssessmentInput = {
    where: ProblemsScalarWhereInput
    data: XOR<ProblemsUpdateManyMutationInput, ProblemsUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type AttemptTrackerUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: AttemptTrackerWhereUniqueInput
    update: XOR<AttemptTrackerUpdateWithoutAssessmentInput, AttemptTrackerUncheckedUpdateWithoutAssessmentInput>
    create: XOR<AttemptTrackerCreateWithoutAssessmentInput, AttemptTrackerUncheckedCreateWithoutAssessmentInput>
  }

  export type AttemptTrackerUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: AttemptTrackerWhereUniqueInput
    data: XOR<AttemptTrackerUpdateWithoutAssessmentInput, AttemptTrackerUncheckedUpdateWithoutAssessmentInput>
  }

  export type AttemptTrackerUpdateManyWithWhereWithoutAssessmentInput = {
    where: AttemptTrackerScalarWhereInput
    data: XOR<AttemptTrackerUpdateManyMutationInput, AttemptTrackerUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type AssessmentSubmissionUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentSubmissionWhereUniqueInput
    update: XOR<AssessmentSubmissionUpdateWithoutAssessmentInput, AssessmentSubmissionUncheckedUpdateWithoutAssessmentInput>
    create: XOR<AssessmentSubmissionCreateWithoutAssessmentInput, AssessmentSubmissionUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentSubmissionUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentSubmissionWhereUniqueInput
    data: XOR<AssessmentSubmissionUpdateWithoutAssessmentInput, AssessmentSubmissionUncheckedUpdateWithoutAssessmentInput>
  }

  export type AssessmentSubmissionUpdateManyWithWhereWithoutAssessmentInput = {
    where: AssessmentSubmissionScalarWhereInput
    data: XOR<AssessmentSubmissionUpdateManyMutationInput, AssessmentSubmissionUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type ProfessorUpsertWithoutAssessmentsInput = {
    update: XOR<ProfessorUpdateWithoutAssessmentsInput, ProfessorUncheckedUpdateWithoutAssessmentsInput>
    create: XOR<ProfessorCreateWithoutAssessmentsInput, ProfessorUncheckedCreateWithoutAssessmentsInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutAssessmentsInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutAssessmentsInput, ProfessorUncheckedUpdateWithoutAssessmentsInput>
  }

  export type ProfessorUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProblemsCreateWithoutTestCasesInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutProblemsInput
    professor: ProfessorCreateNestedOneWithoutProblemsInput
    languages?: ProblemLanguageCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceCreateNestedManyWithoutProblemInput
    submissions?: SubmissionCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUncheckedCreateWithoutTestCasesInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    languages?: ProblemLanguageUncheckedCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceUncheckedCreateNestedManyWithoutProblemInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemsCreateOrConnectWithoutTestCasesInput = {
    where: ProblemsWhereUniqueInput
    create: XOR<ProblemsCreateWithoutTestCasesInput, ProblemsUncheckedCreateWithoutTestCasesInput>
  }

  export type ProblemsUpsertWithoutTestCasesInput = {
    update: XOR<ProblemsUpdateWithoutTestCasesInput, ProblemsUncheckedUpdateWithoutTestCasesInput>
    create: XOR<ProblemsCreateWithoutTestCasesInput, ProblemsUncheckedCreateWithoutTestCasesInput>
    where?: ProblemsWhereInput
  }

  export type ProblemsUpdateToOneWithWhereWithoutTestCasesInput = {
    where?: ProblemsWhereInput
    data: XOR<ProblemsUpdateWithoutTestCasesInput, ProblemsUncheckedUpdateWithoutTestCasesInput>
  }

  export type ProblemsUpdateWithoutTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutProblemsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutProblemsNestedInput
    languages?: ProblemLanguageUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateWithoutTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    languages?: ProblemLanguageUncheckedUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUncheckedUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type StudentCreateWithoutAttemptsInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    assessmentSubmissions?: AssessmentSubmissionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAttemptsInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    assessmentSubmissions?: AssessmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAttemptsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAttemptsInput, StudentUncheckedCreateWithoutAttemptsInput>
  }

  export type AssessmentsCreateWithoutAttemptsInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionCreateNestedManyWithoutAssessmentInput
    professor: ProfessorCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentsUncheckedCreateWithoutAttemptsInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsUncheckedCreateNestedManyWithoutAssessmentInput
    submissions?: AssessmentSubmissionUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentsCreateOrConnectWithoutAttemptsInput = {
    where: AssessmentsWhereUniqueInput
    create: XOR<AssessmentsCreateWithoutAttemptsInput, AssessmentsUncheckedCreateWithoutAttemptsInput>
  }

  export type StudentUpsertWithoutAttemptsInput = {
    update: XOR<StudentUpdateWithoutAttemptsInput, StudentUncheckedUpdateWithoutAttemptsInput>
    create: XOR<StudentCreateWithoutAttemptsInput, StudentUncheckedCreateWithoutAttemptsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAttemptsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAttemptsInput, StudentUncheckedUpdateWithoutAttemptsInput>
  }

  export type StudentUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    assessmentSubmissions?: AssessmentSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    assessmentSubmissions?: AssessmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AssessmentsUpsertWithoutAttemptsInput = {
    update: XOR<AssessmentsUpdateWithoutAttemptsInput, AssessmentsUncheckedUpdateWithoutAttemptsInput>
    create: XOR<AssessmentsCreateWithoutAttemptsInput, AssessmentsUncheckedCreateWithoutAttemptsInput>
    where?: AssessmentsWhereInput
  }

  export type AssessmentsUpdateToOneWithWhereWithoutAttemptsInput = {
    where?: AssessmentsWhereInput
    data: XOR<AssessmentsUpdateWithoutAttemptsInput, AssessmentsUncheckedUpdateWithoutAttemptsInput>
  }

  export type AssessmentsUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUpdateManyWithoutAssessmentNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutAssessmentsNestedInput
  }

  export type AssessmentsUncheckedUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUncheckedUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type ProblemsCreateWithoutLanguagesInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    createdAt?: Date | string
    updatedAt?: Date | string
    assessment: AssessmentsCreateNestedOneWithoutProblemsInput
    professor: ProfessorCreateNestedOneWithoutProblemsInput
    testCases?: TestCasesCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceCreateNestedManyWithoutProblemInput
    submissions?: SubmissionCreateNestedManyWithoutProblemInput
  }

  export type ProblemsUncheckedCreateWithoutLanguagesInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    testCases?: TestCasesUncheckedCreateNestedManyWithoutProblemInput
    choices?: QuestionChoiceUncheckedCreateNestedManyWithoutProblemInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemsCreateOrConnectWithoutLanguagesInput = {
    where: ProblemsWhereUniqueInput
    create: XOR<ProblemsCreateWithoutLanguagesInput, ProblemsUncheckedCreateWithoutLanguagesInput>
  }

  export type ProblemsUpsertWithoutLanguagesInput = {
    update: XOR<ProblemsUpdateWithoutLanguagesInput, ProblemsUncheckedUpdateWithoutLanguagesInput>
    create: XOR<ProblemsCreateWithoutLanguagesInput, ProblemsUncheckedCreateWithoutLanguagesInput>
    where?: ProblemsWhereInput
  }

  export type ProblemsUpdateToOneWithWhereWithoutLanguagesInput = {
    where?: ProblemsWhereInput
    data: XOR<ProblemsUpdateWithoutLanguagesInput, ProblemsUncheckedUpdateWithoutLanguagesInput>
  }

  export type ProblemsUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutProblemsNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutProblemsNestedInput
    testCases?: TestCasesUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateWithoutLanguagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCases?: TestCasesUncheckedUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUncheckedUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type StudentCreateWithoutAssessmentSubmissionsInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    attempts?: AttemptTrackerCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAssessmentSubmissionsInput = {
    id?: string
    studentId: string
    email?: string | null
    name?: string | null
    password: string
    department: string
    PhoneNumber?: string | null
    semester?: number | null
    batch: string
    role?: $Enums.Role
    isVerified?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    attempts?: AttemptTrackerUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAssessmentSubmissionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAssessmentSubmissionsInput, StudentUncheckedCreateWithoutAssessmentSubmissionsInput>
  }

  export type AssessmentsCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsCreateNestedManyWithoutAssessmentInput
    attempts?: AttemptTrackerCreateNestedManyWithoutAssessmentInput
    professor: ProfessorCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentsUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemsUncheckedCreateNestedManyWithoutAssessmentInput
    attempts?: AttemptTrackerUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentsCreateOrConnectWithoutSubmissionsInput = {
    where: AssessmentsWhereUniqueInput
    create: XOR<AssessmentsCreateWithoutSubmissionsInput, AssessmentsUncheckedCreateWithoutSubmissionsInput>
  }

  export type StudentUpsertWithoutAssessmentSubmissionsInput = {
    update: XOR<StudentUpdateWithoutAssessmentSubmissionsInput, StudentUncheckedUpdateWithoutAssessmentSubmissionsInput>
    create: XOR<StudentCreateWithoutAssessmentSubmissionsInput, StudentUncheckedCreateWithoutAssessmentSubmissionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAssessmentSubmissionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAssessmentSubmissionsInput, StudentUncheckedUpdateWithoutAssessmentSubmissionsInput>
  }

  export type StudentUpdateWithoutAssessmentSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    attempts?: AttemptTrackerUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAssessmentSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    batch?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    attempts?: AttemptTrackerUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AssessmentsUpsertWithoutSubmissionsInput = {
    update: XOR<AssessmentsUpdateWithoutSubmissionsInput, AssessmentsUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<AssessmentsCreateWithoutSubmissionsInput, AssessmentsUncheckedCreateWithoutSubmissionsInput>
    where?: AssessmentsWhereInput
  }

  export type AssessmentsUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: AssessmentsWhereInput
    data: XOR<AssessmentsUpdateWithoutSubmissionsInput, AssessmentsUncheckedUpdateWithoutSubmissionsInput>
  }

  export type AssessmentsUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUpdateManyWithoutAssessmentNestedInput
    attempts?: AttemptTrackerUpdateManyWithoutAssessmentNestedInput
    professor?: ProfessorUpdateOneRequiredWithoutAssessmentsNestedInput
  }

  export type AssessmentsUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUncheckedUpdateManyWithoutAssessmentNestedInput
    attempts?: AttemptTrackerUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type SubmissionCreateManyStudentInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    problemId: string
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttemptTrackerCreateManyStudentInput = {
    id?: string
    assessmentId: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentSubmissionCreateManyStudentInput = {
    id?: string
    assessmentId: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemsUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    problemId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    problemId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptTrackerUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutAttemptsNestedInput
  }

  export type AttemptTrackerUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptTrackerUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentSubmissionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type AssessmentSubmissionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentSubmissionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemsCreateManyProfessorInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    assessmentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentsCreateManyProfessorInput = {
    id?: string
    title: string
    batch?: AssessmentsCreatebatchInput | string[]
    departments?: AssessmentsCreatedepartmentsInput | string[]
    startTime: Date | string
    endTime: Date | string
    duration: number
    totalQuestions: number
    topics?: AssessmentsCreatetopicsInput | string[]
    status?: $Enums.AssessmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemsUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessment?: AssessmentsUpdateOneRequiredWithoutProblemsNestedInput
    languages?: ProblemLanguageUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    languages?: ProblemLanguageUncheckedUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUncheckedUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUncheckedUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateManyWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    assessmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentsUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUpdateManyWithoutAssessmentNestedInput
    attempts?: AttemptTrackerUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentsUncheckedUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemsUncheckedUpdateManyWithoutAssessmentNestedInput
    attempts?: AttemptTrackerUncheckedUpdateManyWithoutAssessmentNestedInput
    submissions?: AssessmentSubmissionUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentsUncheckedUpdateManyWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    batch?: AssessmentsUpdatebatchInput | string[]
    departments?: AssessmentsUpdatedepartmentsInput | string[]
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    totalQuestions?: IntFieldUpdateOperationsInput | number
    topics?: AssessmentsUpdatetopicsInput | string[]
    status?: EnumAssessmentStatusFieldUpdateOperationsInput | $Enums.AssessmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemLanguageCreateManyProblemInput = {
    id?: string
    name: string
    functionSignature: string
    codePrefix: string
    starterCode: string
    codeSuffix: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCasesCreateManyProblemInput = {
    id?: string
    input: string
    output: string
    isHidden: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionChoiceCreateManyProblemInput = {
    id?: string
    text: string
    isCorrect?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionCreateManyProblemInput = {
    id?: string
    code?: string | null
    language?: string | null
    selectedChoiceId?: string | null
    status: $Enums.Status
    score: number
    studentId: string
    isSubmitted?: boolean
    isCorrect?: boolean | null
    questionNumber?: number | null
    questionPreview?: string | null
    executionTime?: number | null
    memoryUsed?: number | null
    errorMessage?: string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ProblemLanguageUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    functionSignature?: StringFieldUpdateOperationsInput | string
    codePrefix?: StringFieldUpdateOperationsInput | string
    starterCode?: StringFieldUpdateOperationsInput | string
    codeSuffix?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemLanguageUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    functionSignature?: StringFieldUpdateOperationsInput | string
    codePrefix?: StringFieldUpdateOperationsInput | string
    starterCode?: StringFieldUpdateOperationsInput | string
    codeSuffix?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemLanguageUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    functionSignature?: StringFieldUpdateOperationsInput | string
    codePrefix?: StringFieldUpdateOperationsInput | string
    starterCode?: StringFieldUpdateOperationsInput | string
    codeSuffix?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCasesUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCasesUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCasesUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: StringFieldUpdateOperationsInput | string
    isHidden?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionChoiceUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionChoiceUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionChoiceUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    selectedChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    score?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isCorrect?: NullableBoolFieldUpdateOperationsInput | boolean | null
    questionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    questionPreview?: NullableStringFieldUpdateOperationsInput | string | null
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    testResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemsCreateManyAssessmentInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.DifficultyLevel
    score: number
    questionType?: $Enums.QuestionType
    professorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttemptTrackerCreateManyAssessmentInput = {
    id?: string
    studentId: string
    startTime?: Date | string
    endTime?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentSubmissionCreateManyAssessmentInput = {
    id?: string
    studentId: string
    totalScore: number
    maxScore: number
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status?: $Enums.AssessmentSubmissionStatus
    codingScore: number
    mcqScore: number
    totalProblems: number
    problemsAttempted: number
    problemsCompleted: number
    averageTimePerProblem?: number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemsUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professor?: ProfessorUpdateOneRequiredWithoutProblemsNestedInput
    languages?: ProblemLanguageUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    languages?: ProblemLanguageUncheckedUpdateManyWithoutProblemNestedInput
    testCases?: TestCasesUncheckedUpdateManyWithoutProblemNestedInput
    choices?: QuestionChoiceUncheckedUpdateManyWithoutProblemNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemsUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyLevelFieldUpdateOperationsInput | $Enums.DifficultyLevel
    score?: IntFieldUpdateOperationsInput | number
    questionType?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    professorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptTrackerUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAttemptsNestedInput
  }

  export type AttemptTrackerUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttemptTrackerUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentSubmissionUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAssessmentSubmissionsNestedInput
  }

  export type AssessmentSubmissionUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentSubmissionUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    totalScore?: IntFieldUpdateOperationsInput | number
    maxScore?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAssessmentSubmissionStatusFieldUpdateOperationsInput | $Enums.AssessmentSubmissionStatus
    codingScore?: IntFieldUpdateOperationsInput | number
    mcqScore?: IntFieldUpdateOperationsInput | number
    totalProblems?: IntFieldUpdateOperationsInput | number
    problemsAttempted?: IntFieldUpdateOperationsInput | number
    problemsCompleted?: IntFieldUpdateOperationsInput | number
    averageTimePerProblem?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}