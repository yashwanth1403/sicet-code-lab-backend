
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  email: 'email',
  name: 'name',
  password: 'password',
  department: 'department',
  PhoneNumber: 'PhoneNumber',
  semester: 'semester',
  batch: 'batch',
  role: 'role',
  isVerified: 'isVerified',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessorScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  department: 'department',
  professorId: 'professorId',
  role: 'role',
  isVerified: 'isVerified',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProblemsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  score: 'score',
  questionType: 'questionType',
  assessmentId: 'assessmentId',
  professorId: 'professorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionChoiceScalarFieldEnum = {
  id: 'id',
  text: 'text',
  isCorrect: 'isCorrect',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  language: 'language',
  selectedChoiceId: 'selectedChoiceId',
  status: 'status',
  score: 'score',
  studentId: 'studentId',
  problemId: 'problemId',
  isSubmitted: 'isSubmitted',
  isCorrect: 'isCorrect',
  questionNumber: 'questionNumber',
  questionPreview: 'questionPreview',
  executionTime: 'executionTime',
  memoryUsed: 'memoryUsed',
  errorMessage: 'errorMessage',
  testResults: 'testResults',
  createdAt: 'createdAt'
};

exports.Prisma.AssessmentsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  batch: 'batch',
  departments: 'departments',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  totalQuestions: 'totalQuestions',
  topics: 'topics',
  status: 'status',
  professorId: 'professorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestCasesScalarFieldEnum = {
  id: 'id',
  input: 'input',
  output: 'output',
  isHidden: 'isHidden',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttemptTrackerScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  assessmentId: 'assessmentId',
  startTime: 'startTime',
  endTime: 'endTime',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProblemLanguageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  functionSignature: 'functionSignature',
  codePrefix: 'codePrefix',
  starterCode: 'starterCode',
  codeSuffix: 'codeSuffix',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssessmentSubmissionScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  assessmentId: 'assessmentId',
  totalScore: 'totalScore',
  maxScore: 'maxScore',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  status: 'status',
  codingScore: 'codingScore',
  mcqScore: 'mcqScore',
  totalProblems: 'totalProblems',
  problemsAttempted: 'problemsAttempted',
  problemsCompleted: 'problemsCompleted',
  averageTimePerProblem: 'averageTimePerProblem',
  submissionDetails: 'submissionDetails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  PROFESSOR: 'PROFESSOR',
  ADMIN: 'ADMIN'
};

exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  Easy: 'Easy',
  Medium: 'Medium',
  Hard: 'Hard'
};

exports.AssessmentStatus = exports.$Enums.AssessmentStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  CODING: 'CODING',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE'
};

exports.Status = exports.$Enums.Status = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  ERROR: 'ERROR'
};

exports.AssessmentSubmissionStatus = exports.$Enums.AssessmentSubmissionStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  TIMED_OUT: 'TIMED_OUT',
  SUBMITTED: 'SUBMITTED'
};

exports.Prisma.ModelName = {
  Student: 'Student',
  Professor: 'Professor',
  Problems: 'Problems',
  QuestionChoice: 'QuestionChoice',
  Submission: 'Submission',
  Assessments: 'Assessments',
  TestCases: 'TestCases',
  AttemptTracker: 'AttemptTracker',
  ProblemLanguage: 'ProblemLanguage',
  AssessmentSubmission: 'AssessmentSubmission'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\yashwanth reddy\\sicet-code-lab-f\\sicet-backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\yashwanth reddy\\sicet-code-lab-f\\sicet-backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ndatasource db {\n  provider = \"postgresql\" // or your database provider\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Student {\n  id                    String                 @id @default(cuid())\n  studentId             String                 @unique // College provided ID\n  email                 String?                @unique\n  name                  String?\n  password              String\n  department            String\n  PhoneNumber           String?                @unique\n  semester              Int?\n  batch                 String // Graduation year\n  role                  Role                   @default(STUDENT)\n  isVerified            Boolean                @default(false)\n  isActive              Boolean                @default(true)\n  submissions           Submission[]\n  attempts              AttemptTracker[] // New relation to track attempts\n  assessmentSubmissions AssessmentSubmission[] // Add relation to assessment submissions\n  createdAt             DateTime               @default(now())\n  updatedAt             DateTime               @updatedAt\n\n  @@index([studentId])\n  @@index([email])\n}\n\nmodel Professor {\n  id          String        @id @default(cuid())\n  email       String        @unique\n  name        String\n  password    String\n  department  String\n  professorId String        @unique\n  role        Role          @default(PROFESSOR)\n  problems    Problems[]\n  assessments Assessments[]\n  isVerified  Boolean       @default(false)\n  isActive    Boolean       @default(true)\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt\n\n  @@index([professorId])\n  @@index([email])\n}\n\nenum Role {\n  STUDENT\n  PROFESSOR\n  ADMIN\n}\n\nenum DifficultyLevel {\n  Easy\n  Medium\n  Hard\n}\n\nenum AssessmentStatus {\n  DRAFT\n  PUBLISHED\n  ONGOING\n  COMPLETED\n  ARCHIVED\n}\n\n// New enum to differentiate between question types\nenum QuestionType {\n  CODING\n  MULTIPLE_CHOICE\n}\n\nmodel Problems {\n  id           String            @id @default(cuid())\n  title        String\n  description  String            @db.Text\n  difficulty   DifficultyLevel\n  score        Int // Score moved from TestCases to Problems\n  questionType QuestionType      @default(CODING) // Add question type field\n  assessment   Assessments       @relation(fields: [assessmentId], references: [id], onDelete: Cascade)\n  assessmentId String\n  professor    Professor         @relation(fields: [professorId], references: [id])\n  professorId  String\n  languages    ProblemLanguage[] // Languages with starter code for this problem\n  testCases    TestCases[]\n  choices      QuestionChoice[] // Add relation to choices for multiple choice questions\n  submissions  Submission[]\n  createdAt    DateTime          @default(now())\n  updatedAt    DateTime          @updatedAt\n\n  @@index([assessmentId])\n  @@index([professorId])\n  @@index([difficulty])\n}\n\n// New model for multiple choice question options\nmodel QuestionChoice {\n  id        String   @id @default(cuid())\n  text      String\n  isCorrect Boolean  @default(false)\n  problem   Problems @relation(fields: [problemId], references: [id], onDelete: Cascade)\n  problemId String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([problemId])\n}\n\nmodel Submission {\n  id               String   @id @default(cuid())\n  code             String?  @db.Text\n  language         String?\n  selectedChoiceId String?\n  status           Status\n  score            Int\n  student          Student  @relation(fields: [studentId], references: [id])\n  studentId        String\n  problem          Problems @relation(fields: [problemId], references: [id])\n  problemId        String\n  isSubmitted      Boolean  @default(false)\n  isCorrect        Boolean?\n  questionNumber   Int?\n  questionPreview  String?\n  executionTime    Int? // Time taken in milliseconds\n  memoryUsed       Int? // Memory used in KB\n  errorMessage     String? // Store any compilation/runtime errors\n  testResults      Json? // Store detailed test case results\n  createdAt        DateTime @default(now())\n\n  @@unique([studentId, problemId])\n  @@index([studentId])\n  @@index([problemId])\n  @@index([status])\n  @@index([isSubmitted])\n}\n\nenum Status {\n  PENDING\n  RUNNING\n  COMPLETED\n  FAILED\n  ERROR\n}\n\nmodel Assessments {\n  id             String                 @id @default(cuid())\n  title          String\n  batch          String[] // Graduation years\n  departments    String[]\n  startTime      DateTime\n  endTime        DateTime\n  duration       Int\n  totalQuestions Int\n  topics         String[]\n  status         AssessmentStatus       @default(DRAFT)\n  problems       Problems[]\n  attempts       AttemptTracker[] // New relation to track student attempts\n  submissions    AssessmentSubmission[] // Add relation to assessment submissions\n  professor      Professor              @relation(fields: [professorId], references: [id])\n  professorId    String\n  createdAt      DateTime               @default(now())\n  updatedAt      DateTime               @updatedAt\n\n  @@index([batch])\n  @@index([professorId])\n}\n\nmodel TestCases {\n  id        String   @id @default(cuid())\n  input     String   @db.Text\n  output    String   @db.Text\n  isHidden  Boolean\n  problem   Problems @relation(fields: [problemId], references: [id], onDelete: Cascade)\n  problemId String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now())\n\n  @@index([problemId])\n}\n\n// New model to track assessment attempts\nmodel AttemptTracker {\n  id           String      @id @default(cuid())\n  student      Student     @relation(fields: [studentId], references: [id])\n  studentId    String\n  assessment   Assessments @relation(fields: [assessmentId], references: [id], onDelete: Cascade)\n  assessmentId String\n  startTime    DateTime    @default(now()) // When the student started the assessment\n  endTime      DateTime? // When the student submitted or assessment timed out\n  isCompleted  Boolean     @default(false) // Whether the student completed the assessment\n  createdAt    DateTime    @default(now())\n  updatedAt    DateTime    @updatedAt\n\n  @@unique([studentId, assessmentId]) // One attempt per student per assessment\n  @@index([studentId])\n  @@index([assessmentId])\n}\n\n// New model for problem languages with starter code\nmodel ProblemLanguage {\n  id                String   @id @default(cuid())\n  name              String // e.g., \"Java\", \"Python\", \"C++\"\n  functionSignature String // Function signature to display in UI\n  codePrefix        String   @db.Text // Code to insert BEFORE user's code\n  starterCode       String   @db.Text // Template code shown to the user\n  codeSuffix        String   @db.Text // Code to insert AFTER user's code\n  problem           Problems @relation(fields: [problemId], references: [id], onDelete: Cascade)\n  problemId         String\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  @@unique([name, problemId])\n  @@index([problemId])\n}\n\nmodel AssessmentSubmission {\n  id                    String                     @id @default(cuid())\n  student               Student                    @relation(fields: [studentId], references: [id])\n  studentId             String\n  assessment            Assessments                @relation(fields: [assessmentId], references: [id])\n  assessmentId          String\n  totalScore            Int // Total score across all problems\n  maxScore              Int // Maximum possible score\n  startTime             DateTime                   @default(now())\n  endTime               DateTime? // When the assessment was completed\n  duration              Int? // Time taken in minutes\n  status                AssessmentSubmissionStatus @default(IN_PROGRESS)\n  codingScore           Int // Score from coding problems\n  mcqScore              Int // Score from MCQ problems\n  totalProblems         Int // Total number of problems\n  problemsAttempted     Int // Number of problems attempted\n  problemsCompleted     Int // Number of problems completed successfully\n  averageTimePerProblem Float? // Average time spent per problem in minutes\n  submissionDetails     Json? // Store detailed breakdown of submissions\n  createdAt             DateTime                   @default(now())\n  updatedAt             DateTime                   @updatedAt\n\n  @@unique([studentId, assessmentId]) // One submission per student per assessment\n  @@index([studentId])\n  @@index([assessmentId])\n  @@index([status])\n}\n\nenum AssessmentSubmissionStatus {\n  IN_PROGRESS\n  COMPLETED\n  TIMED_OUT\n  SUBMITTED\n}\n",
  "inlineSchemaHash": "e86f8b8e7c985d76511d5c0817c8781a12e56de8ccdbdf2d278d5f8d4cefd353",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Student\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"department\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"PhoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"semester\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"batch\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"StudentToSubmission\"},{\"name\":\"attempts\",\"kind\":\"object\",\"type\":\"AttemptTracker\",\"relationName\":\"AttemptTrackerToStudent\"},{\"name\":\"assessmentSubmissions\",\"kind\":\"object\",\"type\":\"AssessmentSubmission\",\"relationName\":\"AssessmentSubmissionToStudent\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Professor\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"department\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"professorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"problems\",\"kind\":\"object\",\"type\":\"Problems\",\"relationName\":\"ProblemsToProfessor\"},{\"name\":\"assessments\",\"kind\":\"object\",\"type\":\"Assessments\",\"relationName\":\"AssessmentsToProfessor\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Problems\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"enum\",\"type\":\"DifficultyLevel\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionType\",\"kind\":\"enum\",\"type\":\"QuestionType\"},{\"name\":\"assessment\",\"kind\":\"object\",\"type\":\"Assessments\",\"relationName\":\"AssessmentsToProblems\"},{\"name\":\"assessmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"professor\",\"kind\":\"object\",\"type\":\"Professor\",\"relationName\":\"ProblemsToProfessor\"},{\"name\":\"professorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"languages\",\"kind\":\"object\",\"type\":\"ProblemLanguage\",\"relationName\":\"ProblemLanguageToProblems\"},{\"name\":\"testCases\",\"kind\":\"object\",\"type\":\"TestCases\",\"relationName\":\"ProblemsToTestCases\"},{\"name\":\"choices\",\"kind\":\"object\",\"type\":\"QuestionChoice\",\"relationName\":\"ProblemsToQuestionChoice\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"ProblemsToSubmission\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"QuestionChoice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isCorrect\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problems\",\"relationName\":\"ProblemsToQuestionChoice\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"selectedChoiceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"Status\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"StudentToSubmission\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problems\",\"relationName\":\"ProblemsToSubmission\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isSubmitted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isCorrect\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"questionNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionPreview\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"executionTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"memoryUsed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"testResults\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Assessments\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batch\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"departments\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalQuestions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"topics\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AssessmentStatus\"},{\"name\":\"problems\",\"kind\":\"object\",\"type\":\"Problems\",\"relationName\":\"AssessmentsToProblems\"},{\"name\":\"attempts\",\"kind\":\"object\",\"type\":\"AttemptTracker\",\"relationName\":\"AssessmentsToAttemptTracker\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"AssessmentSubmission\",\"relationName\":\"AssessmentSubmissionToAssessments\"},{\"name\":\"professor\",\"kind\":\"object\",\"type\":\"Professor\",\"relationName\":\"AssessmentsToProfessor\"},{\"name\":\"professorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TestCases\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"input\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"output\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isHidden\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problems\",\"relationName\":\"ProblemsToTestCases\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AttemptTracker\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"AttemptTrackerToStudent\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assessment\",\"kind\":\"object\",\"type\":\"Assessments\",\"relationName\":\"AssessmentsToAttemptTracker\"},{\"name\":\"assessmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ProblemLanguage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"functionSignature\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"codePrefix\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"starterCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"codeSuffix\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problems\",\"relationName\":\"ProblemLanguageToProblems\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AssessmentSubmission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"Student\",\"relationName\":\"AssessmentSubmissionToStudent\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assessment\",\"kind\":\"object\",\"type\":\"Assessments\",\"relationName\":\"AssessmentSubmissionToAssessments\"},{\"name\":\"assessmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AssessmentSubmissionStatus\"},{\"name\":\"codingScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"mcqScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalProblems\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"problemsAttempted\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"problemsCompleted\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"averageTimePerProblem\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"submissionDetails\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

